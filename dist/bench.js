/*! For license information please see bench.js.LICENSE.txt */
(()=>{var __webpack_modules__={717:e=>{"function"==typeof Object.create?e.exports=function(e,r){e.super_=r,e.prototype=Object.create(r.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}})}:e.exports=function(e,r){e.super_=r;var t=function(){};t.prototype=r.prototype,e.prototype=new t,e.prototype.constructor=e}},520:(e,r,t)=>{"use strict";var o="win32"===process.platform,n=t(539);function i(e,r){for(var t=[],o=0;o<e.length;o++){var n=e[o];n&&"."!==n&&(".."===n?t.length&&".."!==t[t.length-1]?t.pop():r&&t.push(".."):t.push(n))}return t}function s(e){for(var r=e.length-1,t=0;t<=r&&!e[t];t++);for(var o=r;o>=0&&!e[o];o--);return 0===t&&o===r?e:t>o?[]:e.slice(t,o+1)}var u=/^([a-zA-Z]:|[\\\/]{2}[^\\\/]+[\\\/]+[^\\\/]+)?([\\\/])?([\s\S]*?)$/,a=/^([\s\S]*?)((?:\.{1,2}|[^\\\/]+?|)(\.[^.\/\\]*|))(?:[\\\/]*)$/,l={};function c(e){var r=u.exec(e),t=(r[1]||"")+(r[2]||""),o=r[3]||"",n=a.exec(o);return[t,n[1],n[2],n[3]]}function p(e){var r=u.exec(e),t=r[1]||"",o=!!t&&":"!==t[1];return{device:t,isUnc:o,isAbsolute:o||!!r[2],tail:r[3]}}function f(e){return"\\\\"+e.replace(/^[\\\/]+/,"").replace(/[\\\/]+/g,"\\")}l.resolve=function(){for(var e="",r="",t=!1,o=arguments.length-1;o>=-1;o--){var s;if(o>=0?s=arguments[o]:e?(s=process.env["="+e])&&s.substr(0,3).toLowerCase()===e.toLowerCase()+"\\"||(s=e+"\\"):s=process.cwd(),!n.isString(s))throw new TypeError("Arguments to path.resolve must be strings");if(s){var u=p(s),a=u.device,l=u.isUnc,c=u.isAbsolute,h=u.tail;if((!a||!e||a.toLowerCase()===e.toLowerCase())&&(e||(e=a),t||(r=h+"\\"+r,t=c),e&&t))break}}return l&&(e=f(e)),e+(t?"\\":"")+(r=i(r.split(/[\\\/]+/),!t).join("\\"))||"."},l.normalize=function(e){var r=p(e),t=r.device,o=r.isUnc,n=r.isAbsolute,s=r.tail,u=/[\\\/]$/.test(s);return(s=i(s.split(/[\\\/]+/),!n).join("\\"))||n||(s="."),s&&u&&(s+="\\"),o&&(t=f(t)),t+(n?"\\":"")+s},l.isAbsolute=function(e){return p(e).isAbsolute},l.join=function(){for(var e=[],r=0;r<arguments.length;r++){var t=arguments[r];if(!n.isString(t))throw new TypeError("Arguments to path.join must be strings");t&&e.push(t)}var o=e.join("\\");return/^[\\\/]{2}[^\\\/]/.test(e[0])||(o=o.replace(/^[\\\/]{2,}/,"\\")),l.normalize(o)},l.relative=function(e,r){e=l.resolve(e),r=l.resolve(r);for(var t=e.toLowerCase(),o=r.toLowerCase(),n=s(r.split("\\")),i=s(t.split("\\")),u=s(o.split("\\")),a=Math.min(i.length,u.length),c=a,p=0;p<a;p++)if(i[p]!==u[p]){c=p;break}if(0==c)return r;var f=[];for(p=c;p<i.length;p++)f.push("..");return(f=f.concat(n.slice(c))).join("\\")},l._makeLong=function(e){if(!n.isString(e))return e;if(!e)return"";var r=l.resolve(e);return/^[a-zA-Z]\:\\/.test(r)?"\\\\?\\"+r:/^\\\\[^?.]/.test(r)?"\\\\?\\UNC\\"+r.substring(2):e},l.dirname=function(e){var r=c(e),t=r[0],o=r[1];return t||o?(o&&(o=o.substr(0,o.length-1)),t+o):"."},l.basename=function(e,r){var t=c(e)[2];return r&&t.substr(-1*r.length)===r&&(t=t.substr(0,t.length-r.length)),t},l.extname=function(e){return c(e)[3]},l.format=function(e){if(!n.isObject(e))throw new TypeError("Parameter 'pathObject' must be an object, not "+typeof e);var r=e.root||"";if(!n.isString(r))throw new TypeError("'pathObject.root' must be a string or undefined, not "+typeof e.root);var t=e.dir,o=e.base||"";return t?t[t.length-1]===l.sep?t+o:t+l.sep+o:o},l.parse=function(e){if(!n.isString(e))throw new TypeError("Parameter 'pathString' must be a string, not "+typeof e);var r=c(e);if(!r||4!==r.length)throw new TypeError("Invalid path '"+e+"'");return{root:r[0],dir:r[0]+r[1].slice(0,-1),base:r[2],ext:r[3],name:r[2].slice(0,r[2].length-r[3].length)}},l.sep="\\",l.delimiter=";";var h=/^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/,d={};function w(e){return h.exec(e).slice(1)}d.resolve=function(){for(var e="",r=!1,t=arguments.length-1;t>=-1&&!r;t--){var o=t>=0?arguments[t]:process.cwd();if(!n.isString(o))throw new TypeError("Arguments to path.resolve must be strings");o&&(e=o+"/"+e,r="/"===o[0])}return(r?"/":"")+(e=i(e.split("/"),!r).join("/"))||"."},d.normalize=function(e){var r=d.isAbsolute(e),t=e&&"/"===e[e.length-1];return(e=i(e.split("/"),!r).join("/"))||r||(e="."),e&&t&&(e+="/"),(r?"/":"")+e},d.isAbsolute=function(e){return"/"===e.charAt(0)},d.join=function(){for(var e="",r=0;r<arguments.length;r++){var t=arguments[r];if(!n.isString(t))throw new TypeError("Arguments to path.join must be strings");t&&(e+=e?"/"+t:t)}return d.normalize(e)},d.relative=function(e,r){e=d.resolve(e).substr(1),r=d.resolve(r).substr(1);for(var t=s(e.split("/")),o=s(r.split("/")),n=Math.min(t.length,o.length),i=n,u=0;u<n;u++)if(t[u]!==o[u]){i=u;break}var a=[];for(u=i;u<t.length;u++)a.push("..");return(a=a.concat(o.slice(i))).join("/")},d._makeLong=function(e){return e},d.dirname=function(e){var r=w(e),t=r[0],o=r[1];return t||o?(o&&(o=o.substr(0,o.length-1)),t+o):"."},d.basename=function(e,r){var t=w(e)[2];return r&&t.substr(-1*r.length)===r&&(t=t.substr(0,t.length-r.length)),t},d.extname=function(e){return w(e)[3]},d.format=function(e){if(!n.isObject(e))throw new TypeError("Parameter 'pathObject' must be an object, not "+typeof e);var r=e.root||"";if(!n.isString(r))throw new TypeError("'pathObject.root' must be a string or undefined, not "+typeof e.root);return(e.dir?e.dir+d.sep:"")+(e.base||"")},d.parse=function(e){if(!n.isString(e))throw new TypeError("Parameter 'pathString' must be a string, not "+typeof e);var r=w(e);if(!r||4!==r.length)throw new TypeError("Invalid path '"+e+"'");return r[1]=r[1]||"",r[2]=r[2]||"",r[3]=r[3]||"",{root:r[0],dir:r[0]+r[1].slice(0,-1),base:r[2],ext:r[3],name:r[2].slice(0,r[2].length-r[3].length)}},d.sep="/",d.delimiter=":",e.exports=o?l:d,e.exports.posix=d,e.exports.win32=l},944:(e,r,t)=>{"use strict";t.d(r,{B:()=>n});class o{percentiles;average;constructor(e,r){this.percentiles=e,this.average=r}}class n{pool;benchParamsGenerator;iterations=1e3;valuablePercentiles=[0,50,95,99,99.9];resolveWorkersPoolFreed=()=>{};constructor(e,r){this.pool=e,this.benchParamsGenerator=r}async startBench(){console.log(this.benchParamsGenerator.count());for(let e of this.benchParamsGenerator.generate())this.run(e).then((r=>{console.log(`[${this.paramsToLogData(e).join(",")}]; {[${r.percentiles.join(",")}], ${r.average}}`)})),await this.promiseWorkersPoolToFree()}async run(e){let r=[];for(let t=0;t<this.iterations;t++)r.push(new Promise((r=>{this.pool.exec("solveTetris",[e]).then((e=>{this.checkWorkersPoolIfFree(),r(e)}))})));const t=await Promise.all(r);t.sort(((e,r)=>r-e));let n=[];this.valuablePercentiles.forEach((e=>{n.push(t[Math.floor(this.iterations/100*e)])}));const i=t.reduce(((e,r)=>e+r),0)/t.length;return new o(n,i)}async promiseWorkersPoolToFree(){this.pool.stats().pendingTasks<this.iterations||await new Promise((e=>{this.resolveWorkersPoolFreed=e}))}checkWorkersPoolIfFree(){this.pool.stats().pendingTasks<this.iterations&&this.resolveWorkersPoolFreed(!0)}paramsToLogData(e){return[e.fillableCellsCalculatorParams.minimumValuableHeight,e.fillableCellsCalculatorParams.powMultiplier,e.fillableCellsCalculatorParams.multiplier,e.filledHeightCalculatorParams.powMultiplier,e.filledHeightCalculatorParams.multiplier,e.holesV1CalculatorParams.countDecreaseMultiplier,e.holesV1CalculatorParams.countIncreaseMultiplier,e.holesV1CalculatorParams.coveredHeightPowMultiplier,e.holesV1CalculatorParams.coveredHeightMultiplier,e.squashedRowsCalculatorParams.multiplier,e.tunnelsCalculatorParams.minimumValuableHeight,e.tunnelsCalculatorParams.countMultiplier,e.tunnelsCalculatorParams.heightPowMultiplier,e.tunnelsCalculatorParams.heightMultiplier]}}},726:(e,r,t)=>{"use strict";t.d(r,{N:()=>l});class o{fillableCellsCalculatorParams;filledHeightCalculatorParams;holesV1CalculatorParams;squashedRowsCalculatorParams;tunnelsCalculatorParams;constructor(e,r,t,o,n){this.fillableCellsCalculatorParams=e,this.filledHeightCalculatorParams=r,this.holesV1CalculatorParams=t,this.squashedRowsCalculatorParams=o,this.tunnelsCalculatorParams=n}}class n{minimumValuableHeight;powMultiplier;multiplier;constructor(e,r,t){this.minimumValuableHeight=e,this.powMultiplier=r,this.multiplier=t}}class i{powMultiplier;multiplier;constructor(e,r){this.powMultiplier=e,this.multiplier=r}}class s{countDecreaseMultiplier;countIncreaseMultiplier;coveredHeightPowMultiplier;coveredHeightMultiplier;constructor(e,r,t,o){this.countDecreaseMultiplier=e,this.countIncreaseMultiplier=r,this.coveredHeightPowMultiplier=t,this.coveredHeightMultiplier=o}}class u{multiplier;constructor(e){this.multiplier=e}}class a{minimumValuableHeight;countMultiplier;heightPowMultiplier;heightMultiplier;constructor(e,r,t,o){this.minimumValuableHeight=e,this.countMultiplier=r,this.heightPowMultiplier=t,this.heightMultiplier=o}}class l{fillableCellsMinimumValuableHeight=[5,3,7];fillableCellsPowMultiplier=[0,1];fillableCellsMultiplier=[2,1,3];filledHeightPowMultiplier=[0,1];filledHeightMultiplier=[3,1,5];holesV1CountDecreaseMultiplier=[150,130,170];holesV1CountIncreaseMultiplier=[70,60,80];holesV1CoveredHeightPowMultiplier=[0,1];holesV1CoveredHeightMultiplier=[5,3,7];squashedRowsMultiplier=[10,5,15];tunnelsMinimumValuableHeight=[3,2,4];tunnelsCountMultiplier=[70,40,90];tunnelsHeightPowMultiplier=[1,0];tunnelsHeightMultiplier=[7,5,10];*generate(){for(let e of this.squashedRowsMultiplier)for(let r of this.tunnelsHeightPowMultiplier)for(let t of this.holesV1CoveredHeightPowMultiplier)for(let l of this.fillableCellsPowMultiplier)for(let c of this.filledHeightPowMultiplier)for(let p of this.tunnelsMinimumValuableHeight)for(let f of this.tunnelsCountMultiplier)for(let h of this.tunnelsHeightMultiplier)for(let d of this.filledHeightMultiplier)for(let w of this.holesV1CoveredHeightMultiplier)for(let m of this.holesV1CountDecreaseMultiplier)for(let k of this.holesV1CountIncreaseMultiplier)for(let g of this.fillableCellsMinimumValuableHeight)for(let b of this.fillableCellsMultiplier)yield new o(new n(g,l,b),new i(c,d),new s(m,k,t,w),new u(e),new a(p,f,r,h))}count(){return this.fillableCellsMinimumValuableHeight.length*this.fillableCellsPowMultiplier.length*this.fillableCellsMultiplier.length*this.filledHeightPowMultiplier.length*this.filledHeightMultiplier.length*this.holesV1CountDecreaseMultiplier.length*this.holesV1CountIncreaseMultiplier.length*this.holesV1CoveredHeightPowMultiplier.length*this.holesV1CoveredHeightMultiplier.length*this.squashedRowsMultiplier.length*this.tunnelsMinimumValuableHeight.length*this.tunnelsCountMultiplier.length*this.tunnelsHeightPowMultiplier.length*this.tunnelsHeightMultiplier.length}}},303:(e,r,t)=>{"use strict";t.a(e,(async(e,r)=>{try{var o=t(340),n=t(944),i=t(726),s=t(520);const e=(0,o.pool)(s.resolve("./dist/tetris_solving_worker.js"),{maxWorkers:120}),u=new n.B(e,new i.N);await u.startBench(),r()}catch(e){r(e)}}),1)},384:e=>{e.exports=function(e){return e&&"object"==typeof e&&"function"==typeof e.copy&&"function"==typeof e.fill&&"function"==typeof e.readUInt8}},539:(e,r,t)=>{var o=/%[sdj%]/g;r.format=function(e){if(!m(e)){for(var r=[],t=0;t<arguments.length;t++)r.push(s(arguments[t]));return r.join(" ")}t=1;for(var n=arguments,i=n.length,u=String(e).replace(o,(function(e){if("%%"===e)return"%";if(t>=i)return e;switch(e){case"%s":return String(n[t++]);case"%d":return Number(n[t++]);case"%j":try{return JSON.stringify(n[t++])}catch(e){return"[Circular]"}default:return e}})),a=n[t];t<i;a=n[++t])d(a)||!b(a)?u+=" "+a:u+=" "+s(a);return u},r.deprecate=function(e,o){if(k(t.g.process))return function(){return r.deprecate(e,o).apply(this,arguments)};if(!0===process.noDeprecation)return e;var n=!1;return function(){if(!n){if(process.throwDeprecation)throw new Error(o);process.traceDeprecation?console.trace(o):console.error(o),n=!0}return e.apply(this,arguments)}};var n,i={};function s(e,t){var o={seen:[],stylize:a};return arguments.length>=3&&(o.depth=arguments[2]),arguments.length>=4&&(o.colors=arguments[3]),h(t)?o.showHidden=t:t&&r._extend(o,t),k(o.showHidden)&&(o.showHidden=!1),k(o.depth)&&(o.depth=2),k(o.colors)&&(o.colors=!1),k(o.customInspect)&&(o.customInspect=!0),o.colors&&(o.stylize=u),l(o,e,o.depth)}function u(e,r){var t=s.styles[r];return t?"["+s.colors[t][0]+"m"+e+"["+s.colors[t][1]+"m":e}function a(e,r){return e}function l(e,t,o){if(e.customInspect&&t&&v(t.inspect)&&t.inspect!==r.inspect&&(!t.constructor||t.constructor.prototype!==t)){var n=t.inspect(o,e);return m(n)||(n=l(e,n,o)),n}var i=function(e,r){if(k(r))return e.stylize("undefined","undefined");if(m(r)){var t="'"+JSON.stringify(r).replace(/^"|"$/g,"").replace(/'/g,"\\'").replace(/\\"/g,'"')+"'";return e.stylize(t,"string")}return w(r)?e.stylize(""+r,"number"):h(r)?e.stylize(""+r,"boolean"):d(r)?e.stylize("null","null"):void 0}(e,t);if(i)return i;var s=Object.keys(t),u=function(e){var r={};return e.forEach((function(e,t){r[e]=!0})),r}(s);if(e.showHidden&&(s=Object.getOwnPropertyNames(t)),_(t)&&(s.indexOf("message")>=0||s.indexOf("description")>=0))return c(t);if(0===s.length){if(v(t)){var a=t.name?": "+t.name:"";return e.stylize("[Function"+a+"]","special")}if(g(t))return e.stylize(RegExp.prototype.toString.call(t),"regexp");if(y(t))return e.stylize(Date.prototype.toString.call(t),"date");if(_(t))return c(t)}var b,x="",O=!1,P=["{","}"];return f(t)&&(O=!0,P=["[","]"]),v(t)&&(x=" [Function"+(t.name?": "+t.name:"")+"]"),g(t)&&(x=" "+RegExp.prototype.toString.call(t)),y(t)&&(x=" "+Date.prototype.toUTCString.call(t)),_(t)&&(x=" "+c(t)),0!==s.length||O&&0!=t.length?o<0?g(t)?e.stylize(RegExp.prototype.toString.call(t),"regexp"):e.stylize("[Object]","special"):(e.seen.push(t),b=O?function(e,r,t,o,n){for(var i=[],s=0,u=r.length;s<u;++s)M(r,String(s))?i.push(p(e,r,t,o,String(s),!0)):i.push("");return n.forEach((function(n){n.match(/^\d+$/)||i.push(p(e,r,t,o,n,!0))})),i}(e,t,o,u,s):s.map((function(r){return p(e,t,o,u,r,O)})),e.seen.pop(),function(e,r,t){return e.reduce((function(e,r){return r.indexOf("\n"),e+r.replace(/\u001b\[\d\d?m/g,"").length+1}),0)>60?t[0]+(""===r?"":r+"\n ")+" "+e.join(",\n  ")+" "+t[1]:t[0]+r+" "+e.join(", ")+" "+t[1]}(b,x,P)):P[0]+x+P[1]}function c(e){return"["+Error.prototype.toString.call(e)+"]"}function p(e,r,t,o,n,i){var s,u,a;if((a=Object.getOwnPropertyDescriptor(r,n)||{value:r[n]}).get?u=a.set?e.stylize("[Getter/Setter]","special"):e.stylize("[Getter]","special"):a.set&&(u=e.stylize("[Setter]","special")),M(o,n)||(s="["+n+"]"),u||(e.seen.indexOf(a.value)<0?(u=d(t)?l(e,a.value,null):l(e,a.value,t-1)).indexOf("\n")>-1&&(u=i?u.split("\n").map((function(e){return"  "+e})).join("\n").substr(2):"\n"+u.split("\n").map((function(e){return"   "+e})).join("\n")):u=e.stylize("[Circular]","special")),k(s)){if(i&&n.match(/^\d+$/))return u;(s=JSON.stringify(""+n)).match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)?(s=s.substr(1,s.length-2),s=e.stylize(s,"name")):(s=s.replace(/'/g,"\\'").replace(/\\"/g,'"').replace(/(^"|"$)/g,"'"),s=e.stylize(s,"string"))}return s+": "+u}function f(e){return Array.isArray(e)}function h(e){return"boolean"==typeof e}function d(e){return null===e}function w(e){return"number"==typeof e}function m(e){return"string"==typeof e}function k(e){return void 0===e}function g(e){return b(e)&&"[object RegExp]"===x(e)}function b(e){return"object"==typeof e&&null!==e}function y(e){return b(e)&&"[object Date]"===x(e)}function _(e){return b(e)&&("[object Error]"===x(e)||e instanceof Error)}function v(e){return"function"==typeof e}function x(e){return Object.prototype.toString.call(e)}function O(e){return e<10?"0"+e.toString(10):e.toString(10)}r.debuglog=function(e){if(k(n)&&(n=process.env.NODE_DEBUG||""),e=e.toUpperCase(),!i[e])if(new RegExp("\\b"+e+"\\b","i").test(n)){var t=process.pid;i[e]=function(){var o=r.format.apply(r,arguments);console.error("%s %d: %s",e,t,o)}}else i[e]=function(){};return i[e]},r.inspect=s,s.colors={bold:[1,22],italic:[3,23],underline:[4,24],inverse:[7,27],white:[37,39],grey:[90,39],black:[30,39],blue:[34,39],cyan:[36,39],green:[32,39],magenta:[35,39],red:[31,39],yellow:[33,39]},s.styles={special:"cyan",number:"yellow",boolean:"yellow",undefined:"grey",null:"bold",string:"green",date:"magenta",regexp:"red"},r.isArray=f,r.isBoolean=h,r.isNull=d,r.isNullOrUndefined=function(e){return null==e},r.isNumber=w,r.isString=m,r.isSymbol=function(e){return"symbol"==typeof e},r.isUndefined=k,r.isRegExp=g,r.isObject=b,r.isDate=y,r.isError=_,r.isFunction=v,r.isPrimitive=function(e){return null===e||"boolean"==typeof e||"number"==typeof e||"string"==typeof e||"symbol"==typeof e||void 0===e},r.isBuffer=t(384);var P=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"];function E(){var e=new Date,r=[O(e.getHours()),O(e.getMinutes()),O(e.getSeconds())].join(":");return[e.getDate(),P[e.getMonth()],r].join(" ")}function M(e,r){return Object.prototype.hasOwnProperty.call(e,r)}r.log=function(){console.log("%s - %s",E(),r.format.apply(r,arguments))},r.inherits=t(717),r._extend=function(e,r){if(!r||!b(r))return e;for(var t=Object.keys(r),o=t.length;o--;)e[t[o]]=r[t[o]];return e}},340:function(module){var __dirname="/",factory;"undefined"!=typeof self&&self,factory=function(){return function(){var __webpack_modules__={345:function(e,r,t){var o=t(219),n=t(751),i=t(828),s=new(t(833));function u(e,r){"string"==typeof e?this.script=e||null:(this.script=null,r=e),this.workers=[],this.tasks=[],r=r||{},this.forkArgs=Object.freeze(r.forkArgs||[]),this.forkOpts=Object.freeze(r.forkOpts||{}),this.workerThreadOpts=Object.freeze(r.workerThreadOpts||{}),this.debugPortStart=r.debugPortStart||43210,this.nodeWorker=r.nodeWorker,this.workerType=r.workerType||r.nodeWorker||"auto",this.maxQueueSize=r.maxQueueSize||1/0,this.onCreateWorker=r.onCreateWorker||function(){return null},this.onTerminateWorker=r.onTerminateWorker||function(){return null},r&&"maxWorkers"in r?(function(e){if(!a(e)||!l(e)||e<1)throw new TypeError("Option maxWorkers must be an integer number >= 1")}(r.maxWorkers),this.maxWorkers=r.maxWorkers):this.maxWorkers=Math.max((i.cpus||4)-1,1),r&&"minWorkers"in r&&("max"===r.minWorkers?this.minWorkers=this.maxWorkers:(function(e){if(!a(e)||!l(e)||e<0)throw new TypeError("Option minWorkers must be an integer number >= 0")}(r.minWorkers),this.minWorkers=r.minWorkers,this.maxWorkers=Math.max(this.minWorkers,this.maxWorkers)),this._ensureMinWorkers()),this._boundNext=this._next.bind(this),"thread"===this.workerType&&n.ensureWorkerThreads()}function a(e){return"number"==typeof e}function l(e){return Math.round(e)==e}u.prototype.exec=function(e,r,t){if(r&&!Array.isArray(r))throw new TypeError('Array expected as argument "params"');if("string"==typeof e){var n=o.defer();if(this.tasks.length>=this.maxQueueSize)throw new Error("Max queue size of "+this.maxQueueSize+" reached");var i=this.tasks,s={method:e,params:r,resolver:n,timeout:null,options:t};i.push(s);var u=n.promise.timeout;return n.promise.timeout=function(e){return-1!==i.indexOf(s)?(s.timeout=e,n.promise):u.call(n.promise,e)},this._next(),n.promise}if("function"==typeof e)return this.exec("run",[String(e),r]);throw new TypeError('Function or string expected as argument "method"')},u.prototype.proxy=function(){if(arguments.length>0)throw new Error("No arguments expected");var e=this;return this.exec("methods").then((function(r){var t={};return r.forEach((function(r){t[r]=function(){return e.exec(r,Array.prototype.slice.call(arguments))}})),t}))},u.prototype._next=function(){if(this.tasks.length>0){var e=this._getWorker();if(e){var r=this,t=this.tasks.shift();if(t.resolver.promise.pending){var o=e.exec(t.method,t.params,t.resolver,t.options).then(r._boundNext).catch((function(){if(e.terminated)return r._removeWorker(e)})).then((function(){r._next()}));"number"==typeof t.timeout&&o.timeout(t.timeout)}else r._next()}}},u.prototype._getWorker=function(){for(var e=this.workers,r=0;r<e.length;r++){var t=e[r];if(!1===t.busy())return t}return e.length<this.maxWorkers?(t=this._createWorkerHandler(),e.push(t),t):null},u.prototype._removeWorker=function(e){var r=this;return s.releasePort(e.debugPort),this._removeWorkerFromList(e),this._ensureMinWorkers(),new o((function(t,o){e.terminate(!1,(function(n){r.onTerminateWorker({forkArgs:e.forkArgs,forkOpts:e.forkOpts,script:e.script}),n?o(n):t(e)}))}))},u.prototype._removeWorkerFromList=function(e){var r=this.workers.indexOf(e);-1!==r&&this.workers.splice(r,1)},u.prototype.terminate=function(e,r){var t=this;this.tasks.forEach((function(e){e.resolver.reject(new Error("Pool terminated"))})),this.tasks.length=0;var n=function(e){s.releasePort(e.debugPort),this._removeWorkerFromList(e)}.bind(this),i=[];return this.workers.slice().forEach((function(o){var s=o.terminateAndNotify(e,r).then(n).always((function(){t.onTerminateWorker({forkArgs:o.forkArgs,forkOpts:o.forkOpts,script:o.script})}));i.push(s)})),o.all(i)},u.prototype.stats=function(){var e=this.workers.length,r=this.workers.filter((function(e){return e.busy()})).length;return{totalWorkers:e,busyWorkers:r,idleWorkers:e-r,pendingTasks:this.tasks.length,activeTasks:r}},u.prototype._ensureMinWorkers=function(){if(this.minWorkers)for(var e=this.workers.length;e<this.minWorkers;e++)this.workers.push(this._createWorkerHandler())},u.prototype._createWorkerHandler=function(){var e=this.onCreateWorker({forkArgs:this.forkArgs,forkOpts:this.forkOpts,workerThreadOpts:this.workerThreadOpts,script:this.script})||{};return new n(e.script||this.script,{forkArgs:e.forkArgs||this.forkArgs,forkOpts:e.forkOpts||this.forkOpts,workerThreadOpts:e.workerThreadOpts||this.workerThreadOpts,debugPort:s.nextAvailableStartingAt(this.debugPortStart),workerType:this.workerType})},e.exports=u},219:function(e){"use strict";function r(e,i){var s=this;if(!(this instanceof r))throw new SyntaxError("Constructor must be called with the new operator");if("function"!=typeof e)throw new SyntaxError("Function parameter handler(resolve, reject) missing");var u=[],a=[];this.resolved=!1,this.rejected=!1,this.pending=!0;var l=function(e,r){u.push(e),a.push(r)};this.then=function(e,o){return new r((function(r,n){var i=e?t(e,r,n):r,s=o?t(o,r,n):n;l(i,s)}),s)};var c=function(e){return s.resolved=!0,s.rejected=!1,s.pending=!1,u.forEach((function(r){r(e)})),l=function(r,t){r(e)},c=p=function(){},s},p=function(e){return s.resolved=!1,s.rejected=!0,s.pending=!1,a.forEach((function(r){r(e)})),l=function(r,t){t(e)},c=p=function(){},s};this.cancel=function(){return i?i.cancel():p(new o),s},this.timeout=function(e){if(i)i.timeout(e);else{var r=setTimeout((function(){p(new n("Promise timed out after "+e+" ms"))}),e);s.always((function(){clearTimeout(r)}))}return s},e((function(e){c(e)}),(function(e){p(e)}))}function t(e,r,t){return function(o){try{var n=e(o);n&&"function"==typeof n.then&&"function"==typeof n.catch?n.then(r,t):r(n)}catch(e){t(e)}}}function o(e){this.message=e||"promise cancelled",this.stack=(new Error).stack}function n(e){this.message=e||"timeout exceeded",this.stack=(new Error).stack}r.prototype.catch=function(e){return this.then(null,e)},r.prototype.always=function(e){return this.then(e,e)},r.all=function(e){return new r((function(r,t){var o=e.length,n=[];o?e.forEach((function(e,i){e.then((function(e){n[i]=e,0==--o&&r(n)}),(function(e){o=0,t(e)}))})):r(n)}))},r.defer=function(){var e={};return e.promise=new r((function(r,t){e.resolve=r,e.reject=t})),e},o.prototype=new Error,o.prototype.constructor=Error,o.prototype.name="CancellationError",r.CancellationError=o,n.prototype=new Error,n.prototype.constructor=Error,n.prototype.name="TimeoutError",r.TimeoutError=n,e.exports=r},751:function(e,r,t){"use strict";function o(e,r){(null==r||r>e.length)&&(r=e.length);for(var t=0,o=new Array(r);t<r;t++)o[t]=e[t];return o}function n(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);r&&(o=o.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,o)}return t}function i(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function s(e){return s="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},s(e)}var u=t(219),a=t(828),l=t(397),c="__workerpool-terminate__";function p(){var e=h();if(!e)throw new Error("WorkerPool: workerType = 'thread' is not supported, Node >= 11.7.0 required");return e}function f(){if("function"!=typeof Worker&&("object"!==("undefined"==typeof Worker?"undefined":s(Worker))||"function"!=typeof Worker.prototype.constructor))throw new Error("WorkerPool: Web Workers not supported")}function h(){try{return l("worker_threads")}catch(e){if("object"===s(e)&&null!==e&&"MODULE_NOT_FOUND"===e.code)return null;throw e}}function d(e,r){var t=new r(e);return t.isBrowserWorker=!0,t.on=function(e,r){this.addEventListener(e,(function(e){r(e.data)}))},t.send=function(e){this.postMessage(e)},t}function w(e,r,t){var o=new r.Worker(e,function(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?n(Object(t),!0).forEach((function(r){i(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):n(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}({stdout:!1,stderr:!1},t));return o.isWorkerThread=!0,o.send=function(e){this.postMessage(e)},o.kill=function(){return this.terminate(),!0},o.disconnect=function(){this.terminate()},o}function m(e,r,t){var o=t.fork(e,r.forkArgs,r.forkOpts);return o.isChildProcess=!0,o}function k(e){e=e||{};var r=process.execArgv.join(" "),t=-1!==r.indexOf("--inspect"),o=-1!==r.indexOf("--debug-brk"),n=[];return t&&(n.push("--inspect="+e.debugPort),o&&n.push("--debug-brk")),process.execArgv.forEach((function(e){e.indexOf("--max-old-space-size")>-1&&n.push(e)})),Object.assign({},e,{forkArgs:e.forkArgs,forkOpts:Object.assign({},e.forkOpts,{execArgv:(e.forkOpts&&e.forkOpts.execArgv||[]).concat(n)})})}function g(e,r){var n=this,i=r||{};function s(e){for(var r in n.terminated=!0,n.processing)void 0!==n.processing[r]&&n.processing[r].resolver.reject(e);n.processing=Object.create(null)}this.script=e||function(){if("browser"===a.platform){if("undefined"==typeof Blob)throw new Error("Blob not supported by the browser");if(!window.URL||"function"!=typeof window.URL.createObjectURL)throw new Error("URL.createObjectURL not supported by the browser");var e=new Blob([t(670)],{type:"text/javascript"});return window.URL.createObjectURL(e)}return __dirname+"/worker.js"}(),this.worker=function(e,r){if("web"===r.workerType)return f(),d(e,Worker);if("thread"===r.workerType)return w(e,t=p(),r.workerThreadOpts);if("process"!==r.workerType&&r.workerType){if("browser"===a.platform)return f(),d(e,Worker);var t=h();return t?w(e,t):m(e,k(r),l("child_process"))}return m(e,k(r),l("child_process"))}(this.script,i),this.debugPort=i.debugPort,this.forkOpts=i.forkOpts,this.forkArgs=i.forkArgs,this.workerThreadOpts=i.workerThreadOpts,e||(this.worker.ready=!0),this.requestQueue=[],this.worker.on("message",(function(e){if(!n.terminated)if("string"==typeof e&&"ready"===e)n.worker.ready=!0,function(){var e,r=function(e,r){var t="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!t){if(Array.isArray(e)||(t=function(e,r){if(e){if("string"==typeof e)return o(e,r);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?o(e,r):void 0}}(e))||r&&e&&"number"==typeof e.length){t&&(e=t);var n=0,i=function(){};return{s:i,n:function(){return n>=e.length?{done:!0}:{done:!1,value:e[n++]}},e:function(e){throw e},f:i}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var s,u=!0,a=!1;return{s:function(){t=t.call(e)},n:function(){var e=t.next();return u=e.done,e},e:function(e){a=!0,s=e},f:function(){try{u||null==t.return||t.return()}finally{if(a)throw s}}}}(n.requestQueue.splice(0));try{for(r.s();!(e=r.n()).done;){var t=e.value;n.worker.send(t)}}catch(e){r.e(e)}finally{r.f()}}();else{var r=e.id,t=n.processing[r];void 0!==t&&(e.isEvent?t.options&&"function"==typeof t.options.on&&t.options.on(e.payload):(delete n.processing[r],!0===n.terminating&&n.terminate(),e.error?t.resolver.reject(function(e){for(var r=new Error(""),t=Object.keys(e),o=0;o<t.length;o++)r[t[o]]=e[t[o]];return r}(e.error)):t.resolver.resolve(e.result)))}}));var u=this.worker;this.worker.on("error",s),this.worker.on("exit",(function(e,r){var t="Workerpool Worker terminated Unexpectedly\n";t+="    exitCode: `"+e+"`\n",t+="    signalCode: `"+r+"`\n",t+="    workerpool.script: `"+n.script+"`\n",t+="    spawnArgs: `"+u.spawnargs+"`\n",t+="    spawnfile: `"+u.spawnfile+"`\n",t+="    stdout: `"+u.stdout+"`\n",t+="    stderr: `"+u.stderr+"`\n",s(new Error(t))})),this.processing=Object.create(null),this.terminating=!1,this.terminated=!1,this.terminationHandler=null,this.lastId=0}g.prototype.methods=function(){return this.exec("methods")},g.prototype.exec=function(e,r,t,o){t||(t=u.defer());var n=++this.lastId;this.processing[n]={id:n,resolver:t,options:o};var i={id:n,method:e,params:r};this.terminated?t.reject(new Error("Worker is terminated")):this.worker.ready?this.worker.send(i):this.requestQueue.push(i);var s=this;return t.promise.catch((function(e){if(e instanceof u.CancellationError||e instanceof u.TimeoutError)return delete s.processing[n],s.terminateAndNotify(!0).then((function(){throw e}),(function(e){throw e}));throw e}))},g.prototype.busy=function(){return Object.keys(this.processing).length>0},g.prototype.terminate=function(e,r){var t=this;if(e){for(var o in this.processing)void 0!==this.processing[o]&&this.processing[o].resolver.reject(new Error("Worker terminated"));this.processing=Object.create(null)}if("function"==typeof r&&(this.terminationHandler=r),this.busy())this.terminating=!0;else{var n=function(e){if(t.terminated=!0,null!=t.worker&&t.worker.removeAllListeners&&t.worker.removeAllListeners("message"),t.worker=null,t.terminating=!1,t.terminationHandler)t.terminationHandler(e,t);else if(e)throw e};if(this.worker){if("function"==typeof this.worker.kill){if(this.worker.killed)return void n(new Error("worker already killed!"));if(this.worker.isChildProcess){var i=setTimeout((function(){t.worker&&t.worker.kill()}),1e3);this.worker.once("exit",(function(){clearTimeout(i),t.worker&&(t.worker.killed=!0),n()})),this.worker.ready?this.worker.send(c):this.requestQueue.push(c)}else this.worker.kill(),this.worker.killed=!0,n();return}if("function"!=typeof this.worker.terminate)throw new Error("Failed to terminate worker");this.worker.terminate(),this.worker.killed=!0}n()}},g.prototype.terminateAndNotify=function(e,r){var t=u.defer();return r&&(t.promise.timeout=r),this.terminate(e,(function(e,r){e?t.reject(e):t.resolve(r)})),t.promise},e.exports=g,e.exports._tryRequireWorkerThreads=h,e.exports._setupProcessWorker=m,e.exports._setupBrowserWorker=d,e.exports._setupWorkerThreadWorker=w,e.exports.ensureWorkerThreads=p},833:function(e){"use strict";function r(){this.ports=Object.create(null),this.length=0}e.exports=r,r.prototype.nextAvailableStartingAt=function(e){for(;!0===this.ports[e];)e++;if(e>=65535)throw new Error("WorkerPool debug port limit reached: "+e+">= 65535");return this.ports[e]=!0,this.length++,e},r.prototype.releasePort=function(e){delete this.ports[e],this.length--}},828:function(e,r,t){var o=t(397),n=function(e){return void 0!==e&&null!=e.versions&&null!=e.versions.node};e.exports.isNode=n,e.exports.platform="undefined"!=typeof process&&n(process)?"node":"browser";var i=function(e){try{return o("worker_threads")}catch(e){return null}}();e.exports.isMainThread="node"===e.exports.platform?(!i||i.isMainThread)&&!process.connected:"undefined"!=typeof Window,e.exports.cpus="browser"===e.exports.platform?self.navigator.hardwareConcurrency:o("os").cpus().length},670:function(e){e.exports='!function(){var __webpack_exports__={};!function(){var exports=__webpack_exports__,__webpack_unused_export__;function _typeof(r){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(r){return typeof r}:function(r){return r&&"function"==typeof Symbol&&r.constructor===Symbol&&r!==Symbol.prototype?"symbol":typeof r})(r)}var requireFoolWebpack=eval("typeof require !== \'undefined\' ? require : function (module) { throw new Error(\'Module \\" + module + \\" not found.\') }"),TERMINATE_METHOD_ID="__workerpool-terminate__",worker={exit:function(){}},WorkerThreads,parentPort;if("undefined"!=typeof self&&"function"==typeof postMessage&&"function"==typeof addEventListener)worker.on=function(r,e){addEventListener(r,function(r){e(r.data)})},worker.send=function(r){postMessage(r)};else{if("undefined"==typeof process)throw new Error("Script must be executed as a worker");try{WorkerThreads=requireFoolWebpack("worker_threads")}catch(error){if("object"!==_typeof(error)||null===error||"MODULE_NOT_FOUND"!==error.code)throw error}WorkerThreads&&null!==WorkerThreads.parentPort?(parentPort=WorkerThreads.parentPort,worker.send=parentPort.postMessage.bind(parentPort),worker.on=parentPort.on.bind(parentPort)):(worker.on=process.on.bind(process),worker.send=process.send.bind(process),worker.on("disconnect",function(){process.exit(1)}),worker.exit=process.exit.bind(process))}function convertError(o){return Object.getOwnPropertyNames(o).reduce(function(r,e){return Object.defineProperty(r,e,{value:o[e],enumerable:!0})},{})}function isPromise(r){return r&&"function"==typeof r.then&&"function"==typeof r.catch}worker.methods={},worker.methods.run=function(r,e){r=new Function("return ("+r+").apply(null, arguments);");return r.apply(r,e)},worker.methods.methods=function(){return Object.keys(worker.methods)};var currentRequestId=null;worker.on("message",function(e){if(e===TERMINATE_METHOD_ID)return worker.exit(0);try{var r=worker.methods[e.method];if(!r)throw new Error(\'Unknown method "\'+e.method+\'"\');currentRequestId=e.id;var o=r.apply(r,e.params);isPromise(o)?o.then(function(r){worker.send({id:e.id,result:r,error:null}),currentRequestId=null}).catch(function(r){worker.send({id:e.id,result:null,error:convertError(r)}),currentRequestId=null}):(worker.send({id:e.id,result:o,error:null}),currentRequestId=null)}catch(r){worker.send({id:e.id,result:null,error:convertError(r)})}}),worker.register=function(r){if(r)for(var e in r)r.hasOwnProperty(e)&&(worker.methods[e]=r[e]);worker.send("ready")},worker.emit=function(r){currentRequestId&&worker.send({id:currentRequestId,isEvent:!0,payload:r})},__webpack_unused_export__=worker.register,worker.emit}()}();'},397:function(module){var requireFoolWebpack=eval("typeof require !== 'undefined' ? require : function (module) { throw new Error('Module \" + module + \" not found.') }");module.exports=requireFoolWebpack},744:function(__unused_webpack_module,exports){function _typeof(e){return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},_typeof(e)}var requireFoolWebpack=eval("typeof require !== 'undefined' ? require : function (module) { throw new Error('Module \" + module + \" not found.') }"),TERMINATE_METHOD_ID="__workerpool-terminate__",worker={exit:function(){}};if("undefined"!=typeof self&&"function"==typeof postMessage&&"function"==typeof addEventListener)worker.on=function(e,r){addEventListener(e,(function(e){r(e.data)}))},worker.send=function(e){postMessage(e)};else{if("undefined"==typeof process)throw new Error("Script must be executed as a worker");var WorkerThreads;try{WorkerThreads=requireFoolWebpack("worker_threads")}catch(e){if("object"!==_typeof(e)||null===e||"MODULE_NOT_FOUND"!==e.code)throw e}if(WorkerThreads&&null!==WorkerThreads.parentPort){var parentPort=WorkerThreads.parentPort;worker.send=parentPort.postMessage.bind(parentPort),worker.on=parentPort.on.bind(parentPort)}else worker.on=process.on.bind(process),worker.send=process.send.bind(process),worker.on("disconnect",(function(){process.exit(1)})),worker.exit=process.exit.bind(process)}function convertError(e){return Object.getOwnPropertyNames(e).reduce((function(r,t){return Object.defineProperty(r,t,{value:e[t],enumerable:!0})}),{})}function isPromise(e){return e&&"function"==typeof e.then&&"function"==typeof e.catch}worker.methods={},worker.methods.run=function(e,r){var t=new Function("return ("+e+").apply(null, arguments);");return t.apply(t,r)},worker.methods.methods=function(){return Object.keys(worker.methods)};var currentRequestId=null;worker.on("message",(function(e){if(e===TERMINATE_METHOD_ID)return worker.exit(0);try{var r=worker.methods[e.method];if(!r)throw new Error('Unknown method "'+e.method+'"');currentRequestId=e.id;var t=r.apply(r,e.params);isPromise(t)?t.then((function(r){worker.send({id:e.id,result:r,error:null}),currentRequestId=null})).catch((function(r){worker.send({id:e.id,result:null,error:convertError(r)}),currentRequestId=null})):(worker.send({id:e.id,result:t,error:null}),currentRequestId=null)}catch(r){worker.send({id:e.id,result:null,error:convertError(r)})}})),worker.register=function(e){if(e)for(var r in e)e.hasOwnProperty(r)&&(worker.methods[r]=e[r]);worker.send("ready")},worker.emit=function(e){currentRequestId&&worker.send({id:currentRequestId,isEvent:!0,payload:e})},exports.add=worker.register,exports.emit=worker.emit}},__webpack_module_cache__={};function __nested_webpack_require_50492__(e){var r=__webpack_module_cache__[e];if(void 0!==r)return r.exports;var t=__webpack_module_cache__[e]={exports:{}};return __webpack_modules__[e](t,t.exports,__nested_webpack_require_50492__),t.exports}var __webpack_exports__={},exports,environment;return exports=__webpack_exports__,environment=__nested_webpack_require_50492__(828),exports.pool=function(e,r){return new(__nested_webpack_require_50492__(345))(e,r)},exports.worker=function(e){__nested_webpack_require_50492__(744).add(e)},exports.workerEmit=function(e){__nested_webpack_require_50492__(744).emit(e)},exports.Promise=__nested_webpack_require_50492__(219),exports.platform=environment.platform,exports.isMainThread=environment.isMainThread,exports.cpus=environment.cpus,__webpack_exports__}()},module.exports=factory()}},__webpack_module_cache__={},webpackQueues,webpackExports,webpackError,resolveQueue;function __webpack_require__(e){var r=__webpack_module_cache__[e];if(void 0!==r)return r.exports;var t=__webpack_module_cache__[e]={exports:{}};return __webpack_modules__[e].call(t.exports,t,t.exports,__webpack_require__),t.exports}webpackQueues="function"==typeof Symbol?Symbol("webpack queues"):"__webpack_queues__",webpackExports="function"==typeof Symbol?Symbol("webpack exports"):"__webpack_exports__",webpackError="function"==typeof Symbol?Symbol("webpack error"):"__webpack_error__",resolveQueue=e=>{e&&!e.d&&(e.d=1,e.forEach((e=>e.r--)),e.forEach((e=>e.r--?e.r++:e())))},__webpack_require__.a=(e,r,t)=>{var o;t&&((o=[]).d=1);var n,i,s,u=new Set,a=e.exports,l=new Promise(((e,r)=>{s=r,i=e}));l[webpackExports]=a,l[webpackQueues]=e=>(o&&e(o),u.forEach(e),l.catch((e=>{}))),e.exports=l,r((e=>{var r;n=(e=>e.map((e=>{if(null!==e&&"object"==typeof e){if(e[webpackQueues])return e;if(e.then){var r=[];r.d=0,e.then((e=>{t[webpackExports]=e,resolveQueue(r)}),(e=>{t[webpackError]=e,resolveQueue(r)}));var t={};return t[webpackQueues]=e=>e(r),t}}var o={};return o[webpackQueues]=e=>{},o[webpackExports]=e,o})))(e);var t=()=>n.map((e=>{if(e[webpackError])throw e[webpackError];return e[webpackExports]})),i=new Promise((e=>{(r=()=>e(t)).r=0;var i=e=>e!==o&&!u.has(e)&&(u.add(e),e&&!e.d&&(r.r++,e.push(r)));n.map((e=>e[webpackQueues](i)))}));return r.r?i:t()}),(e=>(e?s(l[webpackError]=e):i(a),resolveQueue(o)))),o&&(o.d=0)},__webpack_require__.n=e=>{var r=e&&e.__esModule?()=>e.default:()=>e;return __webpack_require__.d(r,{a:r}),r},__webpack_require__.d=(e,r)=>{for(var t in r)__webpack_require__.o(r,t)&&!__webpack_require__.o(e,t)&&Object.defineProperty(e,t,{enumerable:!0,get:r[t]})},__webpack_require__.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),__webpack_require__.o=(e,r)=>Object.prototype.hasOwnProperty.call(e,r);var __webpack_exports__=__webpack_require__(303)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,