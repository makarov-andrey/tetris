/*! For license information please see tetris_solving_worker.js.LICENSE.txt */
(()=>{var __webpack_modules__={340:function(module){var __dirname="/",factory;"undefined"!=typeof self&&self,factory=function(){return function(){var __webpack_modules__={345:function(e,t,r){var n=r(219),s=r(751),o=r(828),i=new(r(833));function a(e,t){"string"==typeof e?this.script=e||null:(this.script=null,t=e),this.workers=[],this.tasks=[],t=t||{},this.forkArgs=Object.freeze(t.forkArgs||[]),this.forkOpts=Object.freeze(t.forkOpts||{}),this.workerThreadOpts=Object.freeze(t.workerThreadOpts||{}),this.debugPortStart=t.debugPortStart||43210,this.nodeWorker=t.nodeWorker,this.workerType=t.workerType||t.nodeWorker||"auto",this.maxQueueSize=t.maxQueueSize||1/0,this.onCreateWorker=t.onCreateWorker||function(){return null},this.onTerminateWorker=t.onTerminateWorker||function(){return null},t&&"maxWorkers"in t?(function(e){if(!u(e)||!c(e)||e<1)throw new TypeError("Option maxWorkers must be an integer number >= 1")}(t.maxWorkers),this.maxWorkers=t.maxWorkers):this.maxWorkers=Math.max((o.cpus||4)-1,1),t&&"minWorkers"in t&&("max"===t.minWorkers?this.minWorkers=this.maxWorkers:(function(e){if(!u(e)||!c(e)||e<0)throw new TypeError("Option minWorkers must be an integer number >= 0")}(t.minWorkers),this.minWorkers=t.minWorkers,this.maxWorkers=Math.max(this.minWorkers,this.maxWorkers)),this._ensureMinWorkers()),this._boundNext=this._next.bind(this),"thread"===this.workerType&&s.ensureWorkerThreads()}function u(e){return"number"==typeof e}function c(e){return Math.round(e)==e}a.prototype.exec=function(e,t,r){if(t&&!Array.isArray(t))throw new TypeError('Array expected as argument "params"');if("string"==typeof e){var s=n.defer();if(this.tasks.length>=this.maxQueueSize)throw new Error("Max queue size of "+this.maxQueueSize+" reached");var o=this.tasks,i={method:e,params:t,resolver:s,timeout:null,options:r};o.push(i);var a=s.promise.timeout;return s.promise.timeout=function(e){return-1!==o.indexOf(i)?(i.timeout=e,s.promise):a.call(s.promise,e)},this._next(),s.promise}if("function"==typeof e)return this.exec("run",[String(e),t]);throw new TypeError('Function or string expected as argument "method"')},a.prototype.proxy=function(){if(arguments.length>0)throw new Error("No arguments expected");var e=this;return this.exec("methods").then((function(t){var r={};return t.forEach((function(t){r[t]=function(){return e.exec(t,Array.prototype.slice.call(arguments))}})),r}))},a.prototype._next=function(){if(this.tasks.length>0){var e=this._getWorker();if(e){var t=this,r=this.tasks.shift();if(r.resolver.promise.pending){var n=e.exec(r.method,r.params,r.resolver,r.options).then(t._boundNext).catch((function(){if(e.terminated)return t._removeWorker(e)})).then((function(){t._next()}));"number"==typeof r.timeout&&n.timeout(r.timeout)}else t._next()}}},a.prototype._getWorker=function(){for(var e=this.workers,t=0;t<e.length;t++){var r=e[t];if(!1===r.busy())return r}return e.length<this.maxWorkers?(r=this._createWorkerHandler(),e.push(r),r):null},a.prototype._removeWorker=function(e){var t=this;return i.releasePort(e.debugPort),this._removeWorkerFromList(e),this._ensureMinWorkers(),new n((function(r,n){e.terminate(!1,(function(s){t.onTerminateWorker({forkArgs:e.forkArgs,forkOpts:e.forkOpts,script:e.script}),s?n(s):r(e)}))}))},a.prototype._removeWorkerFromList=function(e){var t=this.workers.indexOf(e);-1!==t&&this.workers.splice(t,1)},a.prototype.terminate=function(e,t){var r=this;this.tasks.forEach((function(e){e.resolver.reject(new Error("Pool terminated"))})),this.tasks.length=0;var s=function(e){i.releasePort(e.debugPort),this._removeWorkerFromList(e)}.bind(this),o=[];return this.workers.slice().forEach((function(n){var i=n.terminateAndNotify(e,t).then(s).always((function(){r.onTerminateWorker({forkArgs:n.forkArgs,forkOpts:n.forkOpts,script:n.script})}));o.push(i)})),n.all(o)},a.prototype.stats=function(){var e=this.workers.length,t=this.workers.filter((function(e){return e.busy()})).length;return{totalWorkers:e,busyWorkers:t,idleWorkers:e-t,pendingTasks:this.tasks.length,activeTasks:t}},a.prototype._ensureMinWorkers=function(){if(this.minWorkers)for(var e=this.workers.length;e<this.minWorkers;e++)this.workers.push(this._createWorkerHandler())},a.prototype._createWorkerHandler=function(){var e=this.onCreateWorker({forkArgs:this.forkArgs,forkOpts:this.forkOpts,workerThreadOpts:this.workerThreadOpts,script:this.script})||{};return new s(e.script||this.script,{forkArgs:e.forkArgs||this.forkArgs,forkOpts:e.forkOpts||this.forkOpts,workerThreadOpts:e.workerThreadOpts||this.workerThreadOpts,debugPort:i.nextAvailableStartingAt(this.debugPortStart),workerType:this.workerType})},e.exports=a},219:function(e){"use strict";function t(e,o){var i=this;if(!(this instanceof t))throw new SyntaxError("Constructor must be called with the new operator");if("function"!=typeof e)throw new SyntaxError("Function parameter handler(resolve, reject) missing");var a=[],u=[];this.resolved=!1,this.rejected=!1,this.pending=!0;var c=function(e,t){a.push(e),u.push(t)};this.then=function(e,n){return new t((function(t,s){var o=e?r(e,t,s):t,i=n?r(n,t,s):s;c(o,i)}),i)};var l=function(e){return i.resolved=!0,i.rejected=!1,i.pending=!1,a.forEach((function(t){t(e)})),c=function(t,r){t(e)},l=h=function(){},i},h=function(e){return i.resolved=!1,i.rejected=!0,i.pending=!1,u.forEach((function(t){t(e)})),c=function(t,r){r(e)},l=h=function(){},i};this.cancel=function(){return o?o.cancel():h(new n),i},this.timeout=function(e){if(o)o.timeout(e);else{var t=setTimeout((function(){h(new s("Promise timed out after "+e+" ms"))}),e);i.always((function(){clearTimeout(t)}))}return i},e((function(e){l(e)}),(function(e){h(e)}))}function r(e,t,r){return function(n){try{var s=e(n);s&&"function"==typeof s.then&&"function"==typeof s.catch?s.then(t,r):t(s)}catch(e){r(e)}}}function n(e){this.message=e||"promise cancelled",this.stack=(new Error).stack}function s(e){this.message=e||"timeout exceeded",this.stack=(new Error).stack}t.prototype.catch=function(e){return this.then(null,e)},t.prototype.always=function(e){return this.then(e,e)},t.all=function(e){return new t((function(t,r){var n=e.length,s=[];n?e.forEach((function(e,o){e.then((function(e){s[o]=e,0==--n&&t(s)}),(function(e){n=0,r(e)}))})):t(s)}))},t.defer=function(){var e={};return e.promise=new t((function(t,r){e.resolve=t,e.reject=r})),e},n.prototype=new Error,n.prototype.constructor=Error,n.prototype.name="CancellationError",t.CancellationError=n,s.prototype=new Error,s.prototype.constructor=Error,s.prototype.name="TimeoutError",t.TimeoutError=s,e.exports=t},751:function(e,t,r){"use strict";function n(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}function s(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e){return i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},i(e)}var a=r(219),u=r(828),c=r(397),l="__workerpool-terminate__";function h(){var e=m();if(!e)throw new Error("WorkerPool: workerType = 'thread' is not supported, Node >= 11.7.0 required");return e}function d(){if("function"!=typeof Worker&&("object"!==("undefined"==typeof Worker?"undefined":i(Worker))||"function"!=typeof Worker.prototype.constructor))throw new Error("WorkerPool: Web Workers not supported")}function m(){try{return c("worker_threads")}catch(e){if("object"===i(e)&&null!==e&&"MODULE_NOT_FOUND"===e.code)return null;throw e}}function p(e,t){var r=new t(e);return r.isBrowserWorker=!0,r.on=function(e,t){this.addEventListener(e,(function(e){t(e.data)}))},r.send=function(e){this.postMessage(e)},r}function f(e,t,r){var n=new t.Worker(e,function(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?s(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):s(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}({stdout:!1,stderr:!1},r));return n.isWorkerThread=!0,n.send=function(e){this.postMessage(e)},n.kill=function(){return this.terminate(),!0},n.disconnect=function(){this.terminate()},n}function g(e,t,r){var n=r.fork(e,t.forkArgs,t.forkOpts);return n.isChildProcess=!0,n}function w(e){e=e||{};var t=process.execArgv.join(" "),r=-1!==t.indexOf("--inspect"),n=-1!==t.indexOf("--debug-brk"),s=[];return r&&(s.push("--inspect="+e.debugPort),n&&s.push("--debug-brk")),process.execArgv.forEach((function(e){e.indexOf("--max-old-space-size")>-1&&s.push(e)})),Object.assign({},e,{forkArgs:e.forkArgs,forkOpts:Object.assign({},e.forkOpts,{execArgv:(e.forkOpts&&e.forkOpts.execArgv||[]).concat(s)})})}function k(e,t){var s=this,o=t||{};function i(e){for(var t in s.terminated=!0,s.processing)void 0!==s.processing[t]&&s.processing[t].resolver.reject(e);s.processing=Object.create(null)}this.script=e||function(){if("browser"===u.platform){if("undefined"==typeof Blob)throw new Error("Blob not supported by the browser");if(!window.URL||"function"!=typeof window.URL.createObjectURL)throw new Error("URL.createObjectURL not supported by the browser");var e=new Blob([r(670)],{type:"text/javascript"});return window.URL.createObjectURL(e)}return __dirname+"/worker.js"}(),this.worker=function(e,t){if("web"===t.workerType)return d(),p(e,Worker);if("thread"===t.workerType)return f(e,r=h(),t.workerThreadOpts);if("process"!==t.workerType&&t.workerType){if("browser"===u.platform)return d(),p(e,Worker);var r=m();return r?f(e,r):g(e,w(t),c("child_process"))}return g(e,w(t),c("child_process"))}(this.script,o),this.debugPort=o.debugPort,this.forkOpts=o.forkOpts,this.forkArgs=o.forkArgs,this.workerThreadOpts=o.workerThreadOpts,e||(this.worker.ready=!0),this.requestQueue=[],this.worker.on("message",(function(e){if(!s.terminated)if("string"==typeof e&&"ready"===e)s.worker.ready=!0,function(){var e,t=function(e,t){var r="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!r){if(Array.isArray(e)||(r=function(e,t){if(e){if("string"==typeof e)return n(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?n(e,t):void 0}}(e))||t&&e&&"number"==typeof e.length){r&&(e=r);var s=0,o=function(){};return{s:o,n:function(){return s>=e.length?{done:!0}:{done:!1,value:e[s++]}},e:function(e){throw e},f:o}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var i,a=!0,u=!1;return{s:function(){r=r.call(e)},n:function(){var e=r.next();return a=e.done,e},e:function(e){u=!0,i=e},f:function(){try{a||null==r.return||r.return()}finally{if(u)throw i}}}}(s.requestQueue.splice(0));try{for(t.s();!(e=t.n()).done;){var r=e.value;s.worker.send(r)}}catch(e){t.e(e)}finally{t.f()}}();else{var t=e.id,r=s.processing[t];void 0!==r&&(e.isEvent?r.options&&"function"==typeof r.options.on&&r.options.on(e.payload):(delete s.processing[t],!0===s.terminating&&s.terminate(),e.error?r.resolver.reject(function(e){for(var t=new Error(""),r=Object.keys(e),n=0;n<r.length;n++)t[r[n]]=e[r[n]];return t}(e.error)):r.resolver.resolve(e.result)))}}));var a=this.worker;this.worker.on("error",i),this.worker.on("exit",(function(e,t){var r="Workerpool Worker terminated Unexpectedly\n";r+="    exitCode: `"+e+"`\n",r+="    signalCode: `"+t+"`\n",r+="    workerpool.script: `"+s.script+"`\n",r+="    spawnArgs: `"+a.spawnargs+"`\n",r+="    spawnfile: `"+a.spawnfile+"`\n",r+="    stdout: `"+a.stdout+"`\n",r+="    stderr: `"+a.stderr+"`\n",i(new Error(r))})),this.processing=Object.create(null),this.terminating=!1,this.terminated=!1,this.terminationHandler=null,this.lastId=0}k.prototype.methods=function(){return this.exec("methods")},k.prototype.exec=function(e,t,r,n){r||(r=a.defer());var s=++this.lastId;this.processing[s]={id:s,resolver:r,options:n};var o={id:s,method:e,params:t};this.terminated?r.reject(new Error("Worker is terminated")):this.worker.ready?this.worker.send(o):this.requestQueue.push(o);var i=this;return r.promise.catch((function(e){if(e instanceof a.CancellationError||e instanceof a.TimeoutError)return delete i.processing[s],i.terminateAndNotify(!0).then((function(){throw e}),(function(e){throw e}));throw e}))},k.prototype.busy=function(){return Object.keys(this.processing).length>0},k.prototype.terminate=function(e,t){var r=this;if(e){for(var n in this.processing)void 0!==this.processing[n]&&this.processing[n].resolver.reject(new Error("Worker terminated"));this.processing=Object.create(null)}if("function"==typeof t&&(this.terminationHandler=t),this.busy())this.terminating=!0;else{var s=function(e){if(r.terminated=!0,null!=r.worker&&r.worker.removeAllListeners&&r.worker.removeAllListeners("message"),r.worker=null,r.terminating=!1,r.terminationHandler)r.terminationHandler(e,r);else if(e)throw e};if(this.worker){if("function"==typeof this.worker.kill){if(this.worker.killed)return void s(new Error("worker already killed!"));if(this.worker.isChildProcess){var o=setTimeout((function(){r.worker&&r.worker.kill()}),1e3);this.worker.once("exit",(function(){clearTimeout(o),r.worker&&(r.worker.killed=!0),s()})),this.worker.ready?this.worker.send(l):this.requestQueue.push(l)}else this.worker.kill(),this.worker.killed=!0,s();return}if("function"!=typeof this.worker.terminate)throw new Error("Failed to terminate worker");this.worker.terminate(),this.worker.killed=!0}s()}},k.prototype.terminateAndNotify=function(e,t){var r=a.defer();return t&&(r.promise.timeout=t),this.terminate(e,(function(e,t){e?r.reject(e):r.resolve(t)})),r.promise},e.exports=k,e.exports._tryRequireWorkerThreads=m,e.exports._setupProcessWorker=g,e.exports._setupBrowserWorker=p,e.exports._setupWorkerThreadWorker=f,e.exports.ensureWorkerThreads=h},833:function(e){"use strict";function t(){this.ports=Object.create(null),this.length=0}e.exports=t,t.prototype.nextAvailableStartingAt=function(e){for(;!0===this.ports[e];)e++;if(e>=65535)throw new Error("WorkerPool debug port limit reached: "+e+">= 65535");return this.ports[e]=!0,this.length++,e},t.prototype.releasePort=function(e){delete this.ports[e],this.length--}},828:function(e,t,r){var n=r(397),s=function(e){return void 0!==e&&null!=e.versions&&null!=e.versions.node};e.exports.isNode=s,e.exports.platform="undefined"!=typeof process&&s(process)?"node":"browser";var o=function(e){try{return n("worker_threads")}catch(e){return null}}();e.exports.isMainThread="node"===e.exports.platform?(!o||o.isMainThread)&&!process.connected:"undefined"!=typeof Window,e.exports.cpus="browser"===e.exports.platform?self.navigator.hardwareConcurrency:n("os").cpus().length},670:function(e){e.exports='!function(){var __webpack_exports__={};!function(){var exports=__webpack_exports__,__webpack_unused_export__;function _typeof(r){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(r){return typeof r}:function(r){return r&&"function"==typeof Symbol&&r.constructor===Symbol&&r!==Symbol.prototype?"symbol":typeof r})(r)}var requireFoolWebpack=eval("typeof require !== \'undefined\' ? require : function (module) { throw new Error(\'Module \\" + module + \\" not found.\') }"),TERMINATE_METHOD_ID="__workerpool-terminate__",worker={exit:function(){}},WorkerThreads,parentPort;if("undefined"!=typeof self&&"function"==typeof postMessage&&"function"==typeof addEventListener)worker.on=function(r,e){addEventListener(r,function(r){e(r.data)})},worker.send=function(r){postMessage(r)};else{if("undefined"==typeof process)throw new Error("Script must be executed as a worker");try{WorkerThreads=requireFoolWebpack("worker_threads")}catch(error){if("object"!==_typeof(error)||null===error||"MODULE_NOT_FOUND"!==error.code)throw error}WorkerThreads&&null!==WorkerThreads.parentPort?(parentPort=WorkerThreads.parentPort,worker.send=parentPort.postMessage.bind(parentPort),worker.on=parentPort.on.bind(parentPort)):(worker.on=process.on.bind(process),worker.send=process.send.bind(process),worker.on("disconnect",function(){process.exit(1)}),worker.exit=process.exit.bind(process))}function convertError(o){return Object.getOwnPropertyNames(o).reduce(function(r,e){return Object.defineProperty(r,e,{value:o[e],enumerable:!0})},{})}function isPromise(r){return r&&"function"==typeof r.then&&"function"==typeof r.catch}worker.methods={},worker.methods.run=function(r,e){r=new Function("return ("+r+").apply(null, arguments);");return r.apply(r,e)},worker.methods.methods=function(){return Object.keys(worker.methods)};var currentRequestId=null;worker.on("message",function(e){if(e===TERMINATE_METHOD_ID)return worker.exit(0);try{var r=worker.methods[e.method];if(!r)throw new Error(\'Unknown method "\'+e.method+\'"\');currentRequestId=e.id;var o=r.apply(r,e.params);isPromise(o)?o.then(function(r){worker.send({id:e.id,result:r,error:null}),currentRequestId=null}).catch(function(r){worker.send({id:e.id,result:null,error:convertError(r)}),currentRequestId=null}):(worker.send({id:e.id,result:o,error:null}),currentRequestId=null)}catch(r){worker.send({id:e.id,result:null,error:convertError(r)})}}),worker.register=function(r){if(r)for(var e in r)r.hasOwnProperty(e)&&(worker.methods[e]=r[e]);worker.send("ready")},worker.emit=function(r){currentRequestId&&worker.send({id:currentRequestId,isEvent:!0,payload:r})},__webpack_unused_export__=worker.register,worker.emit}()}();'},397:function(module){var requireFoolWebpack=eval("typeof require !== 'undefined' ? require : function (module) { throw new Error('Module \" + module + \" not found.') }");module.exports=requireFoolWebpack},744:function(__unused_webpack_module,exports){function _typeof(e){return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},_typeof(e)}var requireFoolWebpack=eval("typeof require !== 'undefined' ? require : function (module) { throw new Error('Module \" + module + \" not found.') }"),TERMINATE_METHOD_ID="__workerpool-terminate__",worker={exit:function(){}};if("undefined"!=typeof self&&"function"==typeof postMessage&&"function"==typeof addEventListener)worker.on=function(e,t){addEventListener(e,(function(e){t(e.data)}))},worker.send=function(e){postMessage(e)};else{if("undefined"==typeof process)throw new Error("Script must be executed as a worker");var WorkerThreads;try{WorkerThreads=requireFoolWebpack("worker_threads")}catch(e){if("object"!==_typeof(e)||null===e||"MODULE_NOT_FOUND"!==e.code)throw e}if(WorkerThreads&&null!==WorkerThreads.parentPort){var parentPort=WorkerThreads.parentPort;worker.send=parentPort.postMessage.bind(parentPort),worker.on=parentPort.on.bind(parentPort)}else worker.on=process.on.bind(process),worker.send=process.send.bind(process),worker.on("disconnect",(function(){process.exit(1)})),worker.exit=process.exit.bind(process)}function convertError(e){return Object.getOwnPropertyNames(e).reduce((function(t,r){return Object.defineProperty(t,r,{value:e[r],enumerable:!0})}),{})}function isPromise(e){return e&&"function"==typeof e.then&&"function"==typeof e.catch}worker.methods={},worker.methods.run=function(e,t){var r=new Function("return ("+e+").apply(null, arguments);");return r.apply(r,t)},worker.methods.methods=function(){return Object.keys(worker.methods)};var currentRequestId=null;worker.on("message",(function(e){if(e===TERMINATE_METHOD_ID)return worker.exit(0);try{var t=worker.methods[e.method];if(!t)throw new Error('Unknown method "'+e.method+'"');currentRequestId=e.id;var r=t.apply(t,e.params);isPromise(r)?r.then((function(t){worker.send({id:e.id,result:t,error:null}),currentRequestId=null})).catch((function(t){worker.send({id:e.id,result:null,error:convertError(t)}),currentRequestId=null})):(worker.send({id:e.id,result:r,error:null}),currentRequestId=null)}catch(t){worker.send({id:e.id,result:null,error:convertError(t)})}})),worker.register=function(e){if(e)for(var t in e)e.hasOwnProperty(t)&&(worker.methods[t]=e[t]);worker.send("ready")},worker.emit=function(e){currentRequestId&&worker.send({id:currentRequestId,isEvent:!0,payload:e})},exports.add=worker.register,exports.emit=worker.emit}},__webpack_module_cache__={};function __nested_webpack_require_50492__(e){var t=__webpack_module_cache__[e];if(void 0!==t)return t.exports;var r=__webpack_module_cache__[e]={exports:{}};return __webpack_modules__[e](r,r.exports,__nested_webpack_require_50492__),r.exports}var __webpack_exports__={},exports,environment;return exports=__webpack_exports__,environment=__nested_webpack_require_50492__(828),exports.pool=function(e,t){return new(__nested_webpack_require_50492__(345))(e,t)},exports.worker=function(e){__nested_webpack_require_50492__(744).add(e)},exports.workerEmit=function(e){__nested_webpack_require_50492__(744).emit(e)},exports.Promise=__nested_webpack_require_50492__(219),exports.platform=environment.platform,exports.isMainThread=environment.isMainThread,exports.cpus=environment.cpus,__webpack_exports__}()},module.exports=factory()}},__webpack_module_cache__={};function __webpack_require__(e){var t=__webpack_module_cache__[e];if(void 0!==t)return t.exports;var r=__webpack_module_cache__[e]={exports:{}};return __webpack_modules__[e].call(r.exports,r,r.exports,__webpack_require__),r.exports}var __webpack_exports__={};(()=>{"use strict";var e,t,r;!function(e){e[e.FallingTickProcessed=0]="FallingTickProcessed",e[e.GameOver=1]="GameOver",e[e.FiguresMoved=2]="FiguresMoved",e[e.LevelUp=3]="LevelUp",e[e.FiguresSpawned=4]="FiguresSpawned"}(e||(e={}));class n{gameData;transferredToMatrixFigures;squashedLines;droppedLines;constructor(e,t,r,n){this.gameData=e,this.transferredToMatrixFigures=t,this.squashedLines=r,this.droppedLines=n}getEventType(){return e.FallingTickProcessed}}class s{gameData;constructor(e){this.gameData=e}getEventType(){return e.GameOver}}class o{gameData;constructor(e){this.gameData=e}getEventType(){return e.FiguresMoved}}class i{gameData;newFigures;constructor(e,t){this.gameData=e,this.newFigures=t}getEventType(){return e.FiguresSpawned}}class a{handlers=new Map;on(e,t,r=!0){let n=this.handlers.get(e)||[];r&&n.some((e=>e===t))||(n.push(t),this.handlers.set(e,n))}off(e,t){let r=this.handlers.get(e)||[],n=r.indexOf(t);n>0&&r.splice(n,1),this.handlers.set(e,r)}fire(e){(this.handlers.get(e.getEventType())||[]).forEach((t=>{t(e)}))}}!function(e){e[e.InitGame=0]="InitGame",e[e.ResumeGame=1]="ResumeGame",e[e.PauseGame=2]="PauseGame",e[e.FiguresFallTick=3]="FiguresFallTick",e[e.GameOver=4]="GameOver",e[e.Render=5]="Render",e[e.MoveLeft=6]="MoveLeft",e[e.MoveRight=7]="MoveRight",e[e.TurnClockwise=8]="TurnClockwise",e[e.MoveDown=9]="MoveDown",e[e.FiguresFallDown=10]="FiguresFallDown",e[e.MoveToX=11]="MoveToX",e[e.MoveToY=12]="MoveToY",e[e.TurnToState=13]="TurnToState"}(t||(t={}));class u{gameData;constructor(e){this.gameData=e}getCommandType(){return t.InitGame}}class c{gameData;constructor(e){this.gameData=e}getCommandType(){return t.ResumeGame}}class l{gameData;constructor(e){this.gameData=e}getCommandType(){return t.PauseGame}}class h{gameData;constructor(e){this.gameData=e}getCommandType(){return t.FiguresFallTick}}class d{gameData;constructor(e){this.gameData=e}getCommandType(){return t.GameOver}}class m{gameData;constructor(e){this.gameData=e}getCommandType(){return t.Render}}class p{gameData;x;constructor(e,t){this.gameData=e,this.x=t}getCommandType(){return t.MoveToX}}class f{gameData;y;constructor(e,t){this.gameData=e,this.y=t}getCommandType(){return t.MoveToY}}class g{gameData;turnState;constructor(e,t){this.gameData=e,this.turnState=t}getCommandType(){return t.TurnToState}}class w{gameData;constructor(e){this.gameData=e}getCommandType(){return t.FiguresFallDown}}class k{handlers=new Map;addHandler(e,t,r=!0){let n=this.handlers.get(e)||[];r&&n.some((e=>e===t))||(n.push(t),this.handlers.set(e,n))}removeHandler(e,t){let r=this.handlers.get(e)||[],n=r.indexOf(t);n>0&&r.splice(n,1),this.handlers.set(e,r)}run(e){(this.handlers.get(e.getCommandType())||[]).forEach((t=>{t(e)}))}}!function(e){e[e.One=0]="One",e[e.Two=1]="Two",e[e.Three=2]="Three",e[e.Four=3]="Four"}(r||(r={}));class v{getTurn(e){switch(e){case r.One:return this.getFirstTurn();case r.Two:return this.getSecondTurn();case r.Three:return this.getThirdTurn();case r.Four:return this.getForthTurn()}}}class y extends v{getNormalizedFigure(){let e=this.getFigure(),t=e.reduce(((e,t)=>Math.max(e,t.length)),0);return e.map((e=>{let r=e.length;return e.length=t,e.fill(!1,r-1,t-1)}))}getFirstTurn(){return this.getNormalizedFigure()}getSecondTurn(){let e=this.getNormalizedFigure(),t=[],r=e.length,n=e[0].length;for(let s=0;s<n;s++){t[s]=new Array(r).fill(!1);for(let n=0;n<r;n++)t[s][r-n-1]=e[n][s]}return t}getThirdTurn(){return this.getFirstTurn().reverse().map((e=>e.reverse()))}getForthTurn(){return this.getSecondTurn().reverse().map((e=>e.reverse()))}}class _ extends y{getFigure(){return["###".split("").map((e=>"#"===e)),"-#-".split("").map((e=>"#"===e))]}}class b extends y{getFigure(){return["###".split("").map((e=>"#"===e)),"--#".split("").map((e=>"#"===e))]}}class T extends y{getFigure(){return["###".split("").map((e=>"#"===e)),"#--".split("").map((e=>"#"===e))]}}class x extends y{getFigure(){return["##".split("").map((e=>"#"===e)),"##".split("").map((e=>"#"===e))]}}class F extends y{getFigure(){return["####".split("").map((e=>"#"===e))]}}class O extends y{getFigure(){return["##-".split("").map((e=>"#"===e)),"-##".split("").map((e=>"#"===e))]}}class D extends y{getFigure(){return["-##".split("").map((e=>"#"===e)),"##-".split("").map((e=>"#"===e))]}}class M{x;y;constructor(e,t){this.x=e,this.y=t}}class E{figure;position;turnState;color;constructor(e,t,r,n){this.figure=e,this.position=t,this.turnState=r,this.color=n}}class P{fieldWidth;fieldHeight;figures;constructor(e,t,r){this.fieldWidth=e,this.fieldHeight=t,this.figures=r}}class C{figuresFallen=0;linesSquashed=0}class S{isInitialized;isGameOver;fallingFigures;matrix;nextTickTimeoutId;settings;level;score;combo;stats;constructor(e=!1,t=!1,r=[],n=[],s=setTimeout((()=>{})),o,i=1,a=0,u=0,c=new C){this.isInitialized=e,this.isGameOver=t,this.fallingFigures=r,this.matrix=n,this.nextTickTimeoutId=s,this.settings=o,this.level=i,this.score=a,this.combo=u,this.stats=c}static makeSimple(e=10,t=20){return new S(!1,!1,[],new Array(t).fill([]).map((t=>new Array(e).fill(!1))),setTimeout((()=>{})),new P(e,t,[new _,new b,new T,new x,new F,new O,new D]))}}class B{timingsHandler;eventBus;commandBus;gameData=S.makeSimple();constructor(e,r,n){this.timingsHandler=e,this.eventBus=r,this.commandBus=n,this.commandBus.addHandler(t.InitGame,this.initGameHandler.bind(this)),this.commandBus.addHandler(t.ResumeGame,this.resumeGameHandler.bind(this)),this.commandBus.addHandler(t.PauseGame,this.pauseGameHandler.bind(this)),this.commandBus.addHandler(t.GameOver,this.gameOverHandler.bind(this))}initGameHandler(t){this.gameData=t.gameData,this.gameData.isInitialized=!0,this.eventBus.on(e.FallingTickProcessed,this.onFallTickProcessed.bind(this))}resumeGameHandler(e){this.gameData.isGameOver||(this.gameData.isInitialized||this.commandBus.run(new u(e.gameData)),this.fallTick())}pauseGameHandler(e){this.gameData=e.gameData,clearTimeout(this.gameData.nextTickTimeoutId),this.commandBus.run(new m(this.gameData))}gameOverHandler(){this.gameData.isInitialized=!1,this.gameData.isGameOver=!0,clearTimeout(this.gameData.nextTickTimeoutId),this.eventBus.fire(new s(this.gameData))}fallTick(){this.commandBus.run(new h(this.gameData))}onFallTickProcessed(e){clearTimeout(this.gameData.nextTickTimeoutId);const t=this.timingsHandler.getDelayForNextTickMs(this.gameData);this.gameData.isGameOver||t==1/0||(this.gameData.nextTickTimeoutId=setTimeout(this.fallTick.bind(this),this.timingsHandler.getDelayForNextTickMs(this.gameData)))}}class W{static canFigureBePlaced(e,t,r){return e.every(((e,n)=>e.every(((e,s)=>{const o=t.y+n,i=t.x+s;return!e||o<0&&i>=0&&i<=r[0].length-1||o in r&&i in r[o]&&!r[o][i]}))))}}class H{static ToArray(e){return Object.keys(e).map((e=>Number.parseInt(e))).filter((e=>!Number.isNaN(e)))}static GetRandom(e){const t=H.ToArray(e);return t[Math.floor(Math.random()*t.length)]}}class q{commandBus;eventBus;constructor(e,r){this.commandBus=e,this.eventBus=r,this.commandBus.addHandler(t.MoveLeft,this.processMoveLeftCommand.bind(this)),this.commandBus.addHandler(t.MoveRight,this.processMoveRightCommand.bind(this)),this.commandBus.addHandler(t.MoveDown,this.processMoveDownCommand.bind(this)),this.commandBus.addHandler(t.TurnClockwise,this.processTurnClockwiseCommand.bind(this)),this.commandBus.addHandler(t.MoveToX,this.processMoveToXCommand.bind(this)),this.commandBus.addHandler(t.MoveToY,this.processMoveToYCommand.bind(this)),this.commandBus.addHandler(t.TurnToState,this.processTurnToStateCommand.bind(this))}processMoveLeftCommand(e){e.gameData.fallingFigures.forEach((t=>{W.canFigureBePlaced(t.figure.getTurn(t.turnState),new M(t.position.x-1,t.position.y),e.gameData.matrix)&&t.position.x--})),this.eventBus.fire(new o(e.gameData))}processMoveRightCommand(e){e.gameData.fallingFigures.forEach((t=>{W.canFigureBePlaced(t.figure.getTurn(t.turnState),new M(t.position.x+1,t.position.y),e.gameData.matrix)&&t.position.x++})),this.eventBus.fire(new o(e.gameData))}processTurnClockwiseCommand(e){const t=H.ToArray(r);e.gameData.fallingFigures.forEach((r=>{let n=r.turnState+1;n in t||(n=t[0]),W.canFigureBePlaced(r.figure.getTurn(n),r.position,e.gameData.matrix)&&(r.turnState=n)})),this.eventBus.fire(new o(e.gameData))}processMoveDownCommand(e){this.commandBus.run(new h(e.gameData))}processMoveToXCommand(e){e.x<0||e.x>e.gameData.settings.fieldWidth-1||(e.gameData.fallingFigures.forEach((t=>{const r=e.x>t.position.x?1:-1;for(;t.position.x!==e.x&&W.canFigureBePlaced(t.figure.getTurn(t.turnState),new M(t.position.x+r,t.position.y),e.gameData.matrix);)t.position.x+=r})),this.eventBus.fire(new o(e.gameData)))}processMoveToYCommand(e){e.y<0||(e.gameData.fallingFigures.forEach((t=>{for(;t.position.y<e.y&&W.canFigureBePlaced(t.figure.getTurn(t.turnState),new M(t.position.x,t.position.y+1),e.gameData.matrix);)t.position.y++})),this.eventBus.fire(new o(e.gameData)))}processTurnToStateCommand(e){e.gameData.fallingFigures.forEach((t=>{W.canFigureBePlaced(t.figure.getTurn(e.turnState),t.position,e.gameData.matrix)&&(t.turnState=e.turnState)})),this.eventBus.fire(new o(e.gameData))}}class R{eventBus;commandBus;constructor(e,r){this.eventBus=e,this.commandBus=r,this.commandBus.addHandler(t.InitGame,this.initHandler.bind(this))}initHandler(t){this.eventBus.on(e.FallingTickProcessed,this.processOnFallTick.bind(this))}processOnFallTick(e){this.addFigure(e.gameData)}addFigure(e){if(e.fallingFigures.length>0||e.isGameOver)return;const t=Math.floor(Math.random()*e.settings.figures.length),n=e.settings.figures[t],s=H.GetRandom(r),o=n.getTurn(s),a=Math.max(...o.map((e=>e.length))),u=new M(Math.ceil(e.settings.fieldWidth/2-a/2)-1,-o.length),c=new E(n,u,s);e.fallingFigures.push(c),this.eventBus.fire(new i(e,[c]))}}class I{eventBus;commandBus;levelIncreaseOnSquashedRowsNumber;maxLevels;squashedRowsCounter=0;constructor(e,r,n,s){this.eventBus=e,this.commandBus=r,this.levelIncreaseOnSquashedRowsNumber=n,this.maxLevels=s,this.commandBus.addHandler(t.InitGame,this.processInitGameCommand.bind(this))}processInitGameCommand(t){this.eventBus.on(e.FallingTickProcessed,this.onFallTickProcessed.bind(this))}onFallTickProcessed(e){0!==e.squashedLines.length&&(this.squashedRowsCounter++,this.squashedRowsCounter>=this.levelIncreaseOnSquashedRowsNumber&&(this.squashedRowsCounter=0,e.gameData.level=Math.min(this.maxLevels,e.gameData.level+1)))}}class G{commandBus;eventBus;constructor(e,r){this.commandBus=e,this.eventBus=r,e.addHandler(t.InitGame,this.initGameHandler.bind(this))}initGameHandler(t){this.eventBus.on(e.FallingTickProcessed,this.onFallTickProcessed.bind(this))}onFallTickProcessed(e){e.transferredToMatrixFigures.length<=0||(e.squashedLines.length>0?e.gameData.combo+=1:e.gameData.combo=0)}}class j{commandBus;eventBus;squashedRowsRewardThresholdsMap;rewardOnCombo;constructor(e,r,n=new Map([[1,100],[2,300],[3,500],[4,800]]),s=50){this.commandBus=e,this.eventBus=r,this.squashedRowsRewardThresholdsMap=n,this.rewardOnCombo=s,e.addHandler(t.InitGame,this.initGameHandler.bind(this))}initGameHandler(t){this.eventBus.on(e.FallingTickProcessed,this.onFallingTickProcessed.bind(this))}onFallingTickProcessed(e){if(e.squashedLines.length<0)return;let t=0;this.squashedRowsRewardThresholdsMap.forEach(((r,n)=>{n>e.squashedLines.length||(t=r)})),e.gameData.score+=t*e.gameData.level+this.rewardOnCombo*Math.max(0,e.gameData.combo-1)*e.gameData.level+2*e.droppedLines*e.gameData.level}}class A{commandBus;eventBus;constructor(e,r){this.commandBus=e,this.eventBus=r,e.addHandler(t.InitGame,this.initGameHandler.bind(this))}initGameHandler(t){this.eventBus.on(e.FallingTickProcessed,this.onFallingTickProcessed.bind(this))}onFallingTickProcessed(e){e.gameData.stats.figuresFallen+=e.transferredToMatrixFigures.length,e.gameData.stats.linesSquashed+=e.squashedLines.length}}class L{delayMs;constructor(e){this.delayMs=e}getDelayForNextTickMs(e){return this.delayMs}}class N{eventBus;commandBus;figurePlacingResolver;figurePlacingPerformer;constructor(e,r,n,s){this.eventBus=e,this.commandBus=r,this.figurePlacingResolver=n,this.figurePlacingPerformer=s,this.commandBus.addHandler(t.InitGame,this.initGameHandler.bind(this))}initGameHandler(t){this.eventBus.on(e.FiguresSpawned,this.onFiguresSpawned.bind(this))}onFiguresSpawned(e){const t=this.figurePlacingResolver.resolve(e.gameData);this.figurePlacingPerformer.place(e.gameData,t)}}class z{target;_persisted;constructor(e,t){this.target=e,this._persisted=t}get persisted(){return this._persisted}}class U{target;_persisted;constructor(e,t){this.target=e,this._persisted=t}get persisted(){return this._persisted}}class X{target;constructor(e){this.target=e}get persisted(){return!1}}class Q{get persisted(){return!1}}class Y{figuresTargetStates;placingSteps;constructor(e,t){this.figuresTargetStates=e,this.placingSteps=t}}class V{isOpened;cells;constructor(e,t){this.isOpened=e,this.cells=t}}class ${static collectHoles(e){let t=[];class r{cells;previousRowOpenXs;currentRowOpenXs;isOpened;continues;constructor(e=[],t=[],r=[],n=!1,s=!1){this.cells=e,this.previousRowOpenXs=t,this.currentRowOpenXs=r,this.isOpened=n,this.continues=s}}let n=[],s=new Set;return e.forEach(((o,i)=>{n.forEach((e=>e.continues=!1)),o.forEach(((t,o)=>{if(t)s.add(o);else if(s.has(o)){let t=n.find((e=>e.previousRowOpenXs.some((e=>e===o))||e.currentRowOpenXs.length>0&&e.currentRowOpenXs[e.currentRowOpenXs.length-1]===o));void 0===t&&(t=new r,n.push(t)),t.currentRowOpenXs.push(o),t.cells.push(new M(o,i)),t.continues=!0,t.isOpened=t.isOpened||this.doesTheWayOutFromHoleExists(e,new M(o,i),s,[[!0,!0]])}}));let a=[];n.forEach(((r,n)=>{r.continues&&(r.previousRowOpenXs=r.currentRowOpenXs,r.currentRowOpenXs=[]),r.continues&&i!=e.length-1||(t.push(new V(r.isOpened,r.cells)),a.push(n))})),a.reverse().forEach((e=>n.splice(e,1)))})),t}static doesTheWayOutFromHoleExists(e,t,r,n){return void 0!==this.findTheWayOutFromHole(e,t,r,n)}static findTheWayOutFromHole(e,t,r,n){r instanceof Map&&(r=$.convertCoveredColumnsToXs(r));for(let s=t.x-1;s>=0&&W.canFigureBePlaced(n,new M(s,t.y),e);s--){let e=!0;for(let t=s+n[0].length-1;t>=s;t--)if(r.has(t)){e=!1;break}if(e)return s}for(let s=t.x+1;s<e[0].length&&W.canFigureBePlaced(n,new M(s,t.y),e);s++){let e=!0;for(let t=s;t<s+n[0].length;t++)if(r.has(t)){e=!1;break}if(e)return s}}static collectCoveredColumnsXs(e,t){return $.convertCoveredColumnsToXs($.collectCoveredColumns(e,t))}static convertCoveredColumnsToXs(e){return new Set([...e.keys()])}static collectCoveredColumns(e,t){let r=new Map;return e.some(((n,s)=>(n.forEach(((e,t)=>{e&&r.set(t,s)})),void 0!==t&&s>=t||r.size==e[0].length))),r}}class J{gameData;originalHoles;originalCoveredColumns;imaginableMatrix;imaginableCoveredColumns;squashedLinesCount;constructor(e,t,r,n,s,o){this.gameData=e,this.originalHoles=t,this.originalCoveredColumns=r,this.imaginableMatrix=n,this.imaginableCoveredColumns=s,this.squashedLinesCount=o}}class K extends Error{}class Z extends K{}class ee{commandBus;scoreCalculator;constructor(e,t){this.commandBus=e,this.scoreCalculator=t}resolve(e){if(0===e.fallingFigures.length)return;if(1!==e.fallingFigures.length)throw new Z;const t=e.fallingFigures[0];let r=-1/0,n=new Y(new Map,[]);return this.processStates(e,((e,s,o)=>{s>r&&(r=s,n=new Y(new Map([[t,e]]),o))})),n}processStates(e,t,n){const s=e.fallingFigures[0];let o=H.ToArray(r);for(;o[0]!==s.turnState;)o.unshift(o.pop());let i=new Map,a=new Set;o.forEach((e=>{let t=s.figure.getTurn(e),r=t.map((e=>e.map((e=>e?"1":"0")).join())).join("\n");a.has(r)||(a.add(r),i.set(e,t))}));const u=$.collectHoles(e.matrix),c=$.collectCoveredColumns(e.matrix);i.forEach(((r,o)=>{for(let i=0;i<e.settings.fieldWidth-r[0].length+1;i++){let[a,l]=this.imagineFigureDrop(e.matrix,r,i),h=new M(i,a),d=this.squashLines(l),m=new E(s.figure,h,o);n&&n(m);let p=$.collectCoveredColumns(l),f=new J(e,u,c,l,p,d),g=this.scoreCalculator.calculateScore(f),w=this.makeSimplePlacingSteps(m);t&&t(m,g,w)}})),u.filter((e=>e.isOpened&&e.cells.length>0)).forEach((r=>{let o=e.settings.fieldHeight,a=e.settings.fieldWidth,l=-1,h=-1;r.cells.forEach((e=>{o=Math.min(o,e.y),a=Math.min(a,e.x),l=Math.max(l,e.y),h=Math.max(h,e.x)})),i.forEach(((r,i)=>{for(let d=Math.max(o-r.length+1,0);d<=l;d++)for(let o=Math.max(a-r[0].length+1,0);o<=h;o++){let a=new M(o,d),l=new E(s.figure,a,i);if(n&&n(l),W.canFigureBePlaced(r,a,e.matrix)){let n=this.makePushInPlacingSteps(e,l,c);if(void 0!==n){let s=this.imagineFigurePlacing(e.matrix,r,a),o=this.squashLines(s),i=$.collectCoveredColumns(s),h=new J(e,u,c,s,i,o),d=this.scoreCalculator.calculateScore(h);t&&t(l,d,n)}}}}))}))}squashLines(e){let t=[];return e.forEach(((e,r)=>{e.every((e=>e))&&t.push(r)}),0),t.forEach((t=>{e.splice(t,1),e.unshift(new Array(e[0].length).fill(!1))})),t.length}imagineFigureDrop(e,t,r){let n=-t.length;for(;W.canFigureBePlaced(t,new M(r,n+1),e);)n++;return[n,this.imagineFigurePlacing(e,t,new M(r,n))]}imagineFigurePlacing(e,t,r){let n=structuredClone(e);return t.forEach(((e,t)=>{e.forEach(((e,s)=>{const o=r.y+t,i=r.x+s;o in n&&i in n[o]&&e&&(n[o][i]=!0)}))})),n}makePushInPlacingSteps(e,t,r){let n=t.figure.getTurn(t.turnState),s=$.findTheWayOutFromHole(e.matrix,t.position,r,n);if(void 0!==s)return[new z(t.turnState,!0),new U(s,!1),new X(t.position.y),new U(t.position.x,!0),new Q]}makeSimplePlacingSteps(e){return[new z(e.turnState,!0),new U(e.position.x,!0),new Q]}}class te{calculators;constructor(e){this.calculators=e}calculateScore(e){return this.calculators.reduce(((t,r)=>t+r.calculateScore(e)),0)}}class re{minimumValuableHeight;powMultiplier;multiplier;constructor(e,t,r){this.minimumValuableHeight=e,this.powMultiplier=t,this.multiplier=r}}class ne{params;constructor(e=new re(5,1,1)){this.params=e}calculateScore(e){const t=e.gameData.settings.fieldHeight,r=e.gameData.settings.fieldWidth,[n,s]=this.calculateFillableSpace(e.imaginableMatrix,r);let o=0;return s>this.params.minimumValuableHeight&&(o=-n*Math.pow(n,n/(t*r)*this.params.powMultiplier)*this.params.multiplier),o}calculateFillableSpace(e,t){let r=new Set,n=0,s=0;return e.every((e=>(e.forEach(((e,t)=>{e&&r.add(t)})),e.forEach(((e,t)=>{!e&&r.size>0&&!r.has(t)&&n++})),r.size<t&&(r.size>0&&s++,!0)))),[n,s]}}class se{powMultiplier;multiplier;constructor(e,t){this.powMultiplier=e,this.multiplier=t}}class oe{params;constructor(e=new se(1,3)){this.params=e}calculateScore(e){const t=this.calculateHeight(e.imaginableMatrix);return-t*Math.pow(t,t/e.gameData.settings.fieldHeight*this.params.powMultiplier)*this.params.multiplier}calculateHeight(e){let t=-1;return e.every(((e,r)=>!!e.every((e=>!e))&&(t=r,!0))),e.length-t-1}}class ie{countDecreaseMultiplier;countIncreaseMultiplier;coveredHeightPowMultiplier;coveredHeightMultiplier;constructor(e,t,r,n){this.countDecreaseMultiplier=e,this.countIncreaseMultiplier=t,this.coveredHeightPowMultiplier=r,this.coveredHeightMultiplier=n}}class ae{params;constructor(e=new ie(150,70,1,5)){this.params=e}calculateScore(e){const[t,r]=this.calculateHolesAndCoveredHeight(e.imaginableMatrix,e.gameData.matrix),n=e.originalHoles.length-t;let s=n>0?n*this.params.countDecreaseMultiplier:n*this.params.countIncreaseMultiplier;return 0!==r&&0!==t&&(s-=r*Math.pow(r,r/(e.gameData.settings.fieldHeight*t)*this.params.coveredHeightPowMultiplier)*this.params.coveredHeightMultiplier),s}calculateHolesAndCoveredHeight(e,t){const[r,n]=this.calculateTheHighestHoleCoveredY(t);let s=new Map,o=0,i=0;return e.forEach(((e,t)=>{e.forEach(((e,a)=>{e&&!s.has(a)&&s.set(a,t);let u=s.get(a);void 0===u||e||(i++,void 0!==r&&void 0!==n&&(t<r?o+=t-u:u<n&&(o+=n-u)))}))})),[i,o]}calculateTheHighestHoleCoveredY(e){let t,r,n=new Map;return e.some(((e,s)=>e.some(((e,o)=>{e&&!n.has(o)&&n.set(o,s);let i=n.get(o);return void 0!==i&&!e&&(r=s,t=i,!0)})))),[r,t]}}class ue{multiplier;constructor(e){this.multiplier=e}}class ce{params;constructor(e=new ue(5)){this.params=e}calculateScore(e){return e.squashedLinesCount*this.params.multiplier}}class le{minimumValuableHeight;countMultiplier;heightPowMultiplier;heightMultiplier;constructor(e,t,r,n){this.minimumValuableHeight=e,this.countMultiplier=t,this.heightPowMultiplier=r,this.heightMultiplier=n}}class he{params;constructor(e=new le(3,70,1,7)){this.params=e}calculateScore(e){const[t,r]=this.calculateTunnelsExceptUncovered(e.imaginableMatrix,e.gameData.matrix);return 0===r?0:-r*this.params.countMultiplier-t*Math.pow(t,t/(e.gameData.settings.fieldHeight*r)*this.params.heightPowMultiplier)*this.params.heightMultiplier}calculateTunnelsExceptUncovered(e,t){let r=new Set;t.every((e=>{e.forEach(((e,t)=>{e&&r.add(t)}))}));let n=new Set,s=new Map;const o=e[0].length;e.every(((e,t)=>(e.forEach(((e,t)=>{e&&n.add(t)})),e.forEach(((e,t)=>{e||n.has(t)||r.has(t)||0!==t&&!n.has(t-1)||t!==o-1&&!n.has(t+1)||s.set(t,(s.get(t)||0)+1)})),n.size<o)));let i=0,a=0;return s.forEach((e=>{e>=this.params.minimumValuableHeight&&(i+=e,a++)})),[i,a]}}class de extends Error{}class me extends de{}class pe extends de{}class fe extends de{}class ge{commandBus;constructor(e){this.commandBus=e}place(e,t){"undefined"!=typeof setImmediate?setImmediate((()=>this.placeImpl(e,t))):setTimeout((()=>this.placeImpl(e,t)),0)}placeImpl(e,t){if(0===e.fallingFigures.length)return;if(1!==e.fallingFigures.length)throw new me;if(void 0===t)return;const r=e.fallingFigures[0],n=t.figuresTargetStates.get(r);if(n){if(r.figure!==n.figure)throw new pe("Both of the original and the target falling figures must have the same figure in it.");t.placingSteps.forEach((t=>{if(t instanceof z)this.commandBus.run(new g(e,t.target));else if(t instanceof U)this.commandBus.run(new p(e,t.target));else if(t instanceof X)this.commandBus.run(new f(e,t.target));else{if(!(t instanceof Q))throw new fe("Unknown step "+t.constructor.name);this.commandBus.run(new w(e))}}))}}}class we{transferredFigures=[];isGameOver=!1}class ke{commandBus;eventBus;constructor(e,r){this.commandBus=e,this.eventBus=r,this.commandBus.addHandler(t.FiguresFallTick,this.processFiguresFallTickCommand.bind(this)),this.commandBus.addHandler(t.FiguresFallDown,this.processDropFiguresCommand.bind(this))}processFiguresFallTickCommand(e){const t=this.fallFiguresForOneCell(e.gameData);let r=this.squashLines(e.gameData.matrix);t.isGameOver&&this.commandBus.run(new d(e.gameData)),this.eventBus.fire(new n(e.gameData,t.transferredFigures,r,0))}processDropFiguresCommand(e){let t=new we,r=0;for(;e.gameData.fallingFigures.length>0;){const n=this.fallFiguresForOneCell(e.gameData);t.transferredFigures.push(...n.transferredFigures),t.isGameOver=t.isGameOver||n.isGameOver,r++}let s=this.squashLines(e.gameData.matrix);t.isGameOver&&this.commandBus.run(new d(e.gameData)),this.eventBus.fire(new n(e.gameData,t.transferredFigures,s,r-1))}fallFiguresForOneCell(e){let t=new we;return e.fallingFigures.forEach(((r,n)=>{if(this.figureCanFall(e.matrix,r))r.position.y++;else{let s=this.transferFigureToMatrix(e.matrix,r);t.transferredFigures.push(...e.fallingFigures.splice(n,1)),t.isGameOver=t.isGameOver||s}})),t}figureCanFall(e,t){return W.canFigureBePlaced(t.figure.getTurn(t.turnState),new M(t.position.x,t.position.y+1),e)}transferFigureToMatrix(e,t){let r=!1;return t.figure.getTurn(t.turnState).forEach(((n,s)=>{n.forEach(((n,o)=>{if(!n)return;let i=t.position.x+o,a=t.position.y+s;a in e&&i in e[a]&&!e[a][i]?e[a][i]=!0:r=!0}))})),r}squashLines(e){let t=[];return e.forEach(((e,r)=>{e.every((e=>e))&&t.push(r)}),0),t.forEach((t=>{e.splice(t,1),e.unshift(new Array(e[0].length).fill(!1))})),t}}class ve{benchRunParameters;eventBus;commandBus;gameController;movingHandler;fallingFiguresProcessor;figuresSpawner;levelCounter;comboCounter;scoreCounter;statsCounter;gameData;tetrisSolver;constructor(e,t=new a,r=new k,n=new B(new L(1/0),t,r),s=new q(r,t),o=new ke(r,t),i=new R(t,r),u=new I(t,r,8,15),c=new G(r,t),l=new j(r,t),h=new A(r,t),d=S.makeSimple(),m=new N(t,r,new ee(r,new te([new ne(e.fillableCellsCalculatorParams),new oe(e.filledHeightCalculatorParams),new ae(e.holesV1CalculatorParams),new ce(e.squashedRowsCalculatorParams),new he(e.tunnelsCalculatorParams)])),new ge(r))){this.benchRunParameters=e,this.eventBus=t,this.commandBus=r,this.gameController=n,this.movingHandler=s,this.fallingFiguresProcessor=o,this.figuresSpawner=i,this.levelCounter=u,this.comboCounter=c,this.scoreCounter=l,this.statsCounter=h,this.gameData=d,this.tetrisSolver=m}start(e){this.gameData=e||S.makeSimple(),this.commandBus.run(new u(this.gameData)),this.commandBus.run(new c(this.gameData))}pause(){this.commandBus.run(new l(this.gameData))}}__webpack_require__(340).worker({solveTetris:async function(t){const r=new a;let n=new ve(t,r);return n.start(),await new Promise((t=>{r.on(e.FallingTickProcessed,(e=>{e.gameData.stats.figuresFallen>=1e6&&(n.pause(),t(e.gameData.stats.figuresFallen))})),r.on(e.GameOver,(e=>{t(e.gameData.stats.figuresFallen)}))}))}})})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,