(()=>{"use strict";var e,t,s;!function(e){e[e.FallingTickProcessed=0]="FallingTickProcessed",e[e.GameOver=1]="GameOver",e[e.FiguresMoved=2]="FiguresMoved",e[e.LevelUp=3]="LevelUp",e[e.FiguresSpawned=4]="FiguresSpawned"}(e||(e={}));class a{gameData;transferredToMatrixFigures;squashedLines;droppedLines;constructor(e,t,s,a){this.gameData=e,this.transferredToMatrixFigures=t,this.squashedLines=s,this.droppedLines=a}getEventType(){return e.FallingTickProcessed}}class i{gameData;constructor(e){this.gameData=e}getEventType(){return e.GameOver}}class n{gameData;constructor(e){this.gameData=e}getEventType(){return e.FiguresMoved}}class r{gameData;newFigures;constructor(e,t){this.gameData=e,this.newFigures=t}getEventType(){return e.FiguresSpawned}}class l{handlers=new Map;on(e,t,s=!0){let a=this.handlers.get(e)||[];s&&a.some((e=>e===t))||(a.push(t),this.handlers.set(e,a))}off(e,t){let s=this.handlers.get(e)||[],a=s.indexOf(t);a>0&&s.splice(a,1),this.handlers.set(e,s)}fire(e){(this.handlers.get(e.getEventType())||[]).forEach((t=>{t(e)}))}}!function(e){e[e.InitGame=0]="InitGame",e[e.ResumeGame=1]="ResumeGame",e[e.PauseGame=2]="PauseGame",e[e.FiguresFallTick=3]="FiguresFallTick",e[e.GameOver=4]="GameOver",e[e.Render=5]="Render",e[e.MoveLeft=6]="MoveLeft",e[e.MoveRight=7]="MoveRight",e[e.TurnClockwise=8]="TurnClockwise",e[e.MoveDown=9]="MoveDown",e[e.FiguresFallDown=10]="FiguresFallDown",e[e.MoveToX=11]="MoveToX",e[e.MoveToY=12]="MoveToY",e[e.TurnToState=13]="TurnToState"}(t||(t={}));class o{gameData;constructor(e){this.gameData=e}getCommandType(){return t.InitGame}}class c{gameData;constructor(e){this.gameData=e}getCommandType(){return t.ResumeGame}}class u{gameData;constructor(e){this.gameData=e}getCommandType(){return t.PauseGame}}class m{gameData;constructor(e){this.gameData=e}getCommandType(){return t.FiguresFallTick}}class h{gameData;constructor(e){this.gameData=e}getCommandType(){return t.GameOver}}class d{gameData;constructor(e){this.gameData=e}getCommandType(){return t.Render}}class g{gameData;constructor(e){this.gameData=e}getCommandType(){return t.MoveLeft}}class p{gameData;constructor(e){this.gameData=e}getCommandType(){return t.MoveRight}}class f{gameData;constructor(e){this.gameData=e}getCommandType(){return t.TurnClockwise}}class w{gameData;constructor(e){this.gameData=e}getCommandType(){return t.MoveDown}}class v{gameData;x;constructor(e,t){this.gameData=e,this.x=t}getCommandType(){return t.MoveToX}}class F{gameData;y;constructor(e,t){this.gameData=e,this.y=t}getCommandType(){return t.MoveToY}}class T{gameData;turnState;constructor(e,t){this.gameData=e,this.turnState=t}getCommandType(){return t.TurnToState}}class C{gameData;constructor(e){this.gameData=e}getCommandType(){return t.FiguresFallDown}}class D{handlers=new Map;addHandler(e,t,s=!0){let a=this.handlers.get(e)||[];s&&a.some((e=>e===t))||(a.push(t),this.handlers.set(e,a))}removeHandler(e,t){let s=this.handlers.get(e)||[],a=s.indexOf(t);a>0&&s.splice(a,1),this.handlers.set(e,s)}run(e){(this.handlers.get(e.getCommandType())||[]).forEach((t=>{t(e)}))}}!function(e){e[e.One=0]="One",e[e.Two=1]="Two",e[e.Three=2]="Three",e[e.Four=3]="Four"}(s||(s={}));class M{getTurn(e){switch(e){case s.One:return this.getFirstTurn();case s.Two:return this.getSecondTurn();case s.Three:return this.getThirdTurn();case s.Four:return this.getForthTurn()}}}class B extends M{getNormalizedFigure(){let e=this.getFigure(),t=e.reduce(((e,t)=>Math.max(e,t.length)),0);return e.map((e=>{let s=e.length;return e.length=t,e.fill(!1,s-1,t-1)}))}getFirstTurn(){return this.getNormalizedFigure()}getSecondTurn(){let e=this.getNormalizedFigure(),t=[],s=e.length,a=e[0].length;for(let i=0;i<a;i++){t[i]=new Array(s).fill(!1);for(let a=0;a<s;a++)t[i][s-a-1]=e[a][i]}return t}getThirdTurn(){return this.getFirstTurn().reverse().map((e=>e.reverse()))}getForthTurn(){return this.getSecondTurn().reverse().map((e=>e.reverse()))}}class H extends B{getFigure(){return["###".split("").map((e=>"#"===e)),"-#-".split("").map((e=>"#"===e))]}}class x extends B{getFigure(){return["###".split("").map((e=>"#"===e)),"--#".split("").map((e=>"#"===e))]}}class S extends B{getFigure(){return["###".split("").map((e=>"#"===e)),"#--".split("").map((e=>"#"===e))]}}class y extends B{getFigure(){return["##".split("").map((e=>"#"===e)),"##".split("").map((e=>"#"===e))]}}class b extends B{getFigure(){return["####".split("").map((e=>"#"===e))]}}class E extends B{getFigure(){return["##-".split("").map((e=>"#"===e)),"-##".split("").map((e=>"#"===e))]}}class O extends B{getFigure(){return["-##".split("").map((e=>"#"===e)),"##-".split("").map((e=>"#"===e))]}}class G{x;y;constructor(e,t){this.x=e,this.y=t}}class P{figure;position;turnState;color;constructor(e,t,s,a){this.figure=e,this.position=t,this.turnState=s,this.color=a}}class k{fieldWidth;fieldHeight;figures;constructor(e,t,s){this.fieldWidth=e,this.fieldHeight=t,this.figures=s}}class R{figuresFallen=0;linesSquashed=0}class I{isInitialized;isGameOver;fallingFigures;matrix;nextTickTimeoutId;settings;level;score;combo;stats;constructor(e=!1,t=!1,s=[],a=[],i=setTimeout((()=>{})),n,r=1,l=0,o=0,c=new R){this.isInitialized=e,this.isGameOver=t,this.fallingFigures=s,this.matrix=a,this.nextTickTimeoutId=i,this.settings=n,this.level=r,this.score=l,this.combo=o,this.stats=c}static makeSimple(e=10,t=20){return new I(!1,!1,[],new Array(t).fill([]).map((t=>new Array(e).fill(!1))),setTimeout((()=>{})),new k(e,t,[new H,new x,new S,new y,new b,new E,new O]))}}class L{timingsHandler;eventBus;commandBus;gameData=I.makeSimple();constructor(e,s,a){this.timingsHandler=e,this.eventBus=s,this.commandBus=a,this.commandBus.addHandler(t.InitGame,this.initGameHandler.bind(this)),this.commandBus.addHandler(t.ResumeGame,this.resumeGameHandler.bind(this)),this.commandBus.addHandler(t.PauseGame,this.pauseGameHandler.bind(this)),this.commandBus.addHandler(t.GameOver,this.gameOverHandler.bind(this))}initGameHandler(t){this.gameData=t.gameData,this.gameData.isInitialized=!0,this.eventBus.on(e.FallingTickProcessed,this.onFallTickProcessed.bind(this))}resumeGameHandler(e){this.gameData.isGameOver||(this.gameData.isInitialized||this.commandBus.run(new o(e.gameData)),this.fallTick())}pauseGameHandler(e){this.gameData=e.gameData,clearTimeout(this.gameData.nextTickTimeoutId),this.commandBus.run(new d(this.gameData))}gameOverHandler(){this.gameData.isInitialized=!1,this.gameData.isGameOver=!0,clearTimeout(this.gameData.nextTickTimeoutId),this.eventBus.fire(new i(this.gameData))}fallTick(){this.commandBus.run(new m(this.gameData))}onFallTickProcessed(e){clearTimeout(this.gameData.nextTickTimeoutId);const t=this.timingsHandler.getDelayForNextTickMs(this.gameData);this.gameData.isGameOver||t==1/0||(this.gameData.nextTickTimeoutId=setTimeout(this.fallTick.bind(this),this.timingsHandler.getDelayForNextTickMs(this.gameData)))}}class q{static canFigureBePlaced(e,t,s){return e.every(((e,a)=>e.every(((e,i)=>{const n=t.y+a,r=t.x+i;return!e||n<0&&r>=0&&r<=s[0].length-1||n in s&&r in s[n]&&!s[n][r]}))))}}class X{filled;filledGameOver;empty;constructor(e,t,s){this.filled=e,this.filledGameOver=t,this.empty=s}}class j{containerElement;renderProjectionFigures;matrixCellColors;fallingFigureCellColors;projectionFigureCellColors;constructor(e,t=!0,s=new X("#007400","#780000","#fff"),a=new X("#007400","#780000",null),i=new X("#b8e5e3",null,null)){this.containerElement=e,this.renderProjectionFigures=t,this.matrixCellColors=s,this.fallingFigureCellColors=a,this.projectionFigureCellColors=i}}class A{filled;empty;constructor(e,t){this.filled=e,this.empty=t}}class z{renderSettings;commandBus;eventBus;cellsHtmlElementsMap=[];table;scoreDisplay;constructor(e,s,a){this.renderSettings=e,this.commandBus=s,this.eventBus=a,s.addHandler(t.InitGame,this.initHandler.bind(this)),s.addHandler(t.Render,this.renderCommandHandler.bind(this))}initHandler(t){this.table=z.createHtmlElement('<div style="float: left; display: table; border-collapse: collapse"></div>'),this.cellsHtmlElementsMap=[];for(let e=0;e<t.gameData.settings.fieldHeight;e++){let s=z.createHtmlElement('<div style="display: table-row"></div>');this.cellsHtmlElementsMap[e]=[];for(let a=0;a<t.gameData.settings.fieldWidth;a++){let t=z.createHtmlElement('<div style="display: table-cell; border: 1px solid #ccc; width: 20px; height: 20px"></div>');this.cellsHtmlElementsMap[e][a]=t,s.appendChild(t)}this.table.appendChild(s)}this.renderSettings.containerElement.innerHTML="",this.renderSettings.containerElement.appendChild(this.table),this.scoreDisplay=z.createHtmlElement('<div style="float: left; font-family: \'Helvetica Neue\', sans-serif; font-size: 20px; margin-left: 15px;">\n                Level: <span id="level"></span><br>\n                Score: <span id="score"></span><br>\n                Combo: <span id="combo"></span><br>\n                Figures fallen: <span id="figures_fallen"></span><br>\n                Lines squashed: <span id="lines_squashed"></span><br>\n            </div>'),this.renderSettings.containerElement.appendChild(this.scoreDisplay),this.renderSettings.containerElement.appendChild(z.createHtmlElement('<div style="clear: both"></div>')),this.eventBus.on(e.FallingTickProcessed,this.onFallTickProcessed.bind(this)),this.eventBus.on(e.GameOver,this.onGameOver.bind(this)),this.eventBus.on(e.FiguresMoved,this.onFiguresMoved.bind(this))}onFiguresMoved(e){this.renderState(e.gameData)}onFallTickProcessed(e){this.renderState(e.gameData)}onGameOver(e){this.renderState(e.gameData)}renderCommandHandler(e){this.renderState(e.gameData)}renderState(e){this.repaintMatrixCells(e.matrix,new G(0,0),e),this.renderSettings.renderProjectionFigures&&this.renderFallingFiguresProjection(e),this.renderFallingFigures(e),this.renderStats(e)}renderFallingFigures(e){e.fallingFigures.forEach((t=>{this.repaintFallingFiguresCells(t,e)}))}renderFallingFiguresProjection(e){e.fallingFigures.forEach((t=>{const s=t.figure.getTurn(t.turnState),a=t.position.x;let i=t.position.y;for(;q.canFigureBePlaced(s,new G(a,i+1),e.matrix);)i++;this.repaintProjectionFiguresCells(s,new G(a,i),e)}))}repaintMatrixCells(e,t,s){let a;a=s.isGameOver?new A(this.renderSettings.matrixCellColors.filledGameOver,this.renderSettings.matrixCellColors.empty):new A(this.renderSettings.matrixCellColors.filled,this.renderSettings.matrixCellColors.empty),this.repaintCells(e,t,a)}repaintFallingFiguresCells(e,t){let s;s=t.isGameOver?new A(this.renderSettings.fallingFigureCellColors.filledGameOver,this.renderSettings.fallingFigureCellColors.empty):new A(e.color||this.renderSettings.fallingFigureCellColors.filled,this.renderSettings.fallingFigureCellColors.empty),this.repaintCells(e.figure.getTurn(e.turnState),e.position,s)}repaintProjectionFiguresCells(e,t,s){let a;a=s.isGameOver?new A(this.renderSettings.projectionFigureCellColors.filledGameOver,this.renderSettings.projectionFigureCellColors.empty):new A(this.renderSettings.projectionFigureCellColors.filled,this.renderSettings.projectionFigureCellColors.empty),this.repaintCells(e,t,a)}repaintCells(e,t,s){e.forEach(((e,a)=>{e.forEach(((e,i)=>{const n=a+t.y,r=i+t.x;if(n in this.cellsHtmlElementsMap&&r in this.cellsHtmlElementsMap[n]){const t=e?s.filled:s.empty;null!==t&&(this.cellsHtmlElementsMap[n][r].style.background=t)}}))}))}renderStats(e){const t=document.getElementById("level"),s=document.getElementById("score"),a=document.getElementById("combo"),i=document.getElementById("figures_fallen"),n=document.getElementById("lines_squashed");null!==t&&(t.innerHTML=e.level.toString()),null!==s&&(s.innerHTML=e.score.toString()),null!==a&&(a.innerHTML=e.combo.toString()),null!==i&&(i.innerHTML=e.stats.figuresFallen.toString()),null!==n&&(n.innerHTML=e.stats.linesSquashed.toString())}static createHtmlElement(e){let t=document.createElement("div");if(t.innerHTML=e,t.children.length>1||null===t.firstElementChild)throw"The HTML must contain only one child";if(!(t.firstElementChild instanceof HTMLElement))throw"Something went wrong while trying to get HTMLElement child from div";return t.firstElementChild}}class N{transferredFigures=[];isGameOver=!1}class W{commandBus;eventBus;constructor(e,s){this.commandBus=e,this.eventBus=s,this.commandBus.addHandler(t.FiguresFallTick,this.processFiguresFallTickCommand.bind(this)),this.commandBus.addHandler(t.FiguresFallDown,this.processDropFiguresCommand.bind(this))}processFiguresFallTickCommand(e){const t=this.fallFiguresForOneCell(e.gameData);let s=this.squashLines(e.gameData.matrix);t.isGameOver&&this.commandBus.run(new h(e.gameData)),this.eventBus.fire(new a(e.gameData,t.transferredFigures,s,0))}processDropFiguresCommand(e){let t=new N,s=0;for(;e.gameData.fallingFigures.length>0;){const a=this.fallFiguresForOneCell(e.gameData);t.transferredFigures.push(...a.transferredFigures),t.isGameOver=t.isGameOver||a.isGameOver,s++}let i=this.squashLines(e.gameData.matrix);t.isGameOver&&this.commandBus.run(new h(e.gameData)),this.eventBus.fire(new a(e.gameData,t.transferredFigures,i,s-1))}fallFiguresForOneCell(e){let t=new N;return e.fallingFigures.forEach(((s,a)=>{if(this.figureCanFall(e.matrix,s))s.position.y++;else{let i=this.transferFigureToMatrix(e.matrix,s);t.transferredFigures.push(...e.fallingFigures.splice(a,1)),t.isGameOver=t.isGameOver||i}})),t}figureCanFall(e,t){return q.canFigureBePlaced(t.figure.getTurn(t.turnState),new G(t.position.x,t.position.y+1),e)}transferFigureToMatrix(e,t){let s=!1;return t.figure.getTurn(t.turnState).forEach(((a,i)=>{a.forEach(((a,n)=>{if(!a)return;let r=t.position.x+n,l=t.position.y+i;l in e&&r in e[l]&&!e[l][r]?e[l][r]=!0:s=!0}))})),s}squashLines(e){let t=[];return e.forEach(((e,s)=>{e.every((e=>e))&&t.push(s)}),0),t.forEach((t=>{e.splice(t,1),e.unshift(new Array(e[0].length).fill(!1))})),t}}class _{static ToArray(e){return Object.keys(e).map((e=>Number.parseInt(e))).filter((e=>!Number.isNaN(e)))}static GetRandom(e){const t=_.ToArray(e);return t[Math.floor(Math.random()*t.length)]}}class Y{eventBus;commandBus;constructor(e,s){this.eventBus=e,this.commandBus=s,this.commandBus.addHandler(t.InitGame,this.initHandler.bind(this))}initHandler(t){this.eventBus.on(e.FallingTickProcessed,this.processOnFallTick.bind(this))}processOnFallTick(e){this.addFigure(e.gameData)}addFigure(e){if(e.fallingFigures.length>0||e.isGameOver)return;const t=Math.floor(Math.random()*e.settings.figures.length),a=e.settings.figures[t],i=_.GetRandom(s),n=a.getTurn(i),l=Math.max(...n.map((e=>e.length))),o=new G(Math.ceil(e.settings.fieldWidth/2-l/2)-1,-n.length),c=new P(a,o,i);e.fallingFigures.push(c),this.eventBus.fire(new r(e,[c]))}}class U{commandBus;eventBus;constructor(e,s){this.commandBus=e,this.eventBus=s,this.commandBus.addHandler(t.MoveLeft,this.processMoveLeftCommand.bind(this)),this.commandBus.addHandler(t.MoveRight,this.processMoveRightCommand.bind(this)),this.commandBus.addHandler(t.MoveDown,this.processMoveDownCommand.bind(this)),this.commandBus.addHandler(t.TurnClockwise,this.processTurnClockwiseCommand.bind(this)),this.commandBus.addHandler(t.MoveToX,this.processMoveToXCommand.bind(this)),this.commandBus.addHandler(t.MoveToY,this.processMoveToYCommand.bind(this)),this.commandBus.addHandler(t.TurnToState,this.processTurnToStateCommand.bind(this))}processMoveLeftCommand(e){e.gameData.fallingFigures.forEach((t=>{q.canFigureBePlaced(t.figure.getTurn(t.turnState),new G(t.position.x-1,t.position.y),e.gameData.matrix)&&t.position.x--})),this.eventBus.fire(new n(e.gameData))}processMoveRightCommand(e){e.gameData.fallingFigures.forEach((t=>{q.canFigureBePlaced(t.figure.getTurn(t.turnState),new G(t.position.x+1,t.position.y),e.gameData.matrix)&&t.position.x++})),this.eventBus.fire(new n(e.gameData))}processTurnClockwiseCommand(e){const t=_.ToArray(s);e.gameData.fallingFigures.forEach((s=>{let a=s.turnState+1;a in t||(a=t[0]),q.canFigureBePlaced(s.figure.getTurn(a),s.position,e.gameData.matrix)&&(s.turnState=a)})),this.eventBus.fire(new n(e.gameData))}processMoveDownCommand(e){this.commandBus.run(new m(e.gameData))}processMoveToXCommand(e){e.x<0||e.x>e.gameData.settings.fieldWidth-1||(e.gameData.fallingFigures.forEach((t=>{const s=e.x>t.position.x?1:-1;for(;t.position.x!==e.x&&q.canFigureBePlaced(t.figure.getTurn(t.turnState),new G(t.position.x+s,t.position.y),e.gameData.matrix);)t.position.x+=s})),this.eventBus.fire(new n(e.gameData)))}processMoveToYCommand(e){e.y<0||(e.gameData.fallingFigures.forEach((t=>{for(;t.position.y<e.y&&q.canFigureBePlaced(t.figure.getTurn(t.turnState),new G(t.position.x,t.position.y+1),e.gameData.matrix);)t.position.y++})),this.eventBus.fire(new n(e.gameData)))}processTurnToStateCommand(e){e.gameData.fallingFigures.forEach((t=>{q.canFigureBePlaced(t.figure.getTurn(e.turnState),t.position,e.gameData.matrix)&&(t.turnState=e.turnState)})),this.eventBus.fire(new n(e.gameData))}}class V{commandBus;eventBus;squashedRowsRewardThresholdsMap;rewardOnCombo;constructor(e,s,a=new Map([[1,100],[2,300],[3,500],[4,800]]),i=50){this.commandBus=e,this.eventBus=s,this.squashedRowsRewardThresholdsMap=a,this.rewardOnCombo=i,e.addHandler(t.InitGame,this.initGameHandler.bind(this))}initGameHandler(t){this.eventBus.on(e.FallingTickProcessed,this.onFallingTickProcessed.bind(this))}onFallingTickProcessed(e){if(e.squashedLines.length<0)return;let t=0;this.squashedRowsRewardThresholdsMap.forEach(((s,a)=>{a>e.squashedLines.length||(t=s)})),e.gameData.score+=t*e.gameData.level+this.rewardOnCombo*Math.max(0,e.gameData.combo-1)*e.gameData.level+2*e.droppedLines*e.gameData.level}}class J{eventBus;commandBus;levelIncreaseOnSquashedRowsNumber;maxLevels;squashedRowsCounter=0;constructor(e,s,a,i){this.eventBus=e,this.commandBus=s,this.levelIncreaseOnSquashedRowsNumber=a,this.maxLevels=i,this.commandBus.addHandler(t.InitGame,this.processInitGameCommand.bind(this))}processInitGameCommand(t){this.eventBus.on(e.FallingTickProcessed,this.onFallTickProcessed.bind(this))}onFallTickProcessed(e){0!==e.squashedLines.length&&(this.squashedRowsCounter++,this.squashedRowsCounter>=this.levelIncreaseOnSquashedRowsNumber&&(this.squashedRowsCounter=0,e.gameData.level=Math.min(this.maxLevels,e.gameData.level+1)))}}class K{commandBus;eventBus;constructor(e,s){this.commandBus=e,this.eventBus=s,e.addHandler(t.InitGame,this.initGameHandler.bind(this))}initGameHandler(t){this.eventBus.on(e.FallingTickProcessed,this.onFallTickProcessed.bind(this))}onFallTickProcessed(e){e.transferredToMatrixFigures.length<=0||(e.squashedLines.length>0?e.gameData.combo+=1:e.gameData.combo=0)}}class Q{delayMs;constructor(e){this.delayMs=e}getDelayForNextTickMs(e){return this.delayMs}}class Z{commandBus;eventBus;constructor(e,s){this.commandBus=e,this.eventBus=s,e.addHandler(t.InitGame,this.initGameHandler.bind(this))}initGameHandler(t){this.eventBus.on(e.FallingTickProcessed,this.onFallingTickProcessed.bind(this))}onFallingTickProcessed(e){e.gameData.stats.figuresFallen+=e.transferredToMatrixFigures.length,e.gameData.stats.linesSquashed+=e.squashedLines.length}}class ${commandBus;constructor(e){this.commandBus=e,this.commandBus.addHandler(t.InitGame,this.processInitGameCommand.bind(this))}processInitGameCommand(e){window.onkeydown=t=>{"ArrowLeft"===t.code?this.commandBus.run(new g(e.gameData)):"ArrowRight"===t.code?this.commandBus.run(new p(e.gameData)):"ArrowUp"===t.code?this.commandBus.run(new f(e.gameData)):"ArrowDown"===t.code||"ArrowDown"===t.code?this.commandBus.run(new w(e.gameData)):"Space"===t.code&&this.commandBus.run(new C(e.gameData))}}}class ee{eventBus;commandBus;gameController;movingHandler;keyboardController;fallingFiguresProcessor;figuresSpawner;levelCounter;comboCounter;scoreCounter;statsCounter;tableRenderer;gameData;constructor(e=new l,t=new D,s=new L(new Q(2e3),e,t),a=new U(t,e),i=new $(t),n=new W(t,e),r=new Y(e,t),o=new J(e,t,8,15),c=new K(t,e),u=new V(t,e),m=new Z(t,e),h=new z(new j(document.body),t,e),d=I.makeSimple()){this.eventBus=e,this.commandBus=t,this.gameController=s,this.movingHandler=a,this.keyboardController=i,this.fallingFiguresProcessor=n,this.figuresSpawner=r,this.levelCounter=o,this.comboCounter=c,this.scoreCounter=u,this.statsCounter=m,this.tableRenderer=h,this.gameData=d}start(e){e=e||I.makeSimple(),this.commandBus.run(new o(e)),this.commandBus.run(new c(e))}resume(){this.commandBus.run(new c(this.gameData))}pause(){this.commandBus.run(new u(this.gameData))}}class te{target;_persisted;constructor(e,t){this.target=e,this._persisted=t}get persisted(){return this._persisted}}class se{target;_persisted;constructor(e,t){this.target=e,this._persisted=t}get persisted(){return this._persisted}}class ae{target;constructor(e){this.target=e}get persisted(){return!1}}class ie{get persisted(){return!1}}class ne{figuresTargetStates;placingSteps;constructor(e,t){this.figuresTargetStates=e,this.placingSteps=t}}class re{isOpened;cells;constructor(e,t){this.isOpened=e,this.cells=t}}class le{static collectHoles(e){let t=[];class s{cells;previousRowOpenXs;currentRowOpenXs;isOpened;continues;constructor(e=[],t=[],s=[],a=!1,i=!1){this.cells=e,this.previousRowOpenXs=t,this.currentRowOpenXs=s,this.isOpened=a,this.continues=i}}let a=[],i=new Set;return e.forEach(((n,r)=>{a.forEach((e=>e.continues=!1)),n.forEach(((t,n)=>{if(t)i.add(n);else if(i.has(n)){let t=a.find((e=>e.previousRowOpenXs.some((e=>e===n))||e.currentRowOpenXs.length>0&&e.currentRowOpenXs[e.currentRowOpenXs.length-1]===n));void 0===t&&(t=new s,a.push(t)),t.currentRowOpenXs.push(n),t.cells.push(new G(n,r)),t.continues=!0,t.isOpened=t.isOpened||this.doesTheWayOutFromHoleExists(e,new G(n,r),i,[[!0,!0]])}}));let l=[];a.forEach(((s,a)=>{s.continues&&(s.previousRowOpenXs=s.currentRowOpenXs,s.currentRowOpenXs=[]),s.continues&&r!=e.length-1||(t.push(new re(s.isOpened,s.cells)),l.push(a))})),l.reverse().forEach((e=>a.splice(e,1)))})),t}static doesTheWayOutFromHoleExists(e,t,s,a){return void 0!==this.findTheWayOutFromHole(e,t,s,a)}static findTheWayOutFromHole(e,t,s,a){s instanceof Map&&(s=le.convertCoveredColumnsToXs(s));for(let i=t.x-1;i>=0&&q.canFigureBePlaced(a,new G(i,t.y),e);i--){let e=!0;for(let t=i+a[0].length-1;t>=i;t--)if(s.has(t)){e=!1;break}if(e)return i}for(let i=t.x+1;i<e[0].length&&q.canFigureBePlaced(a,new G(i,t.y),e);i++){let e=!0;for(let t=i;t<i+a[0].length;t++)if(s.has(t)){e=!1;break}if(e)return i}}static collectCoveredColumnsXs(e,t){return le.convertCoveredColumnsToXs(le.collectCoveredColumns(e,t))}static convertCoveredColumnsToXs(e){return new Set([...e.keys()])}static collectCoveredColumns(e,t){let s=new Map;return e.some(((a,i)=>(a.forEach(((e,t)=>{e&&s.set(t,i)})),void 0!==t&&i>=t||s.size==e[0].length))),s}}class oe{gameData;originalHoles;originalCoveredColumns;imaginableMatrix;imaginableCoveredColumns;squashedLinesCount;constructor(e,t,s,a,i,n){this.gameData=e,this.originalHoles=t,this.originalCoveredColumns=s,this.imaginableMatrix=a,this.imaginableCoveredColumns=i,this.squashedLinesCount=n}}class ce extends Error{}class ue extends ce{}class me{commandBus;scoreCalculator;constructor(e,t){this.commandBus=e,this.scoreCalculator=t}resolve(e){if(0===e.fallingFigures.length)return;if(1!==e.fallingFigures.length)throw new ue;const t=e.fallingFigures[0];let s=-1/0,a=new ne(new Map,[]);return this.processStates(e,((e,i,n)=>{i>s&&(s=i,a=new ne(new Map([[t,e]]),n))})),a}processStates(e,t,a){const i=e.fallingFigures[0];let n=_.ToArray(s);for(;n[0]!==i.turnState;)n.unshift(n.pop());let r=new Map,l=new Set;n.forEach((e=>{let t=i.figure.getTurn(e),s=t.map((e=>e.map((e=>e?"1":"0")).join())).join("\n");l.has(s)||(l.add(s),r.set(e,t))}));const o=le.collectHoles(e.matrix),c=le.collectCoveredColumns(e.matrix);r.forEach(((s,n)=>{for(let r=0;r<e.settings.fieldWidth-s[0].length+1;r++){let[l,u]=this.imagineFigureDrop(e.matrix,s,r),m=new G(r,l),h=this.squashLines(u),d=new P(i.figure,m,n);a&&a(d);let g=le.collectCoveredColumns(u),p=new oe(e,o,c,u,g,h),f=this.scoreCalculator.calculateScore(p),w=this.makeSimplePlacingSteps(d);t&&t(d,f,w)}})),o.filter((e=>e.isOpened&&e.cells.length>0)).forEach((s=>{let n=e.settings.fieldHeight,l=e.settings.fieldWidth,u=-1,m=-1;s.cells.forEach((e=>{n=Math.min(n,e.y),l=Math.min(l,e.x),u=Math.max(u,e.y),m=Math.max(m,e.x)})),r.forEach(((s,r)=>{for(let h=Math.max(n-s.length+1,0);h<=u;h++)for(let n=Math.max(l-s[0].length+1,0);n<=m;n++){let l=new G(n,h),u=new P(i.figure,l,r);if(a&&a(u),q.canFigureBePlaced(s,l,e.matrix)){let a=this.makePushInPlacingSteps(e,u,c);if(void 0!==a){let i=this.imagineFigurePlacing(e.matrix,s,l),n=this.squashLines(i),r=le.collectCoveredColumns(i),m=new oe(e,o,c,i,r,n),h=this.scoreCalculator.calculateScore(m);t&&t(u,h,a)}}}}))}))}squashLines(e){let t=[];return e.forEach(((e,s)=>{e.every((e=>e))&&t.push(s)}),0),t.forEach((t=>{e.splice(t,1),e.unshift(new Array(e[0].length).fill(!1))})),t.length}imagineFigureDrop(e,t,s){let a=-t.length;for(;q.canFigureBePlaced(t,new G(s,a+1),e);)a++;return[a,this.imagineFigurePlacing(e,t,new G(s,a))]}imagineFigurePlacing(e,t,s){let a=structuredClone(e);return t.forEach(((e,t)=>{e.forEach(((e,i)=>{const n=s.y+t,r=s.x+i;n in a&&r in a[n]&&e&&(a[n][r]=!0)}))})),a}makePushInPlacingSteps(e,t,s){let a=t.figure.getTurn(t.turnState),i=le.findTheWayOutFromHole(e.matrix,t.position,s,a);if(void 0!==i)return[new te(t.turnState,!0),new se(i,!1),new ae(t.position.y),new se(t.position.x,!0),new ie]}makeSimplePlacingSteps(e){return[new te(e.turnState,!0),new se(e.position.x,!0),new ie]}}class he{calculators;constructor(e){this.calculators=e}calculateScore(e){return this.calculators.reduce(((t,s)=>t+s.calculateScore(e)),0)}}class de{multiplier;constructor(e){this.multiplier=e}}class ge{params;constructor(e=new de(5)){this.params=e}calculateScore(e){return e.squashedLinesCount*this.params.multiplier}}class pe{minimumValuableHeight;powMultiplier;multiplier;constructor(e,t,s){this.minimumValuableHeight=e,this.powMultiplier=t,this.multiplier=s}}class fe{params;constructor(e=new pe(5,1,1)){this.params=e}calculateScore(e){const t=e.gameData.settings.fieldHeight,s=e.gameData.settings.fieldWidth,[a,i]=this.calculateFillableSpace(e.imaginableMatrix,s);let n=0;return i>this.params.minimumValuableHeight&&(n=-a*Math.pow(a,a/(t*s)*this.params.powMultiplier)*this.params.multiplier),n}calculateFillableSpace(e,t){let s=new Set,a=0,i=0;return e.every((e=>(e.forEach(((e,t)=>{e&&s.add(t)})),e.forEach(((e,t)=>{!e&&s.size>0&&!s.has(t)&&a++})),s.size<t&&(s.size>0&&i++,!0)))),[a,i]}}class we{countDecreaseMultiplier;countIncreaseMultiplier;coveredHeightPowMultiplier;coveredHeightMultiplier;constructor(e,t,s,a){this.countDecreaseMultiplier=e,this.countIncreaseMultiplier=t,this.coveredHeightPowMultiplier=s,this.coveredHeightMultiplier=a}}class ve{params;constructor(e=new we(150,70,1,5)){this.params=e}calculateScore(e){const[t,s]=this.calculateHolesAndCoveredHeight(e.imaginableMatrix,e.gameData.matrix),a=e.originalHoles.length-t;let i=a>0?a*this.params.countDecreaseMultiplier:a*this.params.countIncreaseMultiplier;return 0!==s&&0!==t&&(i-=s*Math.pow(s,s/(e.gameData.settings.fieldHeight*t)*this.params.coveredHeightPowMultiplier)*this.params.coveredHeightMultiplier),i}calculateHolesAndCoveredHeight(e,t){const[s,a]=this.calculateTheHighestHoleCoveredY(t);let i=new Map,n=0,r=0;return e.forEach(((e,t)=>{e.forEach(((e,l)=>{e&&!i.has(l)&&i.set(l,t);let o=i.get(l);void 0===o||e||(r++,void 0!==s&&void 0!==a&&(t<s?n+=t-o:o<a&&(n+=a-o)))}))})),[r,n]}calculateTheHighestHoleCoveredY(e){let t,s,a=new Map;return e.some(((e,i)=>e.some(((e,n)=>{e&&!a.has(n)&&a.set(n,i);let r=a.get(n);return void 0!==r&&!e&&(s=i,t=r,!0)})))),[s,t]}}class Fe{powMultiplier;multiplier;constructor(e,t){this.powMultiplier=e,this.multiplier=t}}class Te{params;constructor(e=new Fe(1,3)){this.params=e}calculateScore(e){const t=this.calculateHeight(e.imaginableMatrix);return-t*Math.pow(t,t/e.gameData.settings.fieldHeight*this.params.powMultiplier)*this.params.multiplier}calculateHeight(e){let t=-1;return e.every(((e,s)=>!!e.every((e=>!e))&&(t=s,!0))),e.length-t-1}}class Ce{minimumValuableHeight;countMultiplier;heightPowMultiplier;heightMultiplier;constructor(e,t,s,a){this.minimumValuableHeight=e,this.countMultiplier=t,this.heightPowMultiplier=s,this.heightMultiplier=a}}class De{params;constructor(e=new Ce(3,70,1,7)){this.params=e}calculateScore(e){const[t,s]=this.calculateTunnelsExceptUncovered(e.imaginableMatrix,e.gameData.matrix);return 0===s?0:-s*this.params.countMultiplier-t*Math.pow(t,t/(e.gameData.settings.fieldHeight*s)*this.params.heightPowMultiplier)*this.params.heightMultiplier}calculateTunnelsExceptUncovered(e,t){let s=new Set;t.every((e=>{e.forEach(((e,t)=>{e&&s.add(t)}))}));let a=new Set,i=new Map;const n=e[0].length;e.every(((e,t)=>(e.forEach(((e,t)=>{e&&a.add(t)})),e.forEach(((e,t)=>{e||a.has(t)||s.has(t)||0!==t&&!a.has(t-1)||t!==n-1&&!a.has(t+1)||i.set(t,(i.get(t)||0)+1)})),a.size<n)));let r=0,l=0;return i.forEach((e=>{e>=this.params.minimumValuableHeight&&(r+=e,l++)})),[r,l]}}class Me{eventBus;commandBus;figurePlacingResolver;figurePlacingPerformer;constructor(e,s,a,i){this.eventBus=e,this.commandBus=s,this.figurePlacingResolver=a,this.figurePlacingPerformer=i,this.commandBus.addHandler(t.InitGame,this.initGameHandler.bind(this))}initGameHandler(t){this.eventBus.on(e.FiguresSpawned,this.onFiguresSpawned.bind(this))}onFiguresSpawned(e){const t=this.figurePlacingResolver.resolve(e.gameData);this.figurePlacingPerformer.place(e.gameData,t)}}class Be extends Error{}class He extends Be{}class xe extends Be{}class Se extends Be{}class ye{commandBus;constructor(e){this.commandBus=e}place(e,t){"undefined"!=typeof setImmediate?setImmediate((()=>this.placeImpl(e,t))):setTimeout((()=>this.placeImpl(e,t)),0)}placeImpl(e,t){if(0===e.fallingFigures.length)return;if(1!==e.fallingFigures.length)throw new He;if(void 0===t)return;const s=e.fallingFigures[0],a=t.figuresTargetStates.get(s);if(a){if(s.figure!==a.figure)throw new xe("Both of the original and the target falling figures must have the same figure in it.");t.placingSteps.forEach((t=>{if(t instanceof te)this.commandBus.run(new T(e,t.target));else if(t instanceof se)this.commandBus.run(new v(e,t.target));else if(t instanceof ae)this.commandBus.run(new F(e,t.target));else{if(!(t instanceof ie))throw new Se("Unknown step "+t.constructor.name);this.commandBus.run(new C(e))}}))}}}class be{static initSolver(e,t){return new Me(e,t,new me(t,new he([new fe,new Te,new ve,new ge,new De])),new ye(t))}}document.addEventListener("DOMContentLoaded",(()=>{const e=new l,t=new D;let s=new ee(e,t);be.initSolver(e,t),s.start()}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,