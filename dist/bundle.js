(()=>{"use strict";var e;!function(e){e[e.FallingTickProcessed=0]="FallingTickProcessed",e[e.GameOver=1]="GameOver",e[e.FiguresMoved=2]="FiguresMoved",e[e.LevelUp=3]="LevelUp",e[e.FiguresSpawned=4]="FiguresSpawned"}(e||(e={}));var t,n=function(){function t(e,t,n,i){this.gameData=e,this.transferredToMatrixFigures=t,this.squashedLines=n,this.droppedLines=i}return t.prototype.getEventType=function(){return e.FallingTickProcessed},t}(),i=function(){function t(e){this.gameData=e}return t.prototype.getEventType=function(){return e.GameOver},t}(),r=function(){function t(e){this.gameData=e}return t.prototype.getEventType=function(){return e.FiguresMoved},t}(),o=function(){function t(e,t){this.gameData=e,this.newFigures=t}return t.prototype.getEventType=function(){return e.FiguresSpawned},t}(),a=function(){function e(){this.handlers=new Map}return e.prototype.on=function(e,t,n){void 0===n&&(n=!0);var i=this.handlers.get(e)||[];n&&i.some((function(e){return e===t}))||(i.push(t),this.handlers.set(e,i))},e.prototype.off=function(e,t){var n=this.handlers.get(e)||[],i=n.indexOf(t);i>0&&n.splice(i,1),this.handlers.set(e,n)},e.prototype.fire=function(e){(this.handlers.get(e.getEventType())||[]).forEach((function(t){t(e)}))},e}();!function(e){e[e.InitGame=0]="InitGame",e[e.ResumeGame=1]="ResumeGame",e[e.PauseGame=2]="PauseGame",e[e.FiguresFallTick=3]="FiguresFallTick",e[e.GameOver=4]="GameOver",e[e.Render=5]="Render",e[e.MoveLeft=6]="MoveLeft",e[e.MoveRight=7]="MoveRight",e[e.TurnClockwise=8]="TurnClockwise",e[e.MoveDown=9]="MoveDown",e[e.FiguresFallDown=10]="FiguresFallDown"}(t||(t={}));var s,u,l=function(){function e(e){this.gameData=e}return e.prototype.getCommandType=function(){return t.InitGame},e}(),c=function(){function e(e){this.gameData=e}return e.prototype.getCommandType=function(){return t.ResumeGame},e}(),h=function(){function e(e){this.gameData=e}return e.prototype.getCommandType=function(){return t.PauseGame},e}(),f=function(){function e(e){this.gameData=e}return e.prototype.getCommandType=function(){return t.FiguresFallTick},e}(),d=function(){function e(e){this.gameData=e}return e.prototype.getCommandType=function(){return t.GameOver},e}(),m=function(){function e(e){this.gameData=e}return e.prototype.getCommandType=function(){return t.Render},e}(),p=function(){function e(e){this.gameData=e}return e.prototype.getCommandType=function(){return t.MoveLeft},e}(),g=function(){function e(e){this.gameData=e}return e.prototype.getCommandType=function(){return t.MoveRight},e}(),v=function(){function e(e){this.gameData=e}return e.prototype.getCommandType=function(){return t.TurnClockwise},e}(),y=function(){function e(e){this.gameData=e}return e.prototype.getCommandType=function(){return t.MoveDown},e}(),w=function(){function e(e){this.gameData=e}return e.prototype.getCommandType=function(){return t.FiguresFallDown},e}(),F=function(){function e(){this.handlers=new Map}return e.prototype.addHandler=function(e,t,n){void 0===n&&(n=!0);var i=this.handlers.get(e)||[];n&&i.some((function(e){return e===t}))||(i.push(t),this.handlers.set(e,i))},e.prototype.removeHandler=function(e,t){var n=this.handlers.get(e)||[],i=n.indexOf(t);i>0&&n.splice(i,1),this.handlers.set(e,n)},e.prototype.run=function(e){(this.handlers.get(e.getCommandType())||[]).forEach((function(t){t(e)}))},e}(),T=(s=function(e,t){return s=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},s(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}s(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});!function(e){e[e.One=0]="One",e[e.Two=1]="Two",e[e.Three=2]="Three",e[e.Four=3]="Four"}(u||(u={}));var D=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return T(t,e),t.prototype.getNormalizedFigure=function(){var e=this.getFigure(),t=e.reduce((function(e,t){return Math.max(e,t.length)}),0);return e.map((function(e){var n=e.length;return e.length=t,e.fill(!1,n-1,t-1)}))},t.prototype.getFirstTurn=function(){return this.getNormalizedFigure()},t.prototype.getSecondTurn=function(){for(var e=this.getNormalizedFigure(),t=[],n=e.length,i=e[0].length,r=0;r<i;r++){t[r]=new Array(n).fill(!1);for(var o=0;o<n;o++)t[r][n-o-1]=e[o][r]}return t},t.prototype.getThirdTurn=function(){return this.getFirstTurn().reverse().map((function(e){return e.reverse()}))},t.prototype.getForthTurn=function(){return this.getSecondTurn().reverse().map((function(e){return e.reverse()}))},t}(function(){function e(){}return e.prototype.getTurn=function(e){switch(e){case u.One:return this.getFirstTurn();case u.Two:return this.getSecondTurn();case u.Three:return this.getThirdTurn();case u.Four:return this.getForthTurn()}},e}()),C=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return T(t,e),t.prototype.getFigure=function(){return["###".split("").map((function(e){return"#"===e})),"-#-".split("").map((function(e){return"#"===e}))]},t}(D),S=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return T(t,e),t.prototype.getFigure=function(){return["###".split("").map((function(e){return"#"===e})),"--#".split("").map((function(e){return"#"===e}))]},t}(D),B=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return T(t,e),t.prototype.getFigure=function(){return["###".split("").map((function(e){return"#"===e})),"#--".split("").map((function(e){return"#"===e}))]},t}(D),M=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return T(t,e),t.prototype.getFigure=function(){return["##".split("").map((function(e){return"#"===e})),"##".split("").map((function(e){return"#"===e}))]},t}(D),H=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return T(t,e),t.prototype.getFigure=function(){return["####".split("").map((function(e){return"#"===e}))]},t}(D),b=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return T(t,e),t.prototype.getFigure=function(){return["##-".split("").map((function(e){return"#"===e})),"-##".split("").map((function(e){return"#"===e}))]},t}(D),x=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return T(t,e),t.prototype.getFigure=function(){return["-##".split("").map((function(e){return"#"===e})),"##-".split("").map((function(e){return"#"===e}))]},t}(D),E=function(e,t){this.x=e,this.y=t},G=function(e,t,n,i){void 0===i&&(i=void 0),this.figure=e,this.position=t,this.turnState=n,this.color=i},k=function(e,t,n){this.fieldWidth=e,this.fieldHeight=t,this.figures=n},O=function(){this.figuresFallen=0,this.linesSquashed=0},P=function(){function e(e,t,n,i,r,o,a,s,u,l){void 0===e&&(e=!1),void 0===t&&(t=!1),void 0===n&&(n=[]),void 0===i&&(i=[]),void 0===r&&(r=setTimeout((function(){}))),void 0===a&&(a=1),void 0===s&&(s=0),void 0===u&&(u=0),void 0===l&&(l=new O),this.isInitialized=e,this.isGameOver=t,this.fallingFigures=n,this.matrix=i,this.nextTickTimeoutId=r,this.settings=o,this.level=a,this.score=s,this.combo=u,this.stats=l}return e.makeSimple=function(t,n){return void 0===t&&(t=10),void 0===n&&(n=20),new e(!1,!1,[],new Array(n).fill([]).map((function(e){return new Array(t).fill(!1)})),setTimeout((function(){})),new k(t,n,[new C,new S,new B,new M,new H,new b,new x]))},e}(),I=function(){function n(e,n,i){this.timingsHandler=e,this.eventBus=n,this.commandBus=i,this.gameData=P.makeSimple(),this.commandBus.addHandler(t.InitGame,this.initGameHandler.bind(this)),this.commandBus.addHandler(t.ResumeGame,this.resumeGameHandler.bind(this)),this.commandBus.addHandler(t.PauseGame,this.pauseGameHandler.bind(this)),this.commandBus.addHandler(t.GameOver,this.gameOverHandler.bind(this))}return n.prototype.initGameHandler=function(t){this.gameData=t.gameData,this.gameData.isInitialized=!0,this.eventBus.on(e.FallingTickProcessed,this.onFallTickProcessed.bind(this))},n.prototype.resumeGameHandler=function(e){this.gameData.isGameOver||(this.gameData.isInitialized||this.commandBus.run(new l(e.gameData)),this.fallTick())},n.prototype.pauseGameHandler=function(e){this.gameData=e.gameData,clearTimeout(this.gameData.nextTickTimeoutId),this.commandBus.run(new m(this.gameData))},n.prototype.gameOverHandler=function(){this.gameData.isInitialized=!1,this.gameData.isGameOver=!0,clearTimeout(this.gameData.nextTickTimeoutId),this.eventBus.fire(new i(this.gameData))},n.prototype.fallTick=function(){this.commandBus.run(new f(this.gameData))},n.prototype.onFallTickProcessed=function(e){clearTimeout(this.gameData.nextTickTimeoutId),this.gameData.isGameOver||(this.gameData.nextTickTimeoutId=setTimeout(this.fallTick.bind(this),this.timingsHandler.getDelayForNextTickMs(this.gameData)))},n}(),L=function(){function e(){}return e.canFigureBePlaced=function(e,t,n){return e.every((function(e,i){return e.every((function(e,r){var o=t.y+i,a=t.x+r;return!e||o<0&&a>=0&&a<=n[0].length-1||o in n&&a in n[o]&&!n[o][a]}))}))},e}(),R=function(e,t,n){this.filled=e,this.filledGameOver=t,this.empty=n},_=function(e,t,n,i,r){void 0===t&&(t=!0),void 0===n&&(n=new R("#007400","#780000","#fff")),void 0===i&&(i=new R("#007400","#780000",null)),void 0===r&&(r=new R("#b8e5e3",null,null)),this.containerElement=e,this.renderProjectionFigures=t,this.matrixCellColors=n,this.fallingFigureCellColors=i,this.projectionFigureCellColors=r},q=function(e,t){this.filled=e,this.empty=t},j=function(){function n(e,n,i){this.renderSettings=e,this.commandBus=n,this.eventBus=i,this.cellsHtmlElementsMap=[],n.addHandler(t.InitGame,this.initHandler.bind(this)),n.addHandler(t.Render,this.renderCommandHandler.bind(this))}return n.prototype.initHandler=function(t){this.table=n.createHtmlElement('<div style="float: left; display: table; border-collapse: collapse"></div>'),this.cellsHtmlElementsMap=[];for(var i=0;i<t.gameData.settings.fieldHeight;i++){var r=n.createHtmlElement('<div style="display: table-row"></div>');this.cellsHtmlElementsMap[i]=[];for(var o=0;o<t.gameData.settings.fieldWidth;o++){var a=n.createHtmlElement('<div style="display: table-cell; border: 1px solid #ccc; width: 20px; height: 20px"></div>');this.cellsHtmlElementsMap[i][o]=a,r.appendChild(a)}this.table.appendChild(r)}this.renderSettings.containerElement.innerHTML="",this.renderSettings.containerElement.appendChild(this.table),this.scoreDisplay=n.createHtmlElement('<div style="float: left; font-family: \'Helvetica Neue\', sans-serif; font-size: 20px; margin-left: 15px;">\n                Level: <span id="level"></span><br>\n                Score: <span id="score"></span><br>\n                Combo: <span id="combo"></span><br>\n                Figures fallen: <span id="figures_fallen"></span><br>\n                Lines squashed: <span id="lines_squashed"></span><br>\n            </div>'),this.renderSettings.containerElement.appendChild(this.scoreDisplay),this.renderSettings.containerElement.appendChild(n.createHtmlElement('<div style="clear: both"></div>')),this.eventBus.on(e.FallingTickProcessed,this.onFallTickProcessed.bind(this)),this.eventBus.on(e.GameOver,this.onGameOver.bind(this)),this.eventBus.on(e.FiguresMoved,this.onFiguresMoved.bind(this))},n.prototype.onFiguresMoved=function(e){this.renderState(e.gameData)},n.prototype.onFallTickProcessed=function(e){this.renderState(e.gameData)},n.prototype.onGameOver=function(e){this.renderState(e.gameData)},n.prototype.renderCommandHandler=function(e){this.renderState(e.gameData)},n.prototype.renderState=function(e){this.repaintMatrixCells(e.matrix,new E(0,0),e),this.renderSettings.renderProjectionFigures&&this.renderFallingFiguresProjection(e),this.renderFallingFigures(e),this.renderStats(e)},n.prototype.renderFallingFigures=function(e){var t=this;e.fallingFigures.forEach((function(n){t.repaintFallingFiguresCells(n,e)}))},n.prototype.renderFallingFiguresProjection=function(e){var t=this;e.fallingFigures.forEach((function(n){for(var i=n.figure.getTurn(n.turnState),r=n.position.x,o=n.position.y;L.canFigureBePlaced(i,new E(r,o+1),e.matrix);)o++;t.repaintProjectionFiguresCells(i,new E(r,o),e)}))},n.prototype.repaintMatrixCells=function(e,t,n){var i;i=n.isGameOver?new q(this.renderSettings.matrixCellColors.filledGameOver,this.renderSettings.matrixCellColors.empty):new q(this.renderSettings.matrixCellColors.filled,this.renderSettings.matrixCellColors.empty),this.repaintCells(e,t,i)},n.prototype.repaintFallingFiguresCells=function(e,t){var n;n=t.isGameOver?new q(this.renderSettings.fallingFigureCellColors.filledGameOver,this.renderSettings.fallingFigureCellColors.empty):new q(e.color||this.renderSettings.fallingFigureCellColors.filled,this.renderSettings.fallingFigureCellColors.empty),this.repaintCells(e.figure.getTurn(e.turnState),e.position,n)},n.prototype.repaintProjectionFiguresCells=function(e,t,n){var i;i=n.isGameOver?new q(this.renderSettings.projectionFigureCellColors.filledGameOver,this.renderSettings.projectionFigureCellColors.empty):new q(this.renderSettings.projectionFigureCellColors.filled,this.renderSettings.projectionFigureCellColors.empty),this.repaintCells(e,t,i)},n.prototype.repaintCells=function(e,t,n){var i=this;e.forEach((function(e,r){e.forEach((function(e,o){var a=r+t.y,s=o+t.x;if(a in i.cellsHtmlElementsMap&&s in i.cellsHtmlElementsMap[a]){var u=e?n.filled:n.empty;null!==u&&(i.cellsHtmlElementsMap[a][s].style.background=u)}}))}))},n.prototype.renderStats=function(e){var t=document.getElementById("level"),n=document.getElementById("score"),i=document.getElementById("combo"),r=document.getElementById("figures_fallen"),o=document.getElementById("lines_squashed");null!==t&&(t.innerHTML=e.level.toString()),null!==n&&(n.innerHTML=e.score.toString()),null!==i&&(i.innerHTML=e.combo.toString()),null!==r&&(r.innerHTML=e.stats.figuresFallen.toString()),null!==o&&(o.innerHTML=e.stats.linesSquashed.toString())},n.createHtmlElement=function(e){var t=document.createElement("div");if(t.innerHTML=e,t.children.length>1||null===t.firstElementChild)throw"The HTML must contain only one child";if(!(t.firstElementChild instanceof HTMLElement))throw"Something went wrong while trying to get HTMLElement child from div";return t.firstElementChild},n}(),A=function(){this.transferredFigures=[],this.isGameOver=!1},N=function(){function e(e,n){this.commandBus=e,this.eventBus=n,this.commandBus.addHandler(t.FiguresFallTick,this.processFiguresFallTickCommand.bind(this)),this.commandBus.addHandler(t.FiguresFallDown,this.processDropFiguresCommand.bind(this))}return e.prototype.processFiguresFallTickCommand=function(e){var t=this.fallFiguresForOneCell(e.gameData),i=this.squashLines(e.gameData.matrix);t.isGameOver&&this.commandBus.run(new d(e.gameData)),this.eventBus.fire(new n(e.gameData,t.transferredFigures,i,0))},e.prototype.processDropFiguresCommand=function(e){for(var t,i=new A,r=0;e.gameData.fallingFigures.length>0;){var o=this.fallFiguresForOneCell(e.gameData);(t=i.transferredFigures).push.apply(t,o.transferredFigures),i.isGameOver=i.isGameOver||o.isGameOver,r++}var a=this.squashLines(e.gameData.matrix);i.isGameOver&&this.commandBus.run(new d(e.gameData)),this.eventBus.fire(new n(e.gameData,i.transferredFigures,a,r-1))},e.prototype.fallFiguresForOneCell=function(e){var t=this,n=new A;return e.fallingFigures.forEach((function(i,r){var o;if(t.figureCanFall(e.matrix,i))i.position.y++;else{var a=t.transferFigureToMatrix(e.matrix,i);(o=n.transferredFigures).push.apply(o,e.fallingFigures.splice(r,1)),n.isGameOver=n.isGameOver||a}})),n},e.prototype.figureCanFall=function(e,t){return L.canFigureBePlaced(t.figure.getTurn(t.turnState),new E(t.position.x,t.position.y+1),e)},e.prototype.transferFigureToMatrix=function(e,t){var n=!1;return t.figure.getTurn(t.turnState).forEach((function(i,r){i.forEach((function(i,o){if(i){var a=t.position.x+o,s=t.position.y+r;s in e&&a in e[s]&&!e[s][a]?e[s][a]=!0:n=!0}}))})),n},e.prototype.squashLines=function(e){var t=[];return e.forEach((function(e,n){e.every((function(e){return e}))&&t.push(n)}),0),t.forEach((function(t){e.splice(t,1),e.unshift(new Array(e[0].length).fill(!1))})),t},e}(),z=function(){function e(){}return e.ToArray=function(e){return Object.keys(e).map((function(e){return Number.parseInt(e)})).filter((function(e){return!Number.isNaN(e)}))},e.GetRandom=function(t){var n=e.ToArray(t);return n[Math.floor(Math.random()*n.length)]},e}(),U=function(){function n(e,n){this.eventBus=e,this.commandBus=n,this.commandBus.addHandler(t.InitGame,this.initHandler.bind(this))}return n.prototype.initHandler=function(t){this.eventBus.on(e.FallingTickProcessed,this.processOnFallTick.bind(this))},n.prototype.processOnFallTick=function(e){this.addFigure(e.gameData)},n.prototype.addFigure=function(e){if(!(e.fallingFigures.length>0||e.isGameOver)){var t=Math.floor(Math.random()*e.settings.figures.length),n=e.settings.figures[t],i=z.GetRandom(u),r=n.getTurn(i),a=Math.max.apply(Math,r.map((function(e){return e.length}))),s=new E(Math.ceil(e.settings.fieldWidth/2-a/2)-1,-r.length),l=new G(n,s,i);e.fallingFigures.push(l),this.eventBus.fire(new o(e,[l]))}},n}(),W=function(){function e(e,n){this.commandBus=e,this.eventBus=n,this.commandBus.addHandler(t.MoveLeft,this.processMoveLeftCommand.bind(this)),this.commandBus.addHandler(t.MoveRight,this.processMoveRightCommand.bind(this)),this.commandBus.addHandler(t.MoveDown,this.processMoveDownCommand.bind(this)),this.commandBus.addHandler(t.TurnClockwise,this.processTurnClockwiseCommand.bind(this))}return e.prototype.processMoveLeftCommand=function(e){e.gameData.fallingFigures.forEach((function(t){L.canFigureBePlaced(t.figure.getTurn(t.turnState),new E(t.position.x-1,t.position.y),e.gameData.matrix)&&t.position.x--})),this.eventBus.fire(new r(e.gameData))},e.prototype.processMoveRightCommand=function(e){e.gameData.fallingFigures.forEach((function(t){L.canFigureBePlaced(t.figure.getTurn(t.turnState),new E(t.position.x+1,t.position.y),e.gameData.matrix)&&t.position.x++})),this.eventBus.fire(new r(e.gameData))},e.prototype.processTurnClockwiseCommand=function(e){var t=z.ToArray(u);e.gameData.fallingFigures.forEach((function(n){var i=n.turnState+1;i in t||(i=t[0]),L.canFigureBePlaced(n.figure.getTurn(i),n.position,e.gameData.matrix)&&(n.turnState=i)})),this.eventBus.fire(new r(e.gameData))},e.prototype.processMoveDownCommand=function(e){this.commandBus.run(new f(e.gameData))},e}(),Y=function(){function e(e){this.commandBus=e,this.commandBus.addHandler(t.InitGame,this.processInitGameCommand.bind(this))}return e.prototype.processInitGameCommand=function(e){var t=this;window.onkeydown=function(n){"ArrowLeft"===n.code?t.commandBus.run(new p(e.gameData)):"ArrowRight"===n.code?t.commandBus.run(new g(e.gameData)):"ArrowUp"===n.code?t.commandBus.run(new v(e.gameData)):"ArrowDown"===n.code||"ArrowDown"===n.code?t.commandBus.run(new y(e.gameData)):"Space"===n.code&&t.commandBus.run(new w(e.gameData))}},e}(),J=function(){function n(e,n,i,r){void 0===i&&(i=new Map([[1,100],[2,300],[3,500],[4,800]])),void 0===r&&(r=50),this.commandBus=e,this.eventBus=n,this.squashedRowsRewardThresholdsMap=i,this.rewardOnCombo=r,e.addHandler(t.InitGame,this.initGameHandler.bind(this))}return n.prototype.initGameHandler=function(t){this.eventBus.on(e.FallingTickProcessed,this.onFallingTickProcessed.bind(this))},n.prototype.onFallingTickProcessed=function(e){if(!(e.squashedLines.length<0)){var t=0;this.squashedRowsRewardThresholdsMap.forEach((function(n,i){i>e.squashedLines.length||(t=n)})),e.gameData.score+=t*e.gameData.level+this.rewardOnCombo*Math.max(0,e.gameData.combo-1)*e.gameData.level+2*e.droppedLines*e.gameData.level}},n}(),K=function(){function n(e,n,i,r){this.eventBus=e,this.commandBus=n,this.levelIncreaseOnSquashedRowsNumber=i,this.maxLevels=r,this.squashedRowsCounter=0,this.commandBus.addHandler(t.InitGame,this.processInitGameCommand.bind(this))}return n.prototype.processInitGameCommand=function(t){this.eventBus.on(e.FallingTickProcessed,this.onFallTickProcessed.bind(this))},n.prototype.onFallTickProcessed=function(e){0!==e.squashedLines.length&&(this.squashedRowsCounter++,this.squashedRowsCounter>=this.levelIncreaseOnSquashedRowsNumber&&(this.squashedRowsCounter=0,e.gameData.level=Math.min(this.maxLevels,e.gameData.level+1)))},n}(),Q=function(){function n(e,n){this.commandBus=e,this.eventBus=n,e.addHandler(t.InitGame,this.initGameHandler.bind(this))}return n.prototype.initGameHandler=function(t){this.eventBus.on(e.FallingTickProcessed,this.onFallTickProcessed.bind(this))},n.prototype.onFallTickProcessed=function(e){e.transferredToMatrixFigures.length<=0||(e.squashedLines.length>0?e.gameData.combo+=1:e.gameData.combo=0)},n}(),V=function(){function e(e){this.delayMs=e}return e.prototype.getDelayForNextTickMs=function(e){return this.delayMs},e}(),X=function(){function n(e,n){this.commandBus=e,this.eventBus=n,e.addHandler(t.InitGame,this.initGameHandler.bind(this))}return n.prototype.initGameHandler=function(t){this.eventBus.on(e.FallingTickProcessed,this.onFallingTickProcessed.bind(this))},n.prototype.onFallingTickProcessed=function(e){e.gameData.stats.figuresFallen+=e.transferredToMatrixFigures.length,e.gameData.stats.linesSquashed+=e.squashedLines.length},n}(),Z=function(){function e(e,t,n,i,r,o,s,u,l,c,h,f,d){void 0===e&&(e=new a),void 0===t&&(t=new F),void 0===n&&(n=new I(new V(2e3),e,t)),void 0===i&&(i=new W(t,e)),void 0===r&&(r=new Y(t)),void 0===o&&(o=new N(t,e)),void 0===s&&(s=new U(e,t)),void 0===u&&(u=new K(e,t,8,15)),void 0===l&&(l=new Q(t,e)),void 0===c&&(c=new J(t,e)),void 0===h&&(h=new X(t,e)),void 0===f&&(f=new j(new _(document.body),t,e)),void 0===d&&(d=P.makeSimple()),this.eventBus=e,this.commandBus=t,this.gameController=n,this.movingHandler=i,this.movingController=r,this.fallingFiguresProcessor=o,this.figuresSpawner=s,this.levelCounter=u,this.comboCounter=l,this.scoreCounter=c,this.statsCounter=h,this.tableRenderer=f,this.gameData=d}return e.prototype.start=function(e){e=e||P.makeSimple(),this.commandBus.run(new l(e)),this.commandBus.run(new c(e))},e.prototype.resume=function(){this.commandBus.run(new c(this.gameData))},e.prototype.pause=function(){this.commandBus.run(new h(this.gameData))},e}(),$=function(e){this.target=e},ee=function(e){this.target=e},te=function(e){this.target=e},ne=function(){},ie=function(e,t){this.figuresTargetStates=e,this.placingSteps=t},re=function(){var e=function(t,n){return e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},e(t,n)};return function(t,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function i(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}(),oe=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return re(t,e),t}(function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return re(t,e),t}(Error)),ae=function(){function e(e,t){this.commandBus=e,this.scoreCalculator=t}return e.prototype.resolve=function(e){var t=this;if(0!==e.fallingFigures.length){if(1!==e.fallingFigures.length)throw new oe;var n=e.fallingFigures[0],i=-1/0,r=new ie(new Map,[]);this.processStates(e,(function(e,t,o){t>i&&(i=t,r=new ie(new Map([[n,e]]),o))}));var o="debugMode"in window&&window.debugMode,a=r.figuresTargetStates.get(n);if(o&&void 0!==a){var s=structuredClone(e);a.color="#f00",s.fallingFigures=[a],this.commandBus.run(new m(s)),this.processStates(e,void 0,(function(e){e.color="#00f",s.fallingFigures=[e],t.commandBus.run(new m(s))}))}return r}},e.prototype.processStates=function(e,t,n){for(var i=this,r=e.fallingFigures[0],o=z.ToArray(u);o[0]!==r.turnState;)o.unshift(o.pop());var a=new Map;o.forEach((function(e){a.set(e,r.figure.getTurn(e))})),a.forEach((function(o,a){for(var s=0;s<e.settings.fieldWidth-o[0].length+1;s++){var u=i.imagineFigureDrop(e.matrix,o,s),l=u[0],c=u[1],h=new E(s,l),f=i.squashLines(c),d=new G(r.figure,h,a);n&&n(d);var m=i.scoreCalculator.calculateScore(e,c,f),p=i.makeSimplePlacingSteps(r,d);t&&t(d,m,p)}})),this.collectOpenHoles(e.matrix).forEach((function(o){var s=o[0],u=o[1];a.forEach((function(o,a){for(var l=Math.min(s.y-o.length,0);l++;l<=u.y)for(var c=Math.min(s.x-o[0].length,0);c++;c<=u.x){var h=new E(c,l);if(L.canFigureBePlaced(o,h,e.matrix)){var f=new G(r.figure,h,a),d=i.makePushInPlacingSteps(e,r,f);if(void 0!==d){var m=i.imagineFigurePlacing(e.matrix,o,h),p=i.squashLines(m);n&&n(f);var g=i.scoreCalculator.calculateScore(e,m,p);t&&t(f,g,d)}}}}))}))},e.prototype.squashLines=function(e){var t=[];return e.forEach((function(e,n){e.every((function(e){return e}))&&t.push(n)}),0),t.forEach((function(t){e.splice(t,1),e.unshift(new Array(e[0].length).fill(!1))})),t.length},e.prototype.imagineFigureDrop=function(e,t,n){for(var i=-t.length;L.canFigureBePlaced(t,new E(n,i+1),e);)i++;return[i,this.imagineFigurePlacing(e,t,new E(n,i))]},e.prototype.imagineFigurePlacing=function(e,t,n){var i=structuredClone(e);return t.forEach((function(e,t){e.forEach((function(e,r){var o=n.y+t,a=n.x+r;o in i&&a in i[o]&&e&&(i[o][a]=!0)}))})),i},e.prototype.collectOpenHoles=function(e){return[]},e.prototype.makePushInPlacingSteps=function(e,t,n){},e.prototype.makeSimplePlacingSteps=function(e,t){return[new $(t.turnState),new ee(t.position.x),new ne]},e}(),se=function(){function e(e,t){void 0===t&&(t=.8),this.initialDelayMs=e,this.base=t}return e.prototype.getDelayForNextTickMs=function(e){return Math.pow(this.base-.007*(e.level-1),e.level-1)*this.initialDelayMs},e}(),ue=function(){var e=function(t,n){return e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},e(t,n)};return function(t,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function i(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}(),le=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return ue(t,e),t}(Error),ce=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return ue(t,e),t}(le),he=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return ue(t,e),t}(le),fe=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return ue(t,e),t}(le),de=function(){function e(e,t){void 0===t&&(t=new se(100,.9)),this.commandBus=e,this.timingsHandler=t,this.nextMoveTimeoutId=setTimeout((function(){})),this.gameData=P.makeSimple()}return e.prototype.place=function(e,t){this.gameData=e,this.targetState=t,clearTimeout(this.nextMoveTimeoutId),this.nextMoveTimeoutId=setTimeout(this.processTick.bind(this),this.timingsHandler.getDelayForNextTickMs(this.gameData))},e.prototype.processTick=function(){var e=this;if(0!==this.gameData.fallingFigures.length){if(1!==this.gameData.fallingFigures.length)throw new ce;if(void 0!==this.targetState){var t=this.gameData.fallingFigures[0],n=this.targetState.figuresTargetStates.get(t);if(n){if(t.figure!==n.figure)throw new he("Both of the original and the target falling figures must have the same figure in it.");this.targetState.placingSteps.every((function(n){if(n instanceof $)return t.turnState===n.target||(e.commandBus.run(new v(e.gameData)),!1);if(n instanceof ee)return t.position.x===n.target||(t.position.x>n.target?e.commandBus.run(new p(e.gameData)):e.commandBus.run(new g(e.gameData)),!1);if(n instanceof te)return!(t.position.y<n.target&&(e.commandBus.run(new y(e.gameData)),1));if(n instanceof ne)return e.commandBus.run(new w(e.gameData)),!0;throw new fe("Unknown step "+n.constructor.name)}))||(this.nextMoveTimeoutId=setTimeout(this.processTick.bind(this),this.timingsHandler.getDelayForNextTickMs(this.gameData)))}}}},e}(),me=function(){function e(){}return e.prototype.calculateScore=function(e,t,n){var i,r=e.settings.fieldHeight,o=e.settings.fieldWidth,a=5*n,s=this.calculateHoles(e.matrix),u=this.calculateHolesAndCoveredHeight(t,e.matrix),l=u[0],c=u[1],h=s-l;i=0===c||0===l?h>0?150*h:70*h:(h>0?150*h:70*h)-c*Math.pow(c,c/(r*l))*5;var f=this.calculateHeight(t),d=-f*Math.pow(f,f/r)*3,m=this.calculateFillableSpace(t,o),p=m[0],g=0;m[1]>5&&(g=-p*Math.pow(p,p/(r*o)));var v,y=this.calculateTunnelsExceptUncovered(t,e.matrix),w=y[0],F=y[1],T=i+a+d+(v=0===F?0:70*-F-w*Math.pow(w,w/(r*F))*7)+g;return isNaN(T)&&console.log(t,i,a,d,v,g),T},e.prototype.calculateHoles=function(e){var t=new Set,n=0;return e.forEach((function(e,i){e.forEach((function(e,i){e?t.add(i):t.has(i)&&n++}))})),n},e.prototype.calculateHolesAndCoveredHeight=function(e,t){var n=this.calculateTheHighestHoleCoveredY(t),i=n[0],r=n[1],o=new Map,a=0,s=0;return e.forEach((function(e,t){e.forEach((function(e,n){e&&!o.has(n)&&o.set(n,t);var u=o.get(n);void 0===u||e||(s++,void 0!==i&&void 0!==r&&(t<i?a+=t-u:u<r&&(a+=r-u)))}))})),[s,a]},e.prototype.calculateTheHighestHoleCoveredY=function(e){var t=void 0,n=void 0,i=new Map;return e.some((function(e,r){return e.some((function(e,o){e&&!i.has(o)&&i.set(o,r);var a=i.get(o);return void 0!==a&&!e&&(n=r,t=a,!0)}))})),[n,t]},e.prototype.calculateHeight=function(e){var t=-1;return e.every((function(e,n){return!!e.every((function(e){return!e}))&&(t=n,!0)})),e.length-t-1},e.prototype.calculateTunnelsExceptUncovered=function(e,t){var n=new Set;t.every((function(e){e.forEach((function(e,t){e&&n.add(t)}))}));var i=new Set,r=new Map,o=e[0].length;e.every((function(e,t){return e.forEach((function(e,t){e&&i.add(t)})),e.forEach((function(e,t){e||i.has(t)||n.has(t)||0!==t&&!i.has(t-1)||t!==o-1&&!i.has(t+1)||r.set(t,(r.get(t)||0)+1)})),i.size<o}));var a=0,s=0;return r.forEach((function(e){e>=3&&(a+=e,s++)})),[a,s]},e.prototype.calculateFillableSpace=function(e,t){var n=new Set,i=0,r=0;return e.every((function(e){return e.forEach((function(e,t){e&&n.add(t)})),e.forEach((function(e,t){!e&&n.size>0&&!n.has(t)&&i++})),n.size<t&&(n.size>0&&r++,!0)})),[i,r]},e}(),pe=function(){function n(e,n,i,r){void 0===i&&(i=new ae(n,new me)),void 0===r&&(r=new de(n)),this.eventBus=e,this.commandBus=n,this.fallingFigurePlacingResolver=i,this.fallingFiguresPlacer=r,this.commandBus.addHandler(t.InitGame,this.initGameHandler.bind(this))}return n.prototype.initGameHandler=function(t){this.eventBus.on(e.FiguresSpawned,this.onFiguresSpawned.bind(this))},n.prototype.onFiguresSpawned=function(e){var t=this.fallingFigurePlacingResolver.resolve(e.gameData);this.fallingFiguresPlacer.place(e.gameData,t)},n}();document.addEventListener("DOMContentLoaded",(function(){var e=new a,t=new F,n=new Z(e,t);new pe(e,t),n.start()}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,