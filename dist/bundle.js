(()=>{"use strict";var t;!function(t){t[t.FallingTickProcessed=0]="FallingTickProcessed",t[t.GameOver=1]="GameOver",t[t.FiguresMoved=2]="FiguresMoved"}(t||(t={}));var e,n,i=function(){function e(t,e,n){this.gameData=t,this.transferredToMatrixFigures=e,this.squashedLines=n}return e.prototype.getEventType=function(){return t.FallingTickProcessed},e}(),r=function(){function e(t){this.gameData=t}return e.prototype.getEventType=function(){return t.GameOver},e}(),a=function(){function e(t){this.gameData=t}return e.prototype.getEventType=function(){return t.FiguresMoved},e}(),o=function(){function t(){this.handlers=new Map}return t.prototype.on=function(t,e,n){void 0===n&&(n=!0);var i=this.handlers.get(t)||[];n&&i.some((function(t){return t===e}))||(i.push(e),this.handlers.set(t,i))},t.prototype.off=function(t,e){var n=this.handlers.get(t)||[],i=n.indexOf(e);i>0&&n.splice(i,1),this.handlers.set(t,n)},t.prototype.fire=function(t){(this.handlers.get(t.getEventType())||[]).forEach((function(e){e(t)}))},t}(),s=function(t,e,n){this.fieldWidth=t,this.fieldHeight=e,this.figures=n},u=(e=function(t,n){return e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},e(t,n)},function(t,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function i(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)});!function(t){t[t.One=0]="One",t[t.Two=1]="Two",t[t.Three=2]="Three",t[t.Four=3]="Four"}(n||(n={}));var c,m=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return u(e,t),e.prototype.getNormalizedFigure=function(){var t=this.getFigure(),e=t.reduce((function(t,e){return Math.max(t,e.length)}),0);return t.map((function(t){var n=t.length;return t.length=e,t.fill(!1,n-1,e-1)}))},e.prototype.getFirstTurn=function(){return this.getNormalizedFigure()},e.prototype.getSecondTurn=function(){for(var t=this.getNormalizedFigure(),e=[],n=t.length,i=t[0].length,r=0;r<i;r++){e[r]=new Array(n).fill(!1);for(var a=0;a<n;a++)e[r][n-a-1]=t[a][r]}return e},e.prototype.getThirdTurn=function(){return this.getFirstTurn().reverse().map((function(t){return t.reverse()}))},e.prototype.getForthTurn=function(){return this.getSecondTurn().reverse().map((function(t){return t.reverse()}))},e}(function(){function t(){}return t.prototype.getTurn=function(t){switch(t){case n.One:return this.getFirstTurn();case n.Two:return this.getSecondTurn();case n.Three:return this.getThirdTurn();case n.Four:return this.getForthTurn()}},t}()),l=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return u(e,t),e.prototype.getFigure=function(){return["###".split("").map((function(t){return"#"===t})),"-#-".split("").map((function(t){return"#"===t}))]},e}(m),h=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return u(e,t),e.prototype.getFigure=function(){return["###".split("").map((function(t){return"#"===t})),"--#".split("").map((function(t){return"#"===t}))]},e}(m),d=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return u(e,t),e.prototype.getFigure=function(){return["###".split("").map((function(t){return"#"===t})),"#--".split("").map((function(t){return"#"===t}))]},e}(m),f=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return u(e,t),e.prototype.getFigure=function(){return["##".split("").map((function(t){return"#"===t})),"##".split("").map((function(t){return"#"===t}))]},e}(m),p=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return u(e,t),e.prototype.getFigure=function(){return["####".split("").map((function(t){return"#"===t}))]},e}(m),g=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return u(e,t),e.prototype.getFigure=function(){return["##-".split("").map((function(t){return"#"===t})),"-##".split("").map((function(t){return"#"===t}))]},e}(m),v=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return u(e,t),e.prototype.getFigure=function(){return["-##".split("").map((function(t){return"#"===t})),"##-".split("").map((function(t){return"#"===t}))]},e}(m),y=function(){function t(t,e,n,i,r,a){void 0===t&&(t=!1),void 0===e&&(e=!1),void 0===n&&(n=[]),void 0===i&&(i=[]),void 0===r&&(r=setTimeout((function(){}))),this.isInitialized=t,this.isGameOver=e,this.fallingFigures=n,this.matrix=i,this.nextTickTimeoutId=r,this.settings=a}return t.makeSimple=function(e,n){return void 0===e&&(e=12),void 0===n&&(n=25),new t(!1,!1,[],new Array(n).fill([]).map((function(t){return new Array(e).fill(!1)})),setTimeout((function(){})),new s(e,n,[new l,new h,new d,new f,new p,new g,new v]))},t}();!function(t){t[t.InitGame=0]="InitGame",t[t.ResumeGame=1]="ResumeGame",t[t.PauseGame=2]="PauseGame",t[t.FiguresFallTick=3]="FiguresFallTick",t[t.GameOver=4]="GameOver",t[t.Render=5]="Render",t[t.MoveLeft=6]="MoveLeft",t[t.MoveRight=7]="MoveRight",t[t.TurnClockwise=8]="TurnClockwise",t[t.MoveDown=9]="MoveDown",t[t.FiguresFallDown=10]="FiguresFallDown"}(c||(c={}));var F=function(){function t(t){this.gameData=t}return t.prototype.getCommandType=function(){return c.InitGame},t}(),T=function(){function t(t){this.gameData=t}return t.prototype.getCommandType=function(){return c.ResumeGame},t}(),w=function(){function t(t){this.gameData=t}return t.prototype.getCommandType=function(){return c.PauseGame},t}(),D=function(){function t(t){this.gameData=t}return t.prototype.getCommandType=function(){return c.FiguresFallTick},t}(),B=function(){function t(t){this.gameData=t}return t.prototype.getCommandType=function(){return c.GameOver},t}(),M=function(){function t(t){this.gameData=t}return t.prototype.getCommandType=function(){return c.Render},t}(),H=function(){function t(t){this.gameData=t}return t.prototype.getCommandType=function(){return c.MoveLeft},t}(),C=function(){function t(t){this.gameData=t}return t.prototype.getCommandType=function(){return c.MoveRight},t}(),G=function(){function t(t){this.gameData=t}return t.prototype.getCommandType=function(){return c.TurnClockwise},t}(),b=function(){function t(t){this.gameData=t}return t.prototype.getCommandType=function(){return c.MoveDown},t}(),k=function(){function t(t){this.gameData=t}return t.prototype.getCommandType=function(){return c.FiguresFallDown},t}(),E=function(){function t(){this.handlers=new Map}return t.prototype.addHandler=function(t,e,n){void 0===n&&(n=!0);var i=this.handlers.get(t)||[];n&&i.some((function(t){return t===e}))||(i.push(e),this.handlers.set(t,i))},t.prototype.removeHandler=function(t,e){var n=this.handlers.get(t)||[],i=n.indexOf(e);i>0&&n.splice(i,1),this.handlers.set(t,n)},t.prototype.run=function(t){(this.handlers.get(t.getCommandType())||[]).forEach((function(e){e(t)}))},t}(),O=function(){function t(t,e,n){this.timingsHandler=t,this.eventBus=e,this.commandBus=n,this.gameData=y.makeSimple(),this.commandBus.addHandler(c.InitGame,this.initGameHandler.bind(this)),this.commandBus.addHandler(c.ResumeGame,this.resumeGameHandler.bind(this)),this.commandBus.addHandler(c.PauseGame,this.pauseGameHandler.bind(this)),this.commandBus.addHandler(c.GameOver,this.gameOverHandler.bind(this))}return t.prototype.initGameHandler=function(t){this.gameData=t.gameData,this.gameData.isInitialized=!0},t.prototype.resumeGameHandler=function(t){this.gameData.isGameOver||(this.gameData.isInitialized||this.commandBus.run(new F(t.gameData)),this.fallTick())},t.prototype.pauseGameHandler=function(t){this.gameData=t.gameData,clearTimeout(this.gameData.nextTickTimeoutId),this.commandBus.run(new M(this.gameData))},t.prototype.gameOverHandler=function(){clearTimeout(this.gameData.nextTickTimeoutId),this.gameData.isInitialized=!1,this.gameData.isGameOver=!0,this.eventBus.fire(new r(this.gameData))},t.prototype.fallTick=function(){this.commandBus.run(new D(this.gameData)),this.gameData.isGameOver||(this.gameData.nextTickTimeoutId=setTimeout(this.fallTick.bind(this),this.timingsHandler.getDelayForNextTickMs()))},t}(),x=function(t){this.containerElement=t},S=function(){function e(t,e,n){this.tableRendererSettings=t,this.commandBus=e,this.eventBus=n,this.cellsHtmlElementsMap=[],e.addHandler(c.InitGame,this.initHandler.bind(this)),e.addHandler(c.Render,this.renderCommandHandler.bind(this))}return e.prototype.initHandler=function(n){var i=e.createHtmlElement('<div style="display: table; border-collapse: collapse"></div>');this.cellsHtmlElementsMap=[];for(var r=0;r<n.gameData.settings.fieldHeight;r++){var a=e.createHtmlElement('<div style="display: table-row"></div>');this.cellsHtmlElementsMap[r]=[];for(var o=0;o<n.gameData.settings.fieldWidth;o++){var s=e.createHtmlElement('<div style="display: table-cell; border: 1px solid #ccc; width: 20px; height: 20px"></div>');this.cellsHtmlElementsMap[r][o]=s,a.appendChild(s)}i.appendChild(a)}this.tableRendererSettings.containerElement.replaceChildren(i),this.eventBus.on(t.FallingTickProcessed,this.onFallTickProcessed.bind(this)),this.eventBus.on(t.GameOver,this.onFallTickProcessed.bind(this)),this.eventBus.on(t.FiguresMoved,this.onFiguresMoved.bind(this))},e.prototype.onFiguresMoved=function(t){this.renderTable(t.gameData)},e.prototype.onFallTickProcessed=function(t){this.renderTable(t.gameData)},e.prototype.onGameOver=function(t){this.renderTable(t.gameData)},e.prototype.renderCommandHandler=function(t){this.renderTable(t.gameData)},e.prototype.renderTable=function(t){var e=this;t.matrix.forEach((function(n,i){n.forEach((function(n,r){n?t.isGameOver?e.cellsHtmlElementsMap[i][r].style.background="#780000":e.cellsHtmlElementsMap[i][r].style.background="#007400":e.cellsHtmlElementsMap[i][r].style.background="#fff"}))})),t.fallingFigures.forEach((function(n){n.figure.getTurn(n.turnState).forEach((function(i,r){i.forEach((function(i,a){var o=r+n.position.y,s=a+n.position.x;o in e.cellsHtmlElementsMap&&s in e.cellsHtmlElementsMap[o]&&i&&(t.isGameOver?e.cellsHtmlElementsMap[o][s].style.background="#780000":e.cellsHtmlElementsMap[o][s].style.background="#007400")}))}))}))},e.createHtmlElement=function(t){var e=document.createElement("div");if(e.innerHTML=t,e.children.length>1||null===e.firstElementChild)throw"The HTML must contain only one child";if(!(e.firstElementChild instanceof HTMLElement))throw"Something went wrong while trying to get HTMLElement child from div";return e.firstElementChild},e}(),I=function(){this.transferredFigures=[],this.isGameOver=!1},R=function(){function t(t,e){this.commandBus=t,this.eventBus=e,this.commandBus.addHandler(c.FiguresFallTick,this.processFiguresFallTickCommand.bind(this)),this.commandBus.addHandler(c.FiguresFallDown,this.processFiguresFallDownCommand.bind(this))}return t.prototype.processFiguresFallTickCommand=function(t){var e=this.fallFiguresForOneCell(t.gameData),n=this.squashLines(t.gameData.matrix);e.isGameOver&&this.commandBus.run(new B(t.gameData)),this.eventBus.fire(new i(t.gameData,e.transferredFigures,n))},t.prototype.processFiguresFallDownCommand=function(t){for(var e,n=new I;t.gameData.fallingFigures.length>0;){var r=this.fallFiguresForOneCell(t.gameData);(e=n.transferredFigures).push.apply(e,r.transferredFigures),n.isGameOver=n.isGameOver||r.isGameOver}var a=this.squashLines(t.gameData.matrix);n.isGameOver&&this.commandBus.run(new B(t.gameData)),this.eventBus.fire(new i(t.gameData,n.transferredFigures,a))},t.prototype.fallFiguresForOneCell=function(t){var e=this,n=new I;return t.fallingFigures.forEach((function(i,r){var a;if(e.figureCanFall(t.matrix,i))i.position.y++;else{var o=e.transferFigureToMatrix(t.matrix,i);(a=n.transferredFigures).push.apply(a,t.fallingFigures.splice(r,1)),n.isGameOver=n.isGameOver||o}})),n},t.prototype.figureCanFall=function(t,e){return e.figure.getTurn(e.turnState).every((function(n,i){return n.every((function(n,r){var a=e.position.x+r,o=e.position.y+i+1;return!n||o<0||o in t&&a in t[o]&&!t[o][a]}))}))},t.prototype.transferFigureToMatrix=function(t,e){var n=!1;return e.figure.getTurn(e.turnState).forEach((function(i,r){i.forEach((function(i,a){if(i){var o=e.position.x+a,s=e.position.y+r;s in t&&o in t[s]&&!t[s][o]?t[s][o]=!0:n=!0}}))})),n},t.prototype.squashLines=function(t){var e=[];return t.forEach((function(t,n){t.every((function(t){return t}))&&e.push(n)}),0),e.forEach((function(e){t.splice(e,1),t.unshift(new Array(t[0].length).fill(!1))})),e},t}(),P=function(t,e){this.x=t,this.y=e},L=function(t,e,n){this.figure=t,this.position=e,this.turnState=n},A=function(){function e(t,e){this.eventBus=t,this.commandBus=e,this.commandBus.addHandler(c.InitGame,this.initHandler.bind(this))}return e.prototype.initHandler=function(e){this.addFigure(e.gameData),this.eventBus.on(t.FallingTickProcessed,this.processOnFallTick.bind(this))},e.prototype.processOnFallTick=function(t){this.addFigure(t.gameData)},e.prototype.addFigure=function(t){if(!(t.fallingFigures.length>0||t.isGameOver)){var e=Math.floor(Math.random()*t.settings.figures.length),n=t.settings.figures[e],i=this.getRandTurnState(),r=n.getTurn(i),a=Math.max.apply(Math,r.map((function(t){return t.length}))),o=new P(Math.ceil(t.settings.fieldWidth/2-a/2)-1,-r.length);t.fallingFigures.push(new L(n,o,i))}},e.prototype.getRandTurnState=function(){var t=Object.keys(n).map((function(t){return Number.parseInt(t)})).filter((function(t){return!Number.isNaN(t)}));return t[Math.floor(Math.random()*t.length)]},e}(),N=function(){function t(t,e){this.commandBus=t,this.eventBus=e,this.commandBus.addHandler(c.MoveLeft,this.processMoveLeftCommand.bind(this)),this.commandBus.addHandler(c.MoveRight,this.processMoveRightCommand.bind(this)),this.commandBus.addHandler(c.MoveDown,this.processMoveDownCommand.bind(this)),this.commandBus.addHandler(c.TurnClockwise,this.processTurnClockwiseCommand.bind(this))}return t.prototype.processMoveLeftCommand=function(t){var e=this;t.gameData.fallingFigures.forEach((function(n){e.canFigureBeMoved(n.figure.getTurn(n.turnState),new P(n.position.x-1,n.position.y),t.gameData.matrix)&&n.position.x--})),this.eventBus.fire(new a(t.gameData))},t.prototype.processMoveRightCommand=function(t){var e=this;t.gameData.fallingFigures.forEach((function(n){e.canFigureBeMoved(n.figure.getTurn(n.turnState),new P(n.position.x+1,n.position.y),t.gameData.matrix)&&n.position.x++})),this.eventBus.fire(new a(t.gameData))},t.prototype.processTurnClockwiseCommand=function(t){var e=this,n=this.getTurnStatesAsArray();t.gameData.fallingFigures.forEach((function(i){var r=i.turnState+1;r in n||(r=n[0]),e.canFigureBeMoved(i.figure.getTurn(r),i.position,t.gameData.matrix)&&(i.turnState=r)})),this.eventBus.fire(new a(t.gameData))},t.prototype.processMoveDownCommand=function(t){this.commandBus.run(new D(t.gameData))},t.prototype.canFigureBeMoved=function(t,e,n){return t.every((function(t,i){return t.every((function(t,r){var a=e.y+i,o=e.x+r;return!t||a<0||a in n&&o in n[a]&&!n[a][o]}))}))},t.prototype.getTurnStatesAsArray=function(){return Object.keys(n).map((function(t){return Number.parseInt(t)})).filter((function(t){return!Number.isNaN(t)}))},t}(),_=function(){function t(t){this.commandBus=t,this.commandBus.addHandler(c.InitGame,this.processInitGameCommand.bind(this))}return t.prototype.processInitGameCommand=function(t){var e=this;window.onkeydown=function(n){console.log(n),"ArrowLeft"===n.code?e.commandBus.run(new H(t.gameData)):"ArrowRight"===n.code?e.commandBus.run(new C(t.gameData)):"ArrowUp"===n.code?e.commandBus.run(new G(t.gameData)):"ArrowDown"===n.code||"ArrowDown"===n.code?e.commandBus.run(new b(t.gameData)):"Space"===n.code&&e.commandBus.run(new k(t.gameData))}},t}(),z=function(){function e(t,e,n,i,r){this.eventBus=t,this.commandBus=e,this.delayMs=n,this.decreaseEveryFallenFigure=i,this.decreaseValue=r,this.counter=0,this.commandBus.addHandler(c.InitGame,this.processInitGameCommand.bind(this))}return e.prototype.getDelayForNextTickMs=function(){return this.delayMs},e.prototype.processInitGameCommand=function(e){this.eventBus.on(t.FallingTickProcessed,this.onFallTickProcessed.bind(this))},e.prototype.onFallTickProcessed=function(t){0!==t.transferredToMatrixFigures.length&&(this.counter++,this.counter>=this.decreaseEveryFallenFigure&&(this.counter=0,this.delayMs*=this.decreaseValue))},e}(),j=function(){function t(){this.eventBus=new o,this.commandBus=new E,this.gameController=new O(new z(this.eventBus,this.commandBus,500,10,.7),this.eventBus,this.commandBus),this.movingHandler=new N(this.commandBus,this.eventBus),this.movingController=new _(this.commandBus),this.tableRenderer=new S(new x(document.body),this.commandBus,this.eventBus),this.fallingFiguresProcessor=new R(this.commandBus,this.eventBus),this.figuresSpawner=new A(this.eventBus,this.commandBus),this.gameData=y.makeSimple()}return t.prototype.start=function(t){this.gameData=t||y.makeSimple(),this.commandBus.run(new F(this.gameData)),this.commandBus.run(new T(this.gameData))},t.prototype.resume=function(){this.commandBus.run(new T(this.gameData))},t.prototype.pause=function(){this.commandBus.run(new w(this.gameData))},t}();document.addEventListener("DOMContentLoaded",(function(){(new j).start()}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,