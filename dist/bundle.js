(()=>{"use strict";var e;!function(e){e[e.FallingTickProcessed=0]="FallingTickProcessed",e[e.GameOver=1]="GameOver",e[e.FiguresMoved=2]="FiguresMoved",e[e.LevelUp=3]="LevelUp",e[e.FiguresSpawned=4]="FiguresSpawned"}(e||(e={}));var t,n=function(){function t(e,t,n,i){this.gameData=e,this.transferredToMatrixFigures=t,this.squashedLines=n,this.droppedLines=i}return t.prototype.getEventType=function(){return e.FallingTickProcessed},t}(),i=function(){function t(e){this.gameData=e}return t.prototype.getEventType=function(){return e.GameOver},t}(),r=function(){function t(e){this.gameData=e}return t.prototype.getEventType=function(){return e.FiguresMoved},t}(),o=function(){function t(e,t){this.gameData=e,this.newFigures=t}return t.prototype.getEventType=function(){return e.FiguresSpawned},t}(),a=function(){function e(){this.handlers=new Map}return e.prototype.on=function(e,t,n){void 0===n&&(n=!0);var i=this.handlers.get(e)||[];n&&i.some((function(e){return e===t}))||(i.push(t),this.handlers.set(e,i))},e.prototype.off=function(e,t){var n=this.handlers.get(e)||[],i=n.indexOf(t);i>0&&n.splice(i,1),this.handlers.set(e,n)},e.prototype.fire=function(e){(this.handlers.get(e.getEventType())||[]).forEach((function(t){t(e)}))},e}();!function(e){e[e.InitGame=0]="InitGame",e[e.ResumeGame=1]="ResumeGame",e[e.PauseGame=2]="PauseGame",e[e.FiguresFallTick=3]="FiguresFallTick",e[e.GameOver=4]="GameOver",e[e.Render=5]="Render",e[e.MoveLeft=6]="MoveLeft",e[e.MoveRight=7]="MoveRight",e[e.TurnClockwise=8]="TurnClockwise",e[e.MoveDown=9]="MoveDown",e[e.FiguresFallDown=10]="FiguresFallDown"}(t||(t={}));var s,u,l=function(){function e(e){this.gameData=e}return e.prototype.getCommandType=function(){return t.InitGame},e}(),c=function(){function e(e){this.gameData=e}return e.prototype.getCommandType=function(){return t.ResumeGame},e}(),h=function(){function e(e){this.gameData=e}return e.prototype.getCommandType=function(){return t.PauseGame},e}(),f=function(){function e(e){this.gameData=e}return e.prototype.getCommandType=function(){return t.FiguresFallTick},e}(),d=function(){function e(e){this.gameData=e}return e.prototype.getCommandType=function(){return t.GameOver},e}(),m=function(){function e(e){this.gameData=e}return e.prototype.getCommandType=function(){return t.Render},e}(),p=function(){function e(e){this.gameData=e}return e.prototype.getCommandType=function(){return t.MoveLeft},e}(),g=function(){function e(e){this.gameData=e}return e.prototype.getCommandType=function(){return t.MoveRight},e}(),v=function(){function e(e){this.gameData=e}return e.prototype.getCommandType=function(){return t.TurnClockwise},e}(),y=function(){function e(e){this.gameData=e}return e.prototype.getCommandType=function(){return t.MoveDown},e}(),w=function(){function e(e){this.gameData=e}return e.prototype.getCommandType=function(){return t.FiguresFallDown},e}(),F=function(){function e(){this.handlers=new Map}return e.prototype.addHandler=function(e,t,n){void 0===n&&(n=!0);var i=this.handlers.get(e)||[];n&&i.some((function(e){return e===t}))||(i.push(t),this.handlers.set(e,i))},e.prototype.removeHandler=function(e,t){var n=this.handlers.get(e)||[],i=n.indexOf(t);i>0&&n.splice(i,1),this.handlers.set(e,n)},e.prototype.run=function(e){(this.handlers.get(e.getCommandType())||[]).forEach((function(t){t(e)}))},e}(),T=(s=function(e,t){return s=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},s(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}s(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});!function(e){e[e.One=0]="One",e[e.Two=1]="Two",e[e.Three=2]="Three",e[e.Four=3]="Four"}(u||(u={}));var D=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return T(t,e),t.prototype.getNormalizedFigure=function(){var e=this.getFigure(),t=e.reduce((function(e,t){return Math.max(e,t.length)}),0);return e.map((function(e){var n=e.length;return e.length=t,e.fill(!1,n-1,t-1)}))},t.prototype.getFirstTurn=function(){return this.getNormalizedFigure()},t.prototype.getSecondTurn=function(){for(var e=this.getNormalizedFigure(),t=[],n=e.length,i=e[0].length,r=0;r<i;r++){t[r]=new Array(n).fill(!1);for(var o=0;o<n;o++)t[r][n-o-1]=e[o][r]}return t},t.prototype.getThirdTurn=function(){return this.getFirstTurn().reverse().map((function(e){return e.reverse()}))},t.prototype.getForthTurn=function(){return this.getSecondTurn().reverse().map((function(e){return e.reverse()}))},t}(function(){function e(){}return e.prototype.getTurn=function(e){switch(e){case u.One:return this.getFirstTurn();case u.Two:return this.getSecondTurn();case u.Three:return this.getThirdTurn();case u.Four:return this.getForthTurn()}},e}()),C=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return T(t,e),t.prototype.getFigure=function(){return["###".split("").map((function(e){return"#"===e})),"-#-".split("").map((function(e){return"#"===e}))]},t}(D),M=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return T(t,e),t.prototype.getFigure=function(){return["###".split("").map((function(e){return"#"===e})),"--#".split("").map((function(e){return"#"===e}))]},t}(D),B=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return T(t,e),t.prototype.getFigure=function(){return["###".split("").map((function(e){return"#"===e})),"#--".split("").map((function(e){return"#"===e}))]},t}(D),H=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return T(t,e),t.prototype.getFigure=function(){return["##".split("").map((function(e){return"#"===e})),"##".split("").map((function(e){return"#"===e}))]},t}(D),S=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return T(t,e),t.prototype.getFigure=function(){return["####".split("").map((function(e){return"#"===e}))]},t}(D),b=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return T(t,e),t.prototype.getFigure=function(){return["##-".split("").map((function(e){return"#"===e})),"-##".split("").map((function(e){return"#"===e}))]},t}(D),E=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return T(t,e),t.prototype.getFigure=function(){return["-##".split("").map((function(e){return"#"===e})),"##-".split("").map((function(e){return"#"===e}))]},t}(D),x=function(e,t){this.x=e,this.y=t},G=function(e,t,n,i){void 0===i&&(i=void 0),this.figure=e,this.position=t,this.turnState=n,this.color=i},O=function(e,t,n){this.fieldWidth=e,this.fieldHeight=t,this.figures=n},k=function(){function e(e,t,n,i,r,o,a,s,u){void 0===e&&(e=!1),void 0===t&&(t=!1),void 0===n&&(n=[]),void 0===i&&(i=[]),void 0===r&&(r=setTimeout((function(){}))),void 0===a&&(a=1),void 0===s&&(s=0),void 0===u&&(u=0),this.isInitialized=e,this.isGameOver=t,this.fallingFigures=n,this.matrix=i,this.nextTickTimeoutId=r,this.settings=o,this.level=a,this.score=s,this.combo=u}return e.makeSimple=function(t,n){return void 0===t&&(t=10),void 0===n&&(n=20),new e(!1,!1,[],new Array(n).fill([]).map((function(e){return new Array(t).fill(!1)})),setTimeout((function(){})),new O(t,n,[new C,new M,new B,new H,new S,new b,new E]))},e}(),P=function(){function n(e,n,i){this.timingsHandler=e,this.eventBus=n,this.commandBus=i,this.gameData=k.makeSimple(),this.commandBus.addHandler(t.InitGame,this.initGameHandler.bind(this)),this.commandBus.addHandler(t.ResumeGame,this.resumeGameHandler.bind(this)),this.commandBus.addHandler(t.PauseGame,this.pauseGameHandler.bind(this)),this.commandBus.addHandler(t.GameOver,this.gameOverHandler.bind(this))}return n.prototype.initGameHandler=function(t){this.gameData=t.gameData,this.gameData.isInitialized=!0,this.eventBus.on(e.FallingTickProcessed,this.onFallTickProcessed.bind(this))},n.prototype.resumeGameHandler=function(e){this.gameData.isGameOver||(this.gameData.isInitialized||this.commandBus.run(new l(e.gameData)),this.fallTick())},n.prototype.pauseGameHandler=function(e){this.gameData=e.gameData,clearTimeout(this.gameData.nextTickTimeoutId),this.commandBus.run(new m(this.gameData))},n.prototype.gameOverHandler=function(){this.gameData.isInitialized=!1,this.gameData.isGameOver=!0,clearTimeout(this.gameData.nextTickTimeoutId),this.eventBus.fire(new i(this.gameData))},n.prototype.fallTick=function(){this.commandBus.run(new f(this.gameData))},n.prototype.onFallTickProcessed=function(e){clearTimeout(this.gameData.nextTickTimeoutId),this.gameData.isGameOver||(this.gameData.nextTickTimeoutId=setTimeout(this.fallTick.bind(this),this.timingsHandler.getDelayForNextTickMs(this.gameData)))},n}(),L=function(){function e(){}return e.canFigureBePlaced=function(e,t,n){return e.every((function(e,i){return e.every((function(e,r){var o=t.y+i,a=t.x+r;return!e||o<0&&a>=0&&a<=n[0].length-1||o in n&&a in n[o]&&!n[o][a]}))}))},e}(),I=function(e,t,n){this.filled=e,this.filledGameOver=t,this.empty=n},R=function(e,t,n,i,r){void 0===t&&(t=!0),void 0===n&&(n=new I("#007400","#780000","#fff")),void 0===i&&(i=new I("#007400","#780000",null)),void 0===r&&(r=new I("#b8e5e3",null,null)),this.containerElement=e,this.renderProjectionFigures=t,this.matrixCellColors=n,this.fallingFigureCellColors=i,this.projectionFigureCellColors=r},_=function(e,t){this.filled=e,this.empty=t},j=function(){function n(e,n,i){this.renderSettings=e,this.commandBus=n,this.eventBus=i,this.cellsHtmlElementsMap=[],n.addHandler(t.InitGame,this.initHandler.bind(this)),n.addHandler(t.Render,this.renderCommandHandler.bind(this))}return n.prototype.initHandler=function(t){this.table=n.createHtmlElement('<div style="float: left; display: table; border-collapse: collapse"></div>'),this.cellsHtmlElementsMap=[];for(var i=0;i<t.gameData.settings.fieldHeight;i++){var r=n.createHtmlElement('<div style="display: table-row"></div>');this.cellsHtmlElementsMap[i]=[];for(var o=0;o<t.gameData.settings.fieldWidth;o++){var a=n.createHtmlElement('<div style="display: table-cell; border: 1px solid #ccc; width: 20px; height: 20px"></div>');this.cellsHtmlElementsMap[i][o]=a,r.appendChild(a)}this.table.appendChild(r)}this.renderSettings.containerElement.innerHTML="",this.renderSettings.containerElement.appendChild(this.table),this.scoreDisplay=n.createHtmlElement('<div style="float: left; font-family: \'Helvetica Neue\', sans-serif; font-size: 20px; margin-left: 15px;">\n                Level: <span id="level"></span><br>\n                Score: <span id="score"></span><br>\n                Combo: <span id="combo"></span><br>\n            </div>'),this.renderSettings.containerElement.appendChild(this.scoreDisplay),this.renderSettings.containerElement.appendChild(n.createHtmlElement('<div style="clear: both"></div>')),this.eventBus.on(e.FallingTickProcessed,this.onFallTickProcessed.bind(this)),this.eventBus.on(e.GameOver,this.onGameOver.bind(this)),this.eventBus.on(e.FiguresMoved,this.onFiguresMoved.bind(this))},n.prototype.onFiguresMoved=function(e){this.renderState(e.gameData)},n.prototype.onFallTickProcessed=function(e){this.renderState(e.gameData)},n.prototype.onGameOver=function(e){this.renderState(e.gameData)},n.prototype.renderCommandHandler=function(e){this.renderState(e.gameData)},n.prototype.renderState=function(e){this.repaintMatrixCells(e.matrix,new x(0,0),e),this.renderSettings.renderProjectionFigures&&this.renderFallingFiguresProjection(e),this.renderFallingFigures(e),this.renderStats(e)},n.prototype.renderFallingFigures=function(e){var t=this;e.fallingFigures.forEach((function(n){t.repaintFallingFiguresCells(n,e)}))},n.prototype.renderFallingFiguresProjection=function(e){var t=this;e.fallingFigures.forEach((function(n){for(var i=n.figure.getTurn(n.turnState),r=n.position.x,o=n.position.y;L.canFigureBePlaced(i,new x(r,o+1),e.matrix);)o++;t.repaintProjectionFiguresCells(i,new x(r,o),e)}))},n.prototype.repaintMatrixCells=function(e,t,n){var i;i=n.isGameOver?new _(this.renderSettings.matrixCellColors.filledGameOver,this.renderSettings.matrixCellColors.empty):new _(this.renderSettings.matrixCellColors.filled,this.renderSettings.matrixCellColors.empty),this.repaintCells(e,t,i)},n.prototype.repaintFallingFiguresCells=function(e,t){var n;n=t.isGameOver?new _(this.renderSettings.fallingFigureCellColors.filledGameOver,this.renderSettings.fallingFigureCellColors.empty):new _(e.color||this.renderSettings.fallingFigureCellColors.filled,this.renderSettings.fallingFigureCellColors.empty),this.repaintCells(e.figure.getTurn(e.turnState),e.position,n)},n.prototype.repaintProjectionFiguresCells=function(e,t,n){var i;i=n.isGameOver?new _(this.renderSettings.projectionFigureCellColors.filledGameOver,this.renderSettings.projectionFigureCellColors.empty):new _(this.renderSettings.projectionFigureCellColors.filled,this.renderSettings.projectionFigureCellColors.empty),this.repaintCells(e,t,i)},n.prototype.repaintCells=function(e,t,n){var i=this;e.forEach((function(e,r){e.forEach((function(e,o){var a=r+t.y,s=o+t.x;if(a in i.cellsHtmlElementsMap&&s in i.cellsHtmlElementsMap[a]){var u=e?n.filled:n.empty;null!==u&&(i.cellsHtmlElementsMap[a][s].style.background=u)}}))}))},n.prototype.renderStats=function(e){var t=document.getElementById("level"),n=document.getElementById("score"),i=document.getElementById("combo");null!==t&&(t.innerHTML=e.level.toString()),null!==n&&(n.innerHTML=e.score.toString()),null!==i&&(i.innerHTML=e.combo.toString())},n.createHtmlElement=function(e){var t=document.createElement("div");if(t.innerHTML=e,t.children.length>1||null===t.firstElementChild)throw"The HTML must contain only one child";if(!(t.firstElementChild instanceof HTMLElement))throw"Something went wrong while trying to get HTMLElement child from div";return t.firstElementChild},n}(),A=function(){this.transferredFigures=[],this.isGameOver=!1},q=function(){function e(e,n){this.commandBus=e,this.eventBus=n,this.commandBus.addHandler(t.FiguresFallTick,this.processFiguresFallTickCommand.bind(this)),this.commandBus.addHandler(t.FiguresFallDown,this.processDropFiguresCommand.bind(this))}return e.prototype.processFiguresFallTickCommand=function(e){var t=this.fallFiguresForOneCell(e.gameData),i=this.squashLines(e.gameData.matrix);t.isGameOver&&this.commandBus.run(new d(e.gameData)),this.eventBus.fire(new n(e.gameData,t.transferredFigures,i,0))},e.prototype.processDropFiguresCommand=function(e){for(var t,i=new A,r=0;e.gameData.fallingFigures.length>0;){var o=this.fallFiguresForOneCell(e.gameData);(t=i.transferredFigures).push.apply(t,o.transferredFigures),i.isGameOver=i.isGameOver||o.isGameOver,r++}var a=this.squashLines(e.gameData.matrix);i.isGameOver&&this.commandBus.run(new d(e.gameData)),this.eventBus.fire(new n(e.gameData,i.transferredFigures,a,r-1))},e.prototype.fallFiguresForOneCell=function(e){var t=this,n=new A;return e.fallingFigures.forEach((function(i,r){var o;if(t.figureCanFall(e.matrix,i))i.position.y++;else{var a=t.transferFigureToMatrix(e.matrix,i);(o=n.transferredFigures).push.apply(o,e.fallingFigures.splice(r,1)),n.isGameOver=n.isGameOver||a}})),n},e.prototype.figureCanFall=function(e,t){return L.canFigureBePlaced(t.figure.getTurn(t.turnState),new x(t.position.x,t.position.y+1),e)},e.prototype.transferFigureToMatrix=function(e,t){var n=!1;return t.figure.getTurn(t.turnState).forEach((function(i,r){i.forEach((function(i,o){if(i){var a=t.position.x+o,s=t.position.y+r;s in e&&a in e[s]&&!e[s][a]?e[s][a]=!0:n=!0}}))})),n},e.prototype.squashLines=function(e){var t=[];return e.forEach((function(e,n){e.every((function(e){return e}))&&t.push(n)}),0),t.forEach((function(t){e.splice(t,1),e.unshift(new Array(e[0].length).fill(!1))})),t},e}(),N=function(){function e(){}return e.ToArray=function(e){return Object.keys(e).map((function(e){return Number.parseInt(e)})).filter((function(e){return!Number.isNaN(e)}))},e.GetRandom=function(t){var n=e.ToArray(t);return n[Math.floor(Math.random()*n.length)]},e}(),z=function(){function n(e,n){this.eventBus=e,this.commandBus=n,this.commandBus.addHandler(t.InitGame,this.initHandler.bind(this))}return n.prototype.initHandler=function(t){this.eventBus.on(e.FallingTickProcessed,this.processOnFallTick.bind(this))},n.prototype.processOnFallTick=function(e){this.addFigure(e.gameData)},n.prototype.addFigure=function(e){if(!(e.fallingFigures.length>0||e.isGameOver)){var t=Math.floor(Math.random()*e.settings.figures.length),n=e.settings.figures[t],i=N.GetRandom(u),r=n.getTurn(i),a=Math.max.apply(Math,r.map((function(e){return e.length}))),s=new x(Math.ceil(e.settings.fieldWidth/2-a/2)-1,-r.length),l=new G(n,s,i);e.fallingFigures.push(l),this.eventBus.fire(new o(e,[l]))}},n}(),W=function(){function e(e,n){this.commandBus=e,this.eventBus=n,this.commandBus.addHandler(t.MoveLeft,this.processMoveLeftCommand.bind(this)),this.commandBus.addHandler(t.MoveRight,this.processMoveRightCommand.bind(this)),this.commandBus.addHandler(t.MoveDown,this.processMoveDownCommand.bind(this)),this.commandBus.addHandler(t.TurnClockwise,this.processTurnClockwiseCommand.bind(this))}return e.prototype.processMoveLeftCommand=function(e){e.gameData.fallingFigures.forEach((function(t){L.canFigureBePlaced(t.figure.getTurn(t.turnState),new x(t.position.x-1,t.position.y),e.gameData.matrix)&&t.position.x--})),this.eventBus.fire(new r(e.gameData))},e.prototype.processMoveRightCommand=function(e){e.gameData.fallingFigures.forEach((function(t){L.canFigureBePlaced(t.figure.getTurn(t.turnState),new x(t.position.x+1,t.position.y),e.gameData.matrix)&&t.position.x++})),this.eventBus.fire(new r(e.gameData))},e.prototype.processTurnClockwiseCommand=function(e){var t=N.ToArray(u);e.gameData.fallingFigures.forEach((function(n){var i=n.turnState+1;i in t||(i=t[0]),L.canFigureBePlaced(n.figure.getTurn(i),n.position,e.gameData.matrix)&&(n.turnState=i)})),this.eventBus.fire(new r(e.gameData))},e.prototype.processMoveDownCommand=function(e){this.commandBus.run(new f(e.gameData))},e}(),U=function(){function e(e){this.commandBus=e,this.commandBus.addHandler(t.InitGame,this.processInitGameCommand.bind(this))}return e.prototype.processInitGameCommand=function(e){var t=this;window.onkeydown=function(n){"ArrowLeft"===n.code?t.commandBus.run(new p(e.gameData)):"ArrowRight"===n.code?t.commandBus.run(new g(e.gameData)):"ArrowUp"===n.code?t.commandBus.run(new v(e.gameData)):"ArrowDown"===n.code||"ArrowDown"===n.code?t.commandBus.run(new y(e.gameData)):"Space"===n.code&&t.commandBus.run(new w(e.gameData))}},e}(),Y=function(){function n(e,n,i,r){void 0===i&&(i=new Map([[1,100],[2,300],[3,500],[4,800]])),void 0===r&&(r=50),this.commandBus=e,this.eventBus=n,this.squashedRowsRewardThresholdsMap=i,this.rewardOnCombo=r,e.addHandler(t.InitGame,this.initGameHandler.bind(this))}return n.prototype.initGameHandler=function(t){this.eventBus.on(e.FallingTickProcessed,this.onFallingTickProcessed.bind(this))},n.prototype.onFallingTickProcessed=function(e){if(!(e.squashedLines.length<0)){var t=0;this.squashedRowsRewardThresholdsMap.forEach((function(n,i){i>e.squashedLines.length||(t=n)})),e.gameData.score+=t*e.gameData.level+this.rewardOnCombo*Math.max(0,e.gameData.combo-1)*e.gameData.level+2*e.droppedLines*e.gameData.level}},n}(),J=function(){function n(e,n,i,r){this.eventBus=e,this.commandBus=n,this.levelIncreaseOnSquashedRowsNumber=i,this.maxLevels=r,this.squashedRowsCounter=0,this.commandBus.addHandler(t.InitGame,this.processInitGameCommand.bind(this))}return n.prototype.processInitGameCommand=function(t){this.eventBus.on(e.FallingTickProcessed,this.onFallTickProcessed.bind(this))},n.prototype.onFallTickProcessed=function(e){0!==e.squashedLines.length&&(this.squashedRowsCounter++,this.squashedRowsCounter>=this.levelIncreaseOnSquashedRowsNumber&&(this.squashedRowsCounter=0,e.gameData.level=Math.min(this.maxLevels,e.gameData.level+1)))},n}(),K=function(){function n(e,n){this.commandBus=e,this.eventBus=n,e.addHandler(t.InitGame,this.initGameHandler.bind(this))}return n.prototype.initGameHandler=function(t){this.eventBus.on(e.FallingTickProcessed,this.onFallTickProcessed.bind(this))},n.prototype.onFallTickProcessed=function(e){e.transferredToMatrixFigures.length<=0||(e.squashedLines.length>0?e.gameData.combo+=1:e.gameData.combo=0)},n}(),Q=function(){function e(e){this.delayMs=e}return e.prototype.getDelayForNextTickMs=function(e){return this.delayMs},e}(),V=function(){function e(e,t,n,i,r,o,s,u,l,c,h,f){void 0===e&&(e=new a),void 0===t&&(t=new F),void 0===n&&(n=new P(new Q(2e3),e,t)),void 0===i&&(i=new W(t,e)),void 0===r&&(r=new U(t)),void 0===o&&(o=new q(t,e)),void 0===s&&(s=new z(e,t)),void 0===u&&(u=new J(e,t,8,15)),void 0===l&&(l=new K(t,e)),void 0===c&&(c=new Y(t,e)),void 0===h&&(h=new j(new R(document.body),t,e)),void 0===f&&(f=k.makeSimple()),this.eventBus=e,this.commandBus=t,this.gameController=n,this.movingHandler=i,this.movingController=r,this.fallingFiguresProcessor=o,this.figuresSpawner=s,this.levelCounter=u,this.comboCounter=l,this.scoreCounter=c,this.tableRenderer=h,this.gameData=f}return e.prototype.start=function(e){e=e||k.makeSimple(),this.commandBus.run(new l(e)),this.commandBus.run(new c(e))},e.prototype.resume=function(){this.commandBus.run(new c(this.gameData))},e.prototype.pause=function(){this.commandBus.run(new h(this.gameData))},e}(),X=function(){var e=function(t,n){return e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},e(t,n)};return function(t,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function i(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}(),Z=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return X(t,e),t}(function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return X(t,e),t}(Error)),$=function(){function e(e){this.commandBus=e}return e.prototype.resolveTargetPosition=function(e){var t=this;if(0===e.fallingFigures.length)return new Map;if(1!==e.fallingFigures.length)throw new Z;for(var n=e.fallingFigures[0],i=N.ToArray(u);i[0]!==n.turnState;)i.unshift(i.pop());var r=new Map;i.forEach((function(e){r.set(e,n.figure.getTurn(e))}));var o=-1/0,a=new G(n.figure,new x(n.position.x,n.position.y),n.turnState);if(r.forEach((function(n,i){for(var r=0;r<e.settings.fieldWidth-n[0].length+1;r++){var s=t.imagineFigureDrop(e.matrix,n,r),u=s[0],l=s[1],c=t.calculateScore(e,l);c>o&&(o=c,a.turnState=i,a.position.x=r,a.position.y=u)}})),"debugMode"in window&&window.debugMode){var s=structuredClone(e);a.color="#f00",s.fallingFigures=[a],this.commandBus.run(new m(s)),r.forEach((function(i,r){for(var o=0;o<e.settings.fieldWidth-i[0].length+1;o++){var a=t.imagineFigureDrop(e.matrix,i,o),s=a[0],u=a[1];t.calculateScore(e,u,!0,new G(n.figure,new x(o,s),r,"#00f"))}})),r.forEach((function(i,r){for(var o=0;o<e.settings.fieldWidth-i[0].length+1;o++){var a=t.imagineFigureDrop(e.matrix,i,o),s=a[0],u=a[1];t.calculateScore(e,u,!0,new G(n.figure,new x(o,s),r,"#00f"))}}))}return new Map([[n,a]])},e.prototype.calculateScore=function(e,t,n,i){if(void 0===n&&(n=!1),void 0===i&&(i=void 0),n&&i){var r=structuredClone(e);r.fallingFigures=[i],this.commandBus.run(new m(r))}var o,a=e.settings.fieldHeight,s=e.settings.fieldWidth,u=5*this.squashLines(t),l=this.calculateHoles(e.matrix),c=this.calculateHolesAndCoveredHeight(t,e.matrix),h=c[0],f=c[1],d=l-h;o=0===f||0===h?d>0?150*d:70*d:(d>0?150*d:70*d)-f*Math.pow(f,f/(a*h))*5;var p=this.calculateHeight(t),g=-p*Math.pow(p,p/a)*3,v=this.calculateFillableSpace(t,s),y=v[0],w=0;v[1]>5&&(w=-y*Math.pow(y,y/(a*s)));var F,T=this.calculateTunnelsExceptUncovered(t,e.matrix),D=T[0],C=T[1],M=o+u+g+(F=0===C?0:70*-C-D*Math.pow(D,D/(a*C))*7)+w;return isNaN(M)&&console.log(t,o,u,g,F,w),M},e.prototype.squashLines=function(e){var t=[];return e.forEach((function(e,n){e.every((function(e){return e}))&&t.push(n)}),0),t.forEach((function(t){e.splice(t,1),e.unshift(new Array(e[0].length).fill(!1))})),t.length},e.prototype.imagineFigureDrop=function(e,t,n){for(var i=e.map((function(e){return e.slice()})),r=-t.length;L.canFigureBePlaced(t,new x(n,r+1),e);)r++;return t.forEach((function(e,t){e.forEach((function(e,o){var a=r+t,s=n+o;a in i&&s in i[a]&&e&&(i[a][s]=!0)}))})),[r,i]},e.prototype.calculateHoles=function(e){var t=new Set,n=0;return e.forEach((function(e,i){e.forEach((function(e,i){e?t.add(i):t.has(i)&&n++}))})),n},e.prototype.calculateHolesAndCoveredHeight=function(e,t){var n=this.calculateTheHighestHoleCoveredY(t),i=n[0],r=n[1],o=new Map,a=0,s=0;return e.forEach((function(e,t){e.forEach((function(e,n){e&&!o.has(n)&&o.set(n,t);var u=o.get(n);void 0===u||e||(s++,void 0!==i&&void 0!==r&&(t<i?a+=t-u:u<r&&(a+=r-u)))}))})),[s,a]},e.prototype.calculateTheHighestHoleCoveredY=function(e){var t=void 0,n=void 0,i=new Map;return e.some((function(e,r){return e.some((function(e,o){e&&!i.has(o)&&i.set(o,r);var a=i.get(o);return void 0!==a&&!e&&(n=r,t=a,!0)}))})),[n,t]},e.prototype.calculateHeight=function(e){var t=-1;return e.every((function(e,n){return!!e.every((function(e){return!e}))&&(t=n,!0)})),e.length-t-1},e.prototype.calculateTunnelsExceptUncovered=function(e,t){var n=new Set;t.every((function(e){e.forEach((function(e,t){e&&n.add(t)}))}));var i=new Set,r=new Map,o=e[0].length;e.every((function(e,t){return e.forEach((function(e,t){e&&i.add(t)})),e.forEach((function(e,t){e||i.has(t)||n.has(t)||0!==t&&!i.has(t-1)||t!==o-1&&!i.has(t+1)||r.set(t,(r.get(t)||0)+1)})),i.size<o}));var a=0,s=0;return r.forEach((function(e){e>=3&&(a+=e,s++)})),[a,s]},e.prototype.calculateFillableSpace=function(e,t){var n=new Set,i=0,r=0;return e.every((function(e){return e.forEach((function(e,t){e&&n.add(t)})),e.forEach((function(e,t){!e&&n.size>0&&!n.has(t)&&i++})),n.size<t&&(n.size>0&&r++,!0)})),[i,r]},e}(),ee=function(){function e(e,t){void 0===t&&(t=.8),this.initialDelayMs=e,this.base=t}return e.prototype.getDelayForNextTickMs=function(e){return Math.pow(this.base-.007*(e.level-1),e.level-1)*this.initialDelayMs},e}(),te=function(){var e=function(t,n){return e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},e(t,n)};return function(t,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function i(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}(),ne=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return te(t,e),t}(Error),ie=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return te(t,e),t}(ne),re=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return te(t,e),t}(ne),oe=function(){function e(e,t){void 0===t&&(t=new ee(100,.9)),this.commandBus=e,this.timingsHandler=t,this.nextMoveTimeoutId=setTimeout((function(){})),this.targetFallingFiguresStates=new Map,this.gameData=k.makeSimple()}return e.prototype.place=function(e,t){this.gameData=e,this.targetFallingFiguresStates=t,clearTimeout(this.nextMoveTimeoutId),this.nextMoveTimeoutId=setTimeout(this.processTick.bind(this),this.timingsHandler.getDelayForNextTickMs(this.gameData))},e.prototype.processTick=function(){if(0!==this.gameData.fallingFigures.length){if(1!==this.gameData.fallingFigures.length)throw new ie;var e=this.gameData.fallingFigures[0],t=this.targetFallingFiguresStates.get(e);if(t){if(e.figure!==t.figure)throw new re("Both of the original and the target falling figures must have the same figure in it.");if(e.turnState!=t.turnState)this.commandBus.run(new v(this.gameData));else{if(e.position.x==t.position.x)return void this.commandBus.run(new w(this.gameData));e.position.x>t.position.x?this.commandBus.run(new p(this.gameData)):this.commandBus.run(new g(this.gameData))}this.processTick()}}},e}(),ae=function(){function n(e,n,i,r){void 0===i&&(i=new $(n)),void 0===r&&(r=new oe(n)),this.eventBus=e,this.commandBus=n,this.fallingFigurePlacingResolver=i,this.fallingFiguresPlacer=r,this.commandBus.addHandler(t.InitGame,this.initGameHandler.bind(this))}return n.prototype.initGameHandler=function(t){this.eventBus.on(e.FiguresSpawned,this.onFiguresSpawned.bind(this))},n.prototype.onFiguresSpawned=function(e){var t=this.fallingFigurePlacingResolver.resolveTargetPosition(e.gameData);this.fallingFiguresPlacer.place(e.gameData,t)},n}();document.addEventListener("DOMContentLoaded",(function(){var e=new a,t=new F,n=new V(e,t);new ae(e,t),n.start()}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,