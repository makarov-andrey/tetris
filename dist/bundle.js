(()=>{"use strict";var e,t,s;!function(e){e[e.FallingTickProcessed=0]="FallingTickProcessed",e[e.GameOver=1]="GameOver",e[e.FiguresMoved=2]="FiguresMoved",e[e.LevelUp=3]="LevelUp",e[e.FiguresSpawned=4]="FiguresSpawned"}(e||(e={}));class i{constructor(e,t,s,i){this.gameData=e,this.transferredToMatrixFigures=t,this.squashedLines=s,this.droppedLines=i}getEventType(){return e.FallingTickProcessed}}class n{constructor(e){this.gameData=e}getEventType(){return e.GameOver}}class a{constructor(e){this.gameData=e}getEventType(){return e.FiguresMoved}}class r{constructor(e,t){this.gameData=e,this.newFigures=t}getEventType(){return e.FiguresSpawned}}class l{constructor(){this.handlers=new Map}on(e,t,s=!0){let i=this.handlers.get(e)||[];s&&i.some((e=>e===t))||(i.push(t),this.handlers.set(e,i))}off(e,t){let s=this.handlers.get(e)||[],i=s.indexOf(t);i>0&&s.splice(i,1),this.handlers.set(e,s)}fire(e){(this.handlers.get(e.getEventType())||[]).forEach((t=>{t(e)}))}}!function(e){e[e.InitGame=0]="InitGame",e[e.ResumeGame=1]="ResumeGame",e[e.PauseGame=2]="PauseGame",e[e.FiguresFallTick=3]="FiguresFallTick",e[e.GameOver=4]="GameOver",e[e.Render=5]="Render",e[e.MoveLeft=6]="MoveLeft",e[e.MoveRight=7]="MoveRight",e[e.TurnClockwise=8]="TurnClockwise",e[e.MoveDown=9]="MoveDown",e[e.FiguresFallDown=10]="FiguresFallDown"}(t||(t={}));class o{constructor(e){this.gameData=e}getCommandType(){return t.InitGame}}class c{constructor(e){this.gameData=e}getCommandType(){return t.ResumeGame}}class h{constructor(e){this.gameData=e}getCommandType(){return t.PauseGame}}class u{constructor(e){this.gameData=e}getCommandType(){return t.FiguresFallTick}}class m{constructor(e){this.gameData=e}getCommandType(){return t.GameOver}}class d{constructor(e){this.gameData=e}getCommandType(){return t.Render}}class g{constructor(e){this.gameData=e}getCommandType(){return t.MoveLeft}}class p{constructor(e){this.gameData=e}getCommandType(){return t.MoveRight}}class f{constructor(e){this.gameData=e}getCommandType(){return t.TurnClockwise}}class w{constructor(e){this.gameData=e}getCommandType(){return t.MoveDown}}class v{constructor(e){this.gameData=e}getCommandType(){return t.FiguresFallDown}}class F{constructor(){this.handlers=new Map}addHandler(e,t,s=!0){let i=this.handlers.get(e)||[];s&&i.some((e=>e===t))||(i.push(t),this.handlers.set(e,i))}removeHandler(e,t){let s=this.handlers.get(e)||[],i=s.indexOf(t);i>0&&s.splice(i,1),this.handlers.set(e,s)}run(e){(this.handlers.get(e.getCommandType())||[]).forEach((t=>{t(e)}))}}!function(e){e[e.One=0]="One",e[e.Two=1]="Two",e[e.Three=2]="Three",e[e.Four=3]="Four"}(s||(s={}));class T{getTurn(e){switch(e){case s.One:return this.getFirstTurn();case s.Two:return this.getSecondTurn();case s.Three:return this.getThirdTurn();case s.Four:return this.getForthTurn()}}}class C extends T{getNormalizedFigure(){let e=this.getFigure(),t=e.reduce(((e,t)=>Math.max(e,t.length)),0);return e.map((e=>{let s=e.length;return e.length=t,e.fill(!1,s-1,t-1)}))}getFirstTurn(){return this.getNormalizedFigure()}getSecondTurn(){let e=this.getNormalizedFigure(),t=[],s=e.length,i=e[0].length;for(let n=0;n<i;n++){t[n]=new Array(s).fill(!1);for(let i=0;i<s;i++)t[n][s-i-1]=e[i][n]}return t}getThirdTurn(){return this.getFirstTurn().reverse().map((e=>e.reverse()))}getForthTurn(){return this.getSecondTurn().reverse().map((e=>e.reverse()))}}class D extends C{getFigure(){return["###".split("").map((e=>"#"===e)),"-#-".split("").map((e=>"#"===e))]}}class S extends C{getFigure(){return["###".split("").map((e=>"#"===e)),"--#".split("").map((e=>"#"===e))]}}class x extends C{getFigure(){return["###".split("").map((e=>"#"===e)),"#--".split("").map((e=>"#"===e))]}}class M extends C{getFigure(){return["##".split("").map((e=>"#"===e)),"##".split("").map((e=>"#"===e))]}}class H extends C{getFigure(){return["####".split("").map((e=>"#"===e))]}}class y extends C{getFigure(){return["##-".split("").map((e=>"#"===e)),"-##".split("").map((e=>"#"===e))]}}class B extends C{getFigure(){return["-##".split("").map((e=>"#"===e)),"##-".split("").map((e=>"#"===e))]}}class b{constructor(e,t){this.x=e,this.y=t}}class E{constructor(e,t,s,i){this.figure=e,this.position=t,this.turnState=s,this.color=i}}class G{constructor(e,t,s){this.fieldWidth=e,this.fieldHeight=t,this.figures=s}}class O{constructor(){this.figuresFallen=0,this.linesSquashed=0}}class k{constructor(e=!1,t=!1,s=[],i=[],n=setTimeout((()=>{})),a,r=1,l=0,o=0,c=new O){this.isInitialized=e,this.isGameOver=t,this.fallingFigures=s,this.matrix=i,this.nextTickTimeoutId=n,this.settings=a,this.level=r,this.score=l,this.combo=o,this.stats=c}static makeSimple(e=10,t=20){return new k(!1,!1,[],new Array(t).fill([]).map((t=>new Array(e).fill(!1))),setTimeout((()=>{})),new G(e,t,[new D,new S,new x,new M,new H,new y,new B]))}}class P{constructor(e,s,i){this.timingsHandler=e,this.eventBus=s,this.commandBus=i,this.gameData=k.makeSimple(),this.commandBus.addHandler(t.InitGame,this.initGameHandler.bind(this)),this.commandBus.addHandler(t.ResumeGame,this.resumeGameHandler.bind(this)),this.commandBus.addHandler(t.PauseGame,this.pauseGameHandler.bind(this)),this.commandBus.addHandler(t.GameOver,this.gameOverHandler.bind(this))}initGameHandler(t){this.gameData=t.gameData,this.gameData.isInitialized=!0,this.eventBus.on(e.FallingTickProcessed,this.onFallTickProcessed.bind(this))}resumeGameHandler(e){this.gameData.isGameOver||(this.gameData.isInitialized||this.commandBus.run(new o(e.gameData)),this.fallTick())}pauseGameHandler(e){this.gameData=e.gameData,clearTimeout(this.gameData.nextTickTimeoutId),this.commandBus.run(new d(this.gameData))}gameOverHandler(){this.gameData.isInitialized=!1,this.gameData.isGameOver=!0,clearTimeout(this.gameData.nextTickTimeoutId),this.eventBus.fire(new n(this.gameData))}fallTick(){this.commandBus.run(new u(this.gameData))}onFallTickProcessed(e){clearTimeout(this.gameData.nextTickTimeoutId),this.gameData.isGameOver||(this.gameData.nextTickTimeoutId=setTimeout(this.fallTick.bind(this),this.timingsHandler.getDelayForNextTickMs(this.gameData)))}}class R{static canFigureBePlaced(e,t,s){return e.every(((e,i)=>e.every(((e,n)=>{const a=t.y+i,r=t.x+n;return!e||a<0&&r>=0&&r<=s[0].length-1||a in s&&r in s[a]&&!s[a][r]}))))}}class L{constructor(e,t,s){this.filled=e,this.filledGameOver=t,this.empty=s}}class I{constructor(e,t=!0,s=new L("#007400","#780000","#fff"),i=new L("#007400","#780000",null),n=new L("#b8e5e3",null,null)){this.containerElement=e,this.renderProjectionFigures=t,this.matrixCellColors=s,this.fallingFigureCellColors=i,this.projectionFigureCellColors=n}}class q{constructor(e,t){this.filled=e,this.empty=t}}class A{constructor(e,s,i){this.renderSettings=e,this.commandBus=s,this.eventBus=i,this.cellsHtmlElementsMap=[],s.addHandler(t.InitGame,this.initHandler.bind(this)),s.addHandler(t.Render,this.renderCommandHandler.bind(this))}initHandler(t){this.table=A.createHtmlElement('<div style="float: left; display: table; border-collapse: collapse"></div>'),this.cellsHtmlElementsMap=[];for(let e=0;e<t.gameData.settings.fieldHeight;e++){let s=A.createHtmlElement('<div style="display: table-row"></div>');this.cellsHtmlElementsMap[e]=[];for(let i=0;i<t.gameData.settings.fieldWidth;i++){let t=A.createHtmlElement('<div style="display: table-cell; border: 1px solid #ccc; width: 20px; height: 20px"></div>');this.cellsHtmlElementsMap[e][i]=t,s.appendChild(t)}this.table.appendChild(s)}this.renderSettings.containerElement.innerHTML="",this.renderSettings.containerElement.appendChild(this.table),this.scoreDisplay=A.createHtmlElement('<div style="float: left; font-family: \'Helvetica Neue\', sans-serif; font-size: 20px; margin-left: 15px;">\n                Level: <span id="level"></span><br>\n                Score: <span id="score"></span><br>\n                Combo: <span id="combo"></span><br>\n                Figures fallen: <span id="figures_fallen"></span><br>\n                Lines squashed: <span id="lines_squashed"></span><br>\n            </div>'),this.renderSettings.containerElement.appendChild(this.scoreDisplay),this.renderSettings.containerElement.appendChild(A.createHtmlElement('<div style="clear: both"></div>')),this.eventBus.on(e.FallingTickProcessed,this.onFallTickProcessed.bind(this)),this.eventBus.on(e.GameOver,this.onGameOver.bind(this)),this.eventBus.on(e.FiguresMoved,this.onFiguresMoved.bind(this))}onFiguresMoved(e){this.renderState(e.gameData)}onFallTickProcessed(e){this.renderState(e.gameData)}onGameOver(e){this.renderState(e.gameData)}renderCommandHandler(e){this.renderState(e.gameData)}renderState(e){this.repaintMatrixCells(e.matrix,new b(0,0),e),this.renderSettings.renderProjectionFigures&&this.renderFallingFiguresProjection(e),this.renderFallingFigures(e),this.renderStats(e)}renderFallingFigures(e){e.fallingFigures.forEach((t=>{this.repaintFallingFiguresCells(t,e)}))}renderFallingFiguresProjection(e){e.fallingFigures.forEach((t=>{const s=t.figure.getTurn(t.turnState),i=t.position.x;let n=t.position.y;for(;R.canFigureBePlaced(s,new b(i,n+1),e.matrix);)n++;this.repaintProjectionFiguresCells(s,new b(i,n),e)}))}repaintMatrixCells(e,t,s){let i;i=s.isGameOver?new q(this.renderSettings.matrixCellColors.filledGameOver,this.renderSettings.matrixCellColors.empty):new q(this.renderSettings.matrixCellColors.filled,this.renderSettings.matrixCellColors.empty),this.repaintCells(e,t,i)}repaintFallingFiguresCells(e,t){let s;s=t.isGameOver?new q(this.renderSettings.fallingFigureCellColors.filledGameOver,this.renderSettings.fallingFigureCellColors.empty):new q(e.color||this.renderSettings.fallingFigureCellColors.filled,this.renderSettings.fallingFigureCellColors.empty),this.repaintCells(e.figure.getTurn(e.turnState),e.position,s)}repaintProjectionFiguresCells(e,t,s){let i;i=s.isGameOver?new q(this.renderSettings.projectionFigureCellColors.filledGameOver,this.renderSettings.projectionFigureCellColors.empty):new q(this.renderSettings.projectionFigureCellColors.filled,this.renderSettings.projectionFigureCellColors.empty),this.repaintCells(e,t,i)}repaintCells(e,t,s){e.forEach(((e,i)=>{e.forEach(((e,n)=>{const a=i+t.y,r=n+t.x;if(a in this.cellsHtmlElementsMap&&r in this.cellsHtmlElementsMap[a]){const t=e?s.filled:s.empty;null!==t&&(this.cellsHtmlElementsMap[a][r].style.background=t)}}))}))}renderStats(e){const t=document.getElementById("level"),s=document.getElementById("score"),i=document.getElementById("combo"),n=document.getElementById("figures_fallen"),a=document.getElementById("lines_squashed");null!==t&&(t.innerHTML=e.level.toString()),null!==s&&(s.innerHTML=e.score.toString()),null!==i&&(i.innerHTML=e.combo.toString()),null!==n&&(n.innerHTML=e.stats.figuresFallen.toString()),null!==a&&(a.innerHTML=e.stats.linesSquashed.toString())}static createHtmlElement(e){let t=document.createElement("div");if(t.innerHTML=e,t.children.length>1||null===t.firstElementChild)throw"The HTML must contain only one child";if(!(t.firstElementChild instanceof HTMLElement))throw"Something went wrong while trying to get HTMLElement child from div";return t.firstElementChild}}class j{constructor(){this.transferredFigures=[],this.isGameOver=!1}}class N{constructor(e,s){this.commandBus=e,this.eventBus=s,this.commandBus.addHandler(t.FiguresFallTick,this.processFiguresFallTickCommand.bind(this)),this.commandBus.addHandler(t.FiguresFallDown,this.processDropFiguresCommand.bind(this))}processFiguresFallTickCommand(e){const t=this.fallFiguresForOneCell(e.gameData);let s=this.squashLines(e.gameData.matrix);t.isGameOver&&this.commandBus.run(new m(e.gameData)),this.eventBus.fire(new i(e.gameData,t.transferredFigures,s,0))}processDropFiguresCommand(e){let t=new j,s=0;for(;e.gameData.fallingFigures.length>0;){const i=this.fallFiguresForOneCell(e.gameData);t.transferredFigures.push(...i.transferredFigures),t.isGameOver=t.isGameOver||i.isGameOver,s++}let n=this.squashLines(e.gameData.matrix);t.isGameOver&&this.commandBus.run(new m(e.gameData)),this.eventBus.fire(new i(e.gameData,t.transferredFigures,n,s-1))}fallFiguresForOneCell(e){let t=new j;return e.fallingFigures.forEach(((s,i)=>{if(this.figureCanFall(e.matrix,s))s.position.y++;else{let n=this.transferFigureToMatrix(e.matrix,s);t.transferredFigures.push(...e.fallingFigures.splice(i,1)),t.isGameOver=t.isGameOver||n}})),t}figureCanFall(e,t){return R.canFigureBePlaced(t.figure.getTurn(t.turnState),new b(t.position.x,t.position.y+1),e)}transferFigureToMatrix(e,t){let s=!1;return t.figure.getTurn(t.turnState).forEach(((i,n)=>{i.forEach(((i,a)=>{if(!i)return;let r=t.position.x+a,l=t.position.y+n;l in e&&r in e[l]&&!e[l][r]?e[l][r]=!0:s=!0}))})),s}squashLines(e){let t=[];return e.forEach(((e,s)=>{e.every((e=>e))&&t.push(s)}),0),t.forEach((t=>{e.splice(t,1),e.unshift(new Array(e[0].length).fill(!1))})),t}}class X{static ToArray(e){return Object.keys(e).map((e=>Number.parseInt(e))).filter((e=>!Number.isNaN(e)))}static GetRandom(e){const t=X.ToArray(e);return t[Math.floor(Math.random()*t.length)]}}class z{constructor(e,s){this.eventBus=e,this.commandBus=s,this.commandBus.addHandler(t.InitGame,this.initHandler.bind(this))}initHandler(t){this.eventBus.on(e.FallingTickProcessed,this.processOnFallTick.bind(this))}processOnFallTick(e){this.addFigure(e.gameData)}addFigure(e){if(e.fallingFigures.length>0||e.isGameOver)return;const t=Math.floor(Math.random()*e.settings.figures.length),i=e.settings.figures[t],n=X.GetRandom(s),a=i.getTurn(n),l=Math.max(...a.map((e=>e.length))),o=new b(Math.ceil(e.settings.fieldWidth/2-l/2)-1,-a.length),c=new E(i,o,n);e.fallingFigures.push(c),this.eventBus.fire(new r(e,[c]))}}class W{constructor(e,s){this.commandBus=e,this.eventBus=s,this.commandBus.addHandler(t.MoveLeft,this.processMoveLeftCommand.bind(this)),this.commandBus.addHandler(t.MoveRight,this.processMoveRightCommand.bind(this)),this.commandBus.addHandler(t.MoveDown,this.processMoveDownCommand.bind(this)),this.commandBus.addHandler(t.TurnClockwise,this.processTurnClockwiseCommand.bind(this))}processMoveLeftCommand(e){e.gameData.fallingFigures.forEach((t=>{R.canFigureBePlaced(t.figure.getTurn(t.turnState),new b(t.position.x-1,t.position.y),e.gameData.matrix)&&t.position.x--})),this.eventBus.fire(new a(e.gameData))}processMoveRightCommand(e){e.gameData.fallingFigures.forEach((t=>{R.canFigureBePlaced(t.figure.getTurn(t.turnState),new b(t.position.x+1,t.position.y),e.gameData.matrix)&&t.position.x++})),this.eventBus.fire(new a(e.gameData))}processTurnClockwiseCommand(e){const t=X.ToArray(s);e.gameData.fallingFigures.forEach((s=>{let i=s.turnState+1;i in t||(i=t[0]),R.canFigureBePlaced(s.figure.getTurn(i),s.position,e.gameData.matrix)&&(s.turnState=i)})),this.eventBus.fire(new a(e.gameData))}processMoveDownCommand(e){this.commandBus.run(new u(e.gameData))}}class _{constructor(e){this.commandBus=e,this.commandBus.addHandler(t.InitGame,this.processInitGameCommand.bind(this))}processInitGameCommand(e){window.onkeydown=t=>{"ArrowLeft"===t.code?this.commandBus.run(new g(e.gameData)):"ArrowRight"===t.code?this.commandBus.run(new p(e.gameData)):"ArrowUp"===t.code?this.commandBus.run(new f(e.gameData)):"ArrowDown"===t.code||"ArrowDown"===t.code?this.commandBus.run(new w(e.gameData)):"Space"===t.code&&this.commandBus.run(new v(e.gameData))}}}class U{constructor(e,s,i=new Map([[1,100],[2,300],[3,500],[4,800]]),n=50){this.commandBus=e,this.eventBus=s,this.squashedRowsRewardThresholdsMap=i,this.rewardOnCombo=n,e.addHandler(t.InitGame,this.initGameHandler.bind(this))}initGameHandler(t){this.eventBus.on(e.FallingTickProcessed,this.onFallingTickProcessed.bind(this))}onFallingTickProcessed(e){if(e.squashedLines.length<0)return;let t=0;this.squashedRowsRewardThresholdsMap.forEach(((s,i)=>{i>e.squashedLines.length||(t=s)})),e.gameData.score+=t*e.gameData.level+this.rewardOnCombo*Math.max(0,e.gameData.combo-1)*e.gameData.level+2*e.droppedLines*e.gameData.level}}class Y{constructor(e,s,i,n){this.eventBus=e,this.commandBus=s,this.levelIncreaseOnSquashedRowsNumber=i,this.maxLevels=n,this.squashedRowsCounter=0,this.commandBus.addHandler(t.InitGame,this.processInitGameCommand.bind(this))}processInitGameCommand(t){this.eventBus.on(e.FallingTickProcessed,this.onFallTickProcessed.bind(this))}onFallTickProcessed(e){0!==e.squashedLines.length&&(this.squashedRowsCounter++,this.squashedRowsCounter>=this.levelIncreaseOnSquashedRowsNumber&&(this.squashedRowsCounter=0,e.gameData.level=Math.min(this.maxLevels,e.gameData.level+1)))}}class J{constructor(e,s){this.commandBus=e,this.eventBus=s,e.addHandler(t.InitGame,this.initGameHandler.bind(this))}initGameHandler(t){this.eventBus.on(e.FallingTickProcessed,this.onFallTickProcessed.bind(this))}onFallTickProcessed(e){e.transferredToMatrixFigures.length<=0||(e.squashedLines.length>0?e.gameData.combo+=1:e.gameData.combo=0)}}class K{constructor(e){this.delayMs=e}getDelayForNextTickMs(e){return this.delayMs}}class Q{constructor(e,s){this.commandBus=e,this.eventBus=s,e.addHandler(t.InitGame,this.initGameHandler.bind(this))}initGameHandler(t){this.eventBus.on(e.FallingTickProcessed,this.onFallingTickProcessed.bind(this))}onFallingTickProcessed(e){e.gameData.stats.figuresFallen+=e.transferredToMatrixFigures.length,e.gameData.stats.linesSquashed+=e.squashedLines.length}}class V{constructor(e=new l,t=new F,s=new P(new K(2e3),e,t),i=new W(t,e),n=new _(t),a=new N(t,e),r=new z(e,t),o=new Y(e,t,8,15),c=new J(t,e),h=new U(t,e),u=new Q(t,e),m=new A(new I(document.body),t,e),d=k.makeSimple()){this.eventBus=e,this.commandBus=t,this.gameController=s,this.movingHandler=i,this.movingController=n,this.fallingFiguresProcessor=a,this.figuresSpawner=r,this.levelCounter=o,this.comboCounter=c,this.scoreCounter=h,this.statsCounter=u,this.tableRenderer=m,this.gameData=d}start(e){e=e||k.makeSimple(),this.commandBus.run(new o(e)),this.commandBus.run(new c(e))}resume(){this.commandBus.run(new c(this.gameData))}pause(){this.commandBus.run(new h(this.gameData))}}class Z{constructor(e,t){this.target=e,this._persisted=t}get persisted(){return this._persisted}}class ${constructor(e,t){this.target=e,this._persisted=t}get persisted(){return this._persisted}}class ee{constructor(e){this.target=e}get persisted(){return!1}}class te{get persisted(){return!1}}class se{constructor(e,t){this.figuresTargetStates=e,this.placingSteps=t}}class ie{constructor(e,t){this.isOpened=e,this.cells=t}}class ne{static collectHoles(e){let t=[];class s{constructor(e=[],t=[],s=[],i=!1,n=!1){this.cells=e,this.previousRowOpenXs=t,this.currentRowOpenXs=s,this.isOpened=i,this.continues=n}}let i=[],n=new Set;return e.forEach(((a,r)=>{i.forEach((e=>e.continues=!1)),a.forEach(((t,a)=>{if(t)n.add(a);else if(n.has(a)){let t=i.find((e=>e.previousRowOpenXs.some((e=>e===a))||e.currentRowOpenXs.length>0&&e.currentRowOpenXs[e.currentRowOpenXs.length-1]===a));void 0===t&&(t=new s,i.push(t)),t.currentRowOpenXs.push(a),t.cells.push(new b(a,r)),t.continues=!0,t.isOpened=t.isOpened||this.doesTheWayOutFromHoleExists(e,new b(a,r),n,[[!0,!0]])}}));let l=[];i.forEach(((s,i)=>{s.continues&&(s.previousRowOpenXs=s.currentRowOpenXs,s.currentRowOpenXs=[]),s.continues&&r!=e.length-1||(t.push(new ie(s.isOpened,s.cells)),l.push(i))})),l.reverse().forEach((e=>i.splice(e,1)))})),t}static doesTheWayOutFromHoleExists(e,t,s,i){return void 0!==this.findTheWayOutFromHole(e,t,s,i)}static findTheWayOutFromHole(e,t,s,i){s instanceof Map&&(s=ne.convertCoveredColumnsToXs(s));for(let n=t.x-1;n>=0&&R.canFigureBePlaced(i,new b(n,t.y),e);n--){let e=!0;for(let t=n+i[0].length-1;t>=n;t--)if(s.has(t)){e=!1;break}if(e)return n}for(let n=t.x+1;n<e[0].length&&R.canFigureBePlaced(i,new b(n,t.y),e);n++){let e=!0;for(let t=n;t<n+i[0].length;t++)if(s.has(t)){e=!1;break}if(e)return n}}static collectCoveredColumnsXs(e,t){return ne.convertCoveredColumnsToXs(ne.collectCoveredColumns(e,t))}static convertCoveredColumnsToXs(e){return new Set([...e.keys()])}static collectCoveredColumns(e,t){let s=new Map;return e.some(((i,n)=>(i.forEach(((e,t)=>{e&&s.set(t,n)})),void 0!==t&&n>=t||s.size==e[0].length))),s}}class ae{constructor(e,t,s,i,n,a){this.gameData=e,this.originalHoles=t,this.originalCoveredColumns=s,this.imaginableMatrix=i,this.imaginableCoveredColumns=n,this.squashedLinesCount=a}}class re extends Error{}class le extends re{}class oe{constructor(e,t){this.commandBus=e,this.scoreCalculator=t}resolve(e){if(0===e.fallingFigures.length)return;if(1!==e.fallingFigures.length)throw new le;const t=e.fallingFigures[0];let s=-1/0,i=new se(new Map,[]);this.processStates(e,((e,n,a)=>{n>s&&(s=n,i=new se(new Map([[t,e]]),a))}));let n="debugMode"in window&&window.debugMode,a=i.figuresTargetStates.get(t);if(n&&void 0!==a){let t=structuredClone(e);a.color="#f00",t.fallingFigures=[a],this.commandBus.run(new d(t)),this.processStates(e,void 0,(e=>{e.color="#00f",t.fallingFigures=[e],this.commandBus.run(new d(t))}))}return i}processStates(e,t,i){const n=e.fallingFigures[0];let a=X.ToArray(s);for(;a[0]!==n.turnState;)a.unshift(a.pop());let r=new Map,l=new Set;a.forEach((e=>{let t=n.figure.getTurn(e),s=t.map((e=>e.map((e=>e?"1":"0")).join())).join("\n");l.has(s)||(l.add(s),r.set(e,t))}));const o=ne.collectHoles(e.matrix),c=ne.collectCoveredColumns(e.matrix);r.forEach(((s,a)=>{for(let r=0;r<e.settings.fieldWidth-s[0].length+1;r++){let[l,h]=this.imagineFigureDrop(e.matrix,s,r),u=new b(r,l),m=this.squashLines(h),d=new E(n.figure,u,a);i&&i(d);let g=ne.collectCoveredColumns(h),p=new ae(e,o,c,h,g,m),f=this.scoreCalculator.calculateScore(p),w=this.makeSimplePlacingSteps(d);t&&t(d,f,w)}})),o.filter((e=>e.isOpened&&e.cells.length>0)).forEach((s=>{let a=e.settings.fieldHeight,l=e.settings.fieldWidth,h=-1,u=-1;s.cells.forEach((e=>{a=Math.min(a,e.y),l=Math.min(l,e.x),h=Math.max(h,e.y),u=Math.max(u,e.x)})),r.forEach(((s,r)=>{for(let m=Math.max(a-s.length+1,0);m<=h;m++)for(let a=Math.max(l-s[0].length+1,0);a<=u;a++){let l=new b(a,m),h=new E(n.figure,l,r);if(i&&i(h),R.canFigureBePlaced(s,l,e.matrix)){let i=this.makePushInPlacingSteps(e,h,c);if(void 0!==i){let n=this.imagineFigurePlacing(e.matrix,s,l),a=this.squashLines(n),r=ne.collectCoveredColumns(n),u=new ae(e,o,c,n,r,a),m=this.scoreCalculator.calculateScore(u);t&&t(h,m,i)}}}}))}))}squashLines(e){let t=[];return e.forEach(((e,s)=>{e.every((e=>e))&&t.push(s)}),0),t.forEach((t=>{e.splice(t,1),e.unshift(new Array(e[0].length).fill(!1))})),t.length}imagineFigureDrop(e,t,s){let i=-t.length;for(;R.canFigureBePlaced(t,new b(s,i+1),e);)i++;return[i,this.imagineFigurePlacing(e,t,new b(s,i))]}imagineFigurePlacing(e,t,s){let i=structuredClone(e);return t.forEach(((e,t)=>{e.forEach(((e,n)=>{const a=s.y+t,r=s.x+n;a in i&&r in i[a]&&e&&(i[a][r]=!0)}))})),i}makePushInPlacingSteps(e,t,s){let i=t.figure.getTurn(t.turnState),n=ne.findTheWayOutFromHole(e.matrix,t.position,s,i);if(void 0!==n)return[new Z(t.turnState,!0),new $(n,!1),new ee(t.position.y),new $(t.position.x,!0),new te]}makeSimplePlacingSteps(e){return[new Z(e.turnState,!0),new $(e.position.x,!0),new te]}}class ce{constructor(e,t=.8){this.initialDelayMs=e,this.base=t}getDelayForNextTickMs(e){return Math.pow(this.base-.007*(e.level-1),e.level-1)*this.initialDelayMs}}class he extends Error{}class ue extends he{}class me extends he{}class de extends he{}class ge{constructor(e){this.step=e,this.isPerformed=!1}}class pe{constructor(e,t){this.figures=e,this.steps=t}static fromFigurePlacingResult(e){if(void 0!==e)return new pe(e.figuresTargetStates,e.placingSteps.map((e=>new ge(e))))}}class fe{constructor(e,t=new ce(100,.9)){this.commandBus=e,this.timingsHandler=t,this.nextMoveTimeoutId=setTimeout((()=>{})),this.gameData=k.makeSimple()}place(e,t){this.gameData=e,this.targetState=pe.fromFigurePlacingResult(t),clearTimeout(this.nextMoveTimeoutId),this.nextMoveTimeoutId=setTimeout(this.processTick.bind(this),this.timingsHandler.getDelayForNextTickMs(this.gameData))}processTick(){if(0===this.gameData.fallingFigures.length)return;if(1!==this.gameData.fallingFigures.length)throw new ue;if(void 0===this.targetState)return;const e=this.gameData.fallingFigures[0],t=this.targetState.figures.get(e);if(t){if(e.figure!==t.figure)throw new me("Both of the original and the target falling figures must have the same figure in it.");this.targetState.steps.every((t=>{if(t.isPerformed&&!t.step.persisted)return!0;let s=t.step;if(s instanceof Z){if(e.turnState!==s.target)return this.commandBus.run(new f(this.gameData)),!1;t.isPerformed=!0}else if(s instanceof $){if(e.position.x!==s.target)return e.position.x>s.target?this.commandBus.run(new g(this.gameData)):this.commandBus.run(new p(this.gameData)),!1;t.isPerformed=!0}else if(s instanceof ee){if(e.position.y<s.target)return this.commandBus.run(new w(this.gameData)),!1;t.isPerformed=!0}else{if(!(s instanceof te))throw new de("Unknown step "+s.constructor.name);this.commandBus.run(new v(this.gameData)),t.isPerformed=!0}return t.isPerformed}))||(this.nextMoveTimeoutId=setTimeout(this.processTick.bind(this),10))}}}class we{constructor(e){this.calculators=e}calculateScore(e){return this.calculators.reduce(((t,s)=>t+s.calculateScore(e)),0)}}class ve{calculateScore(e){return 5*e.squashedLinesCount}}class Fe{calculateScore(e){const t=e.gameData.settings.fieldHeight,s=e.gameData.settings.fieldWidth,[i,n]=this.calculateFillableSpace(e.imaginableMatrix,s);let a=0;return n>5&&(a=-i*Math.pow(i,i/(t*s))),a}calculateFillableSpace(e,t){let s=new Set,i=0,n=0;return e.every((e=>(e.forEach(((e,t)=>{e&&s.add(t)})),e.forEach(((e,t)=>{!e&&s.size>0&&!s.has(t)&&i++})),s.size<t&&(s.size>0&&n++,!0)))),[i,n]}}class Te{calculateScore(e){const[t,s]=this.calculateHolesAndCoveredHeight(e.imaginableMatrix,e.gameData.matrix),i=e.originalHoles.length-t;let n;return n=0===s||0===t?i>0?150*i:70*i:(i>0?150*i:70*i)-s*Math.pow(s,s/(e.gameData.settings.fieldHeight*t))*5,n}calculateHolesAndCoveredHeight(e,t){const[s,i]=this.calculateTheHighestHoleCoveredY(t);let n=new Map,a=0,r=0;return e.forEach(((e,t)=>{e.forEach(((e,l)=>{e&&!n.has(l)&&n.set(l,t);let o=n.get(l);void 0===o||e||(r++,void 0!==s&&void 0!==i&&(t<s?a+=t-o:o<i&&(a+=i-o)))}))})),[r,a]}calculateTheHighestHoleCoveredY(e){let t,s,i=new Map;return e.some(((e,n)=>e.some(((e,a)=>{e&&!i.has(a)&&i.set(a,n);let r=i.get(a);return void 0!==r&&!e&&(s=n,t=r,!0)})))),[s,t]}}class Ce{calculateScore(e){const t=this.calculateHeight(e.imaginableMatrix);return-t*Math.pow(t,t/e.gameData.settings.fieldHeight)*3}calculateHeight(e){let t=-1;return e.every(((e,s)=>!!e.every((e=>!e))&&(t=s,!0))),e.length-t-1}}class De{calculateScore(e){const[t,s]=this.calculateTunnelsExceptUncovered(e.imaginableMatrix,e.gameData.matrix);let i;return i=0===s?0:70*-s-t*Math.pow(t,t/(e.gameData.settings.fieldHeight*s))*7,i}calculateTunnelsExceptUncovered(e,t){let s=new Set;t.every((e=>{e.forEach(((e,t)=>{e&&s.add(t)}))}));let i=new Set,n=new Map;const a=e[0].length;e.every(((e,t)=>(e.forEach(((e,t)=>{e&&i.add(t)})),e.forEach(((e,t)=>{e||i.has(t)||s.has(t)||0!==t&&!i.has(t-1)||t!==a-1&&!i.has(t+1)||n.set(t,(n.get(t)||0)+1)})),i.size<a)));let r=0,l=0;return n.forEach((e=>{e>=3&&(r+=e,l++)})),[r,l]}}class Se{constructor(e,s,i=new oe(s,new we([new Fe,new Ce,new Te,new ve,new De])),n=new fe(s)){this.eventBus=e,this.commandBus=s,this.fallingFigurePlacingResolver=i,this.fallingFiguresPlacer=n,this.commandBus.addHandler(t.InitGame,this.initGameHandler.bind(this))}initGameHandler(t){this.eventBus.on(e.FiguresSpawned,this.onFiguresSpawned.bind(this))}onFiguresSpawned(e){const t=this.fallingFigurePlacingResolver.resolve(e.gameData);this.fallingFiguresPlacer.place(e.gameData,t)}}document.addEventListener("DOMContentLoaded",(()=>{const e=new l,t=new F;let s=new V(e,t);new Se(e,t),s.start()}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,