(()=>{"use strict";var e;!function(e){e[e.FallingTickProcessed=0]="FallingTickProcessed",e[e.GameOver=1]="GameOver",e[e.FiguresMoved=2]="FiguresMoved",e[e.LevelUp=3]="LevelUp"}(e||(e={}));var t,n=function(){function t(e,t,n,i){this.gameData=e,this.transferredToMatrixFigures=t,this.squashedLines=n,this.droppedLines=i}return t.prototype.getEventType=function(){return e.FallingTickProcessed},t}(),i=function(){function t(e){this.gameData=e}return t.prototype.getEventType=function(){return e.GameOver},t}(),r=function(){function t(e){this.gameData=e}return t.prototype.getEventType=function(){return e.FiguresMoved},t}(),o=function(){function e(){this.handlers=new Map}return e.prototype.on=function(e,t,n){void 0===n&&(n=!0);var i=this.handlers.get(e)||[];n&&i.some((function(e){return e===t}))||(i.push(t),this.handlers.set(e,i))},e.prototype.off=function(e,t){var n=this.handlers.get(e)||[],i=n.indexOf(t);i>0&&n.splice(i,1),this.handlers.set(e,n)},e.prototype.fire=function(e){(this.handlers.get(e.getEventType())||[]).forEach((function(t){t(e)}))},e}();!function(e){e[e.InitGame=0]="InitGame",e[e.ResumeGame=1]="ResumeGame",e[e.PauseGame=2]="PauseGame",e[e.FiguresFallTick=3]="FiguresFallTick",e[e.GameOver=4]="GameOver",e[e.Render=5]="Render",e[e.MoveLeft=6]="MoveLeft",e[e.MoveRight=7]="MoveRight",e[e.TurnClockwise=8]="TurnClockwise",e[e.MoveDown=9]="MoveDown",e[e.FiguresFallDown=10]="FiguresFallDown"}(t||(t={}));var a,s,u=function(){function e(e){this.gameData=e}return e.prototype.getCommandType=function(){return t.InitGame},e}(),l=function(){function e(e){this.gameData=e}return e.prototype.getCommandType=function(){return t.ResumeGame},e}(),c=function(){function e(e){this.gameData=e}return e.prototype.getCommandType=function(){return t.PauseGame},e}(),m=function(){function e(e){this.gameData=e}return e.prototype.getCommandType=function(){return t.FiguresFallTick},e}(),h=function(){function e(e){this.gameData=e}return e.prototype.getCommandType=function(){return t.GameOver},e}(),d=function(){function e(e){this.gameData=e}return e.prototype.getCommandType=function(){return t.Render},e}(),p=function(){function e(e){this.gameData=e}return e.prototype.getCommandType=function(){return t.MoveLeft},e}(),f=function(){function e(e){this.gameData=e}return e.prototype.getCommandType=function(){return t.MoveRight},e}(),g=function(){function e(e){this.gameData=e}return e.prototype.getCommandType=function(){return t.TurnClockwise},e}(),v=function(){function e(e){this.gameData=e}return e.prototype.getCommandType=function(){return t.MoveDown},e}(),y=function(){function e(e){this.gameData=e}return e.prototype.getCommandType=function(){return t.FiguresFallDown},e}(),F=function(){function e(){this.handlers=new Map}return e.prototype.addHandler=function(e,t,n){void 0===n&&(n=!0);var i=this.handlers.get(e)||[];n&&i.some((function(e){return e===t}))||(i.push(t),this.handlers.set(e,i))},e.prototype.removeHandler=function(e,t){var n=this.handlers.get(e)||[],i=n.indexOf(t);i>0&&n.splice(i,1),this.handlers.set(e,n)},e.prototype.run=function(e){(this.handlers.get(e.getCommandType())||[]).forEach((function(t){t(e)}))},e}(),w=(a=function(e,t){return a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},a(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}a(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});!function(e){e[e.One=0]="One",e[e.Two=1]="Two",e[e.Three=2]="Three",e[e.Four=3]="Four"}(s||(s={}));var T=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return w(t,e),t.prototype.getNormalizedFigure=function(){var e=this.getFigure(),t=e.reduce((function(e,t){return Math.max(e,t.length)}),0);return e.map((function(e){var n=e.length;return e.length=t,e.fill(!1,n-1,t-1)}))},t.prototype.getFirstTurn=function(){return this.getNormalizedFigure()},t.prototype.getSecondTurn=function(){for(var e=this.getNormalizedFigure(),t=[],n=e.length,i=e[0].length,r=0;r<i;r++){t[r]=new Array(n).fill(!1);for(var o=0;o<n;o++)t[r][n-o-1]=e[o][r]}return t},t.prototype.getThirdTurn=function(){return this.getFirstTurn().reverse().map((function(e){return e.reverse()}))},t.prototype.getForthTurn=function(){return this.getSecondTurn().reverse().map((function(e){return e.reverse()}))},t}(function(){function e(){}return e.prototype.getTurn=function(e){switch(e){case s.One:return this.getFirstTurn();case s.Two:return this.getSecondTurn();case s.Three:return this.getThirdTurn();case s.Four:return this.getForthTurn()}},e}()),C=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return w(t,e),t.prototype.getFigure=function(){return["###".split("").map((function(e){return"#"===e})),"-#-".split("").map((function(e){return"#"===e}))]},t}(T),D=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return w(t,e),t.prototype.getFigure=function(){return["###".split("").map((function(e){return"#"===e})),"--#".split("").map((function(e){return"#"===e}))]},t}(T),B=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return w(t,e),t.prototype.getFigure=function(){return["###".split("").map((function(e){return"#"===e})),"#--".split("").map((function(e){return"#"===e}))]},t}(T),M=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return w(t,e),t.prototype.getFigure=function(){return["##".split("").map((function(e){return"#"===e})),"##".split("").map((function(e){return"#"===e}))]},t}(T),b=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return w(t,e),t.prototype.getFigure=function(){return["####".split("").map((function(e){return"#"===e}))]},t}(T),H=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return w(t,e),t.prototype.getFigure=function(){return["##-".split("").map((function(e){return"#"===e})),"-##".split("").map((function(e){return"#"===e}))]},t}(T),G=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return w(t,e),t.prototype.getFigure=function(){return["-##".split("").map((function(e){return"#"===e})),"##-".split("").map((function(e){return"#"===e}))]},t}(T),S=function(e,t){this.x=e,this.y=t},O=function(e,t,n){this.figure=e,this.position=t,this.turnState=n},k=function(e,t,n){this.fieldWidth=e,this.fieldHeight=t,this.figures=n},x=function(){function e(e,t,n,i,r,o,a,s,u){void 0===e&&(e=!1),void 0===t&&(t=!1),void 0===n&&(n=[]),void 0===i&&(i=[]),void 0===r&&(r=setTimeout((function(){}))),void 0===a&&(a=1),void 0===s&&(s=0),void 0===u&&(u=0),this.isInitialized=e,this.isGameOver=t,this.fallingFigures=n,this.matrix=i,this.nextTickTimeoutId=r,this.settings=o,this.level=a,this.score=s,this.combo=u}return e.makeSimple=function(t,n){return void 0===t&&(t=10),void 0===n&&(n=20),new e(!1,!1,[],new Array(n).fill([]).map((function(e){return new Array(t).fill(!1)})),setTimeout((function(){})),new k(t,n,[new C,new D,new B,new M,new b,new H,new G]))},e}(),E=function(){function n(e,n,i){this.timingsHandler=e,this.eventBus=n,this.commandBus=i,this.gameData=x.makeSimple(),this.commandBus.addHandler(t.InitGame,this.initGameHandler.bind(this)),this.commandBus.addHandler(t.ResumeGame,this.resumeGameHandler.bind(this)),this.commandBus.addHandler(t.PauseGame,this.pauseGameHandler.bind(this)),this.commandBus.addHandler(t.GameOver,this.gameOverHandler.bind(this))}return n.prototype.initGameHandler=function(t){this.gameData=t.gameData,this.gameData.isInitialized=!0,this.eventBus.on(e.FallingTickProcessed,this.onFallTickProcessed.bind(this))},n.prototype.resumeGameHandler=function(e){this.gameData.isGameOver||(this.gameData.isInitialized||this.commandBus.run(new u(e.gameData)),this.fallTick())},n.prototype.pauseGameHandler=function(e){this.gameData=e.gameData,clearTimeout(this.gameData.nextTickTimeoutId),this.commandBus.run(new d(this.gameData))},n.prototype.gameOverHandler=function(){this.gameData.isInitialized=!1,this.gameData.isGameOver=!0,clearTimeout(this.gameData.nextTickTimeoutId),this.eventBus.fire(new i(this.gameData))},n.prototype.fallTick=function(){this.commandBus.run(new m(this.gameData))},n.prototype.onFallTickProcessed=function(e){clearTimeout(this.gameData.nextTickTimeoutId),this.gameData.isGameOver||(this.gameData.nextTickTimeoutId=setTimeout(this.fallTick.bind(this),this.timingsHandler.getDelayForNextTickMs(this.gameData)))},n}(),P=function(){function e(){}return e.canFigureBePlaced=function(e,t,n){return e.every((function(e,i){return e.every((function(e,r){var o=t.y+i,a=t.x+r;return!e||o<0&&a>=0&&a<=n[0].length-1||o in n&&a in n[o]&&!n[o][a]}))}))},e}(),L=function(e,t,n){this.filled=e,this.filledGameOver=t,this.empty=n},I=function(e,t,n,i,r){void 0===t&&(t=!0),void 0===n&&(n=new L("#007400","#780000","#fff")),void 0===i&&(i=new L("#007400","#780000",null)),void 0===r&&(r=new L("#b8e5e3",null,null)),this.containerElement=e,this.renderProjectionFigures=t,this.matrixCellColors=n,this.fallingFigureCellColors=i,this.projectionFigureCellColors=r},R=function(e,t){this.filled=e,this.empty=t},j=function(){function n(e,n,i){this.renderSettings=e,this.commandBus=n,this.eventBus=i,this.cellsHtmlElementsMap=[],n.addHandler(t.InitGame,this.initHandler.bind(this)),n.addHandler(t.Render,this.renderCommandHandler.bind(this))}return n.prototype.initHandler=function(t){this.table=n.createHtmlElement('<div style="float: left; display: table; border-collapse: collapse"></div>'),this.cellsHtmlElementsMap=[];for(var i=0;i<t.gameData.settings.fieldHeight;i++){var r=n.createHtmlElement('<div style="display: table-row"></div>');this.cellsHtmlElementsMap[i]=[];for(var o=0;o<t.gameData.settings.fieldWidth;o++){var a=n.createHtmlElement('<div style="display: table-cell; border: 1px solid #ccc; width: 20px; height: 20px"></div>');this.cellsHtmlElementsMap[i][o]=a,r.appendChild(a)}this.table.appendChild(r)}this.renderSettings.containerElement.innerHTML="",this.renderSettings.containerElement.appendChild(this.table),this.scoreDisplay=n.createHtmlElement('<div style="float: left; font-family: \'Helvetica Neue\', sans-serif; font-size: 20px; margin-left: 15px;">\n                Level: <span id="level"></span><br>\n                Score: <span id="score"></span><br>\n                Combo: <span id="combo"></span><br>\n            </div>'),this.renderSettings.containerElement.appendChild(this.scoreDisplay),this.renderSettings.containerElement.appendChild(n.createHtmlElement('<div style="clear: both"></div>')),this.eventBus.on(e.FallingTickProcessed,this.onFallTickProcessed.bind(this)),this.eventBus.on(e.GameOver,this.onGameOver.bind(this)),this.eventBus.on(e.FiguresMoved,this.onFiguresMoved.bind(this))},n.prototype.onFiguresMoved=function(e){this.renderState(e.gameData)},n.prototype.onFallTickProcessed=function(e){this.renderState(e.gameData)},n.prototype.onGameOver=function(e){this.renderState(e.gameData)},n.prototype.renderCommandHandler=function(e){this.renderState(e.gameData)},n.prototype.renderState=function(e){this.repaintMatrixCells(e.matrix,new S(0,0),e),this.renderSettings.renderProjectionFigures&&this.renderFallingFiguresProjection(e),this.renderFallingFigures(e),this.renderStats(e)},n.prototype.renderFallingFigures=function(e){var t=this;e.fallingFigures.forEach((function(n){t.repaintFallingFiguresCells(n.figure.getTurn(n.turnState),n.position,e)}))},n.prototype.renderFallingFiguresProjection=function(e){var t=this;e.fallingFigures.forEach((function(n){for(var i=n.figure.getTurn(n.turnState),r=n.position.x,o=n.position.y;P.canFigureBePlaced(i,new S(r,o+1),e.matrix);)o++;t.repaintProjectionFiguresCells(i,new S(r,o),e)}))},n.prototype.repaintMatrixCells=function(e,t,n){var i;i=n.isGameOver?new R(this.renderSettings.matrixCellColors.filledGameOver,this.renderSettings.matrixCellColors.empty):new R(this.renderSettings.matrixCellColors.filled,this.renderSettings.matrixCellColors.empty),this.repaintCells(e,t,i)},n.prototype.repaintFallingFiguresCells=function(e,t,n){var i;i=n.isGameOver?new R(this.renderSettings.fallingFigureCellColors.filledGameOver,this.renderSettings.fallingFigureCellColors.empty):new R(this.renderSettings.fallingFigureCellColors.filled,this.renderSettings.fallingFigureCellColors.empty),this.repaintCells(e,t,i)},n.prototype.repaintProjectionFiguresCells=function(e,t,n){var i;i=n.isGameOver?new R(this.renderSettings.projectionFigureCellColors.filledGameOver,this.renderSettings.projectionFigureCellColors.empty):new R(this.renderSettings.projectionFigureCellColors.filled,this.renderSettings.projectionFigureCellColors.empty),this.repaintCells(e,t,i)},n.prototype.repaintCells=function(e,t,n){var i=this;e.forEach((function(e,r){e.forEach((function(e,o){var a=r+t.y,s=o+t.x;if(a in i.cellsHtmlElementsMap&&s in i.cellsHtmlElementsMap[a]){var u=e?n.filled:n.empty;null!==u&&(i.cellsHtmlElementsMap[a][s].style.background=u)}}))}))},n.prototype.renderStats=function(e){var t=document.getElementById("level"),n=document.getElementById("score"),i=document.getElementById("combo");null!==t&&(t.innerHTML=e.level.toString()),null!==n&&(n.innerHTML=e.score.toString()),null!==i&&(i.innerHTML=e.combo.toString())},n.createHtmlElement=function(e){var t=document.createElement("div");if(t.innerHTML=e,t.children.length>1||null===t.firstElementChild)throw"The HTML must contain only one child";if(!(t.firstElementChild instanceof HTMLElement))throw"Something went wrong while trying to get HTMLElement child from div";return t.firstElementChild},n}(),q=function(){this.transferredFigures=[],this.isGameOver=!1},N=function(){function e(e,n){this.commandBus=e,this.eventBus=n,this.commandBus.addHandler(t.FiguresFallTick,this.processFiguresFallTickCommand.bind(this)),this.commandBus.addHandler(t.FiguresFallDown,this.processDropFiguresCommand.bind(this))}return e.prototype.processFiguresFallTickCommand=function(e){var t=this.fallFiguresForOneCell(e.gameData),i=this.squashLines(e.gameData.matrix);t.isGameOver&&this.commandBus.run(new h(e.gameData)),this.eventBus.fire(new n(e.gameData,t.transferredFigures,i,0))},e.prototype.processDropFiguresCommand=function(e){for(var t,i=new q,r=0;e.gameData.fallingFigures.length>0;){var o=this.fallFiguresForOneCell(e.gameData);(t=i.transferredFigures).push.apply(t,o.transferredFigures),i.isGameOver=i.isGameOver||o.isGameOver,r++}var a=this.squashLines(e.gameData.matrix);i.isGameOver&&this.commandBus.run(new h(e.gameData)),this.eventBus.fire(new n(e.gameData,i.transferredFigures,a,r-1))},e.prototype.fallFiguresForOneCell=function(e){var t=this,n=new q;return e.fallingFigures.forEach((function(i,r){var o;if(t.figureCanFall(e.matrix,i))i.position.y++;else{var a=t.transferFigureToMatrix(e.matrix,i);(o=n.transferredFigures).push.apply(o,e.fallingFigures.splice(r,1)),n.isGameOver=n.isGameOver||a}})),n},e.prototype.figureCanFall=function(e,t){return P.canFigureBePlaced(t.figure.getTurn(t.turnState),new S(t.position.x,t.position.y+1),e)},e.prototype.transferFigureToMatrix=function(e,t){var n=!1;return t.figure.getTurn(t.turnState).forEach((function(i,r){i.forEach((function(i,o){if(i){var a=t.position.x+o,s=t.position.y+r;s in e&&a in e[s]&&!e[s][a]?e[s][a]=!0:n=!0}}))})),n},e.prototype.squashLines=function(e){var t=[];return e.forEach((function(e,n){e.every((function(e){return e}))&&t.push(n)}),0),t.forEach((function(t){e.splice(t,1),e.unshift(new Array(e[0].length).fill(!1))})),t},e}(),A=function(){function n(e,n){this.eventBus=e,this.commandBus=n,this.commandBus.addHandler(t.InitGame,this.initHandler.bind(this))}return n.prototype.initHandler=function(t){this.addFigure(t.gameData),this.eventBus.on(e.FallingTickProcessed,this.processOnFallTick.bind(this))},n.prototype.processOnFallTick=function(e){this.addFigure(e.gameData)},n.prototype.addFigure=function(e){if(!(e.fallingFigures.length>0||e.isGameOver)){var t=Math.floor(Math.random()*e.settings.figures.length),n=e.settings.figures[t],i=this.getRandTurnState(),r=n.getTurn(i),o=Math.max.apply(Math,r.map((function(e){return e.length}))),a=new S(Math.ceil(e.settings.fieldWidth/2-o/2)-1,-r.length);e.fallingFigures.push(new O(n,a,i))}},n.prototype.getRandTurnState=function(){var e=Object.keys(s).map((function(e){return Number.parseInt(e)})).filter((function(e){return!Number.isNaN(e)}));return e[Math.floor(Math.random()*e.length)]},n}(),z=function(){function e(e,n){this.commandBus=e,this.eventBus=n,this.commandBus.addHandler(t.MoveLeft,this.processMoveLeftCommand.bind(this)),this.commandBus.addHandler(t.MoveRight,this.processMoveRightCommand.bind(this)),this.commandBus.addHandler(t.MoveDown,this.processMoveDownCommand.bind(this)),this.commandBus.addHandler(t.TurnClockwise,this.processTurnClockwiseCommand.bind(this))}return e.prototype.processMoveLeftCommand=function(e){e.gameData.fallingFigures.forEach((function(t){P.canFigureBePlaced(t.figure.getTurn(t.turnState),new S(t.position.x-1,t.position.y),e.gameData.matrix)&&t.position.x--})),this.eventBus.fire(new r(e.gameData))},e.prototype.processMoveRightCommand=function(e){e.gameData.fallingFigures.forEach((function(t){P.canFigureBePlaced(t.figure.getTurn(t.turnState),new S(t.position.x+1,t.position.y),e.gameData.matrix)&&t.position.x++})),this.eventBus.fire(new r(e.gameData))},e.prototype.processTurnClockwiseCommand=function(e){var t=this.getTurnStatesAsArray();e.gameData.fallingFigures.forEach((function(n){var i=n.turnState+1;i in t||(i=t[0]),P.canFigureBePlaced(n.figure.getTurn(i),n.position,e.gameData.matrix)&&(n.turnState=i)})),this.eventBus.fire(new r(e.gameData))},e.prototype.processMoveDownCommand=function(e){this.commandBus.run(new m(e.gameData))},e.prototype.getTurnStatesAsArray=function(){return Object.keys(s).map((function(e){return Number.parseInt(e)})).filter((function(e){return!Number.isNaN(e)}))},e}(),_=function(){function e(e){this.commandBus=e,this.commandBus.addHandler(t.InitGame,this.processInitGameCommand.bind(this))}return e.prototype.processInitGameCommand=function(e){var t=this;window.onkeydown=function(n){"ArrowLeft"===n.code?t.commandBus.run(new p(e.gameData)):"ArrowRight"===n.code?t.commandBus.run(new f(e.gameData)):"ArrowUp"===n.code?t.commandBus.run(new g(e.gameData)):"ArrowDown"===n.code||"ArrowDown"===n.code?t.commandBus.run(new v(e.gameData)):"Space"===n.code&&t.commandBus.run(new y(e.gameData))}},e}(),U=function(){function e(e){this.initialDelayMs=e}return e.prototype.getDelayForNextTickMs=function(e){return Math.pow(.8-.007*(e.level-1),e.level-1)*this.initialDelayMs},e}(),W=function(){function n(e,n,i,r){void 0===i&&(i=new Map([[1,100],[2,300],[3,500],[4,800]])),void 0===r&&(r=50),this.commandBus=e,this.eventBus=n,this.squashedRowsRewardThresholdsMap=i,this.rewardOnCombo=r,e.addHandler(t.InitGame,this.initGameHandler.bind(this))}return n.prototype.initGameHandler=function(t){this.eventBus.on(e.FallingTickProcessed,this.onFallingTickProcessed.bind(this))},n.prototype.onFallingTickProcessed=function(e){if(!(e.squashedLines.length<0)){var t=0;this.squashedRowsRewardThresholdsMap.forEach((function(n,i){i>e.squashedLines.length||(t=n)})),e.gameData.score+=t*e.gameData.level+this.rewardOnCombo*Math.max(0,e.gameData.combo-1)*e.gameData.level+2*e.droppedLines*e.gameData.level}},n}(),J=function(){function n(e,n,i,r){this.eventBus=e,this.commandBus=n,this.levelIncreaseOnSquashedRowsNumber=i,this.maxLevels=r,this.squashedRowsCounter=0,this.commandBus.addHandler(t.InitGame,this.processInitGameCommand.bind(this))}return n.prototype.processInitGameCommand=function(t){this.eventBus.on(e.FallingTickProcessed,this.onFallTickProcessed.bind(this))},n.prototype.onFallTickProcessed=function(e){0!==e.squashedLines.length&&(this.squashedRowsCounter++,this.squashedRowsCounter>=this.levelIncreaseOnSquashedRowsNumber&&(this.squashedRowsCounter=0,e.gameData.level=Math.min(this.maxLevels,e.gameData.level+1)))},n}(),K=function(){function n(e,n){this.commandBus=e,this.eventBus=n,e.addHandler(t.InitGame,this.initGameHandler.bind(this))}return n.prototype.initGameHandler=function(t){this.eventBus.on(e.FallingTickProcessed,this.onFallingTickProcessed.bind(this))},n.prototype.onFallingTickProcessed=function(e){e.transferredToMatrixFigures.length<=0||(e.squashedLines.length>0?e.gameData.combo+=1:e.gameData.combo=0)},n}(),Q=function(){function e(){this.eventBus=new o,this.commandBus=new F,this.gameController=new E(new U(2e3),this.eventBus,this.commandBus),this.movingHandler=new z(this.commandBus,this.eventBus),this.movingController=new _(this.commandBus),this.fallingFiguresProcessor=new N(this.commandBus,this.eventBus),this.figuresSpawner=new A(this.eventBus,this.commandBus),this.levelCounter=new J(this.eventBus,this.commandBus,8,15),this.comboCounter=new K(this.commandBus,this.eventBus),this.scoreCounter=new W(this.commandBus,this.eventBus),this.tableRenderer=new j(new I(document.body),this.commandBus,this.eventBus),this.gameData=x.makeSimple()}return e.prototype.start=function(e){this.gameData=e||x.makeSimple(),this.commandBus.run(new u(this.gameData)),this.commandBus.run(new l(this.gameData))},e.prototype.resume=function(){this.commandBus.run(new l(this.gameData))},e.prototype.pause=function(){this.commandBus.run(new c(this.gameData))},e}();document.addEventListener("DOMContentLoaded",(function(){(new Q).start()}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,