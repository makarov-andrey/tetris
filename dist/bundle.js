(()=>{"use strict";var e;!function(e){e[e.FallingTickProcessed=0]="FallingTickProcessed",e[e.GameOver=1]="GameOver",e[e.FiguresMoved=2]="FiguresMoved"}(e||(e={}));var t,n,i=function(){function t(e,t,n){this.gameData=e,this.transferredToMatrixFigures=t,this.squashedLines=n}return t.prototype.getEventType=function(){return e.FallingTickProcessed},t}(),r=function(){function t(e){this.gameData=e}return t.prototype.getEventType=function(){return e.GameOver},t}(),o=function(){function t(e){this.gameData=e}return t.prototype.getEventType=function(){return e.FiguresMoved},t}(),a=function(){function e(){this.handlers=new Map}return e.prototype.on=function(e,t,n){void 0===n&&(n=!0);var i=this.handlers.get(e)||[];n&&i.some((function(e){return e===t}))||(i.push(t),this.handlers.set(e,i))},e.prototype.off=function(e,t){var n=this.handlers.get(e)||[],i=n.indexOf(t);i>0&&n.splice(i,1),this.handlers.set(e,n)},e.prototype.fire=function(e){(this.handlers.get(e.getEventType())||[]).forEach((function(t){t(e)}))},e}(),s=function(e,t,n){this.fieldWidth=e,this.fieldHeight=t,this.figures=n},u=(t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},t(e,n)},function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)});!function(e){e[e.One=0]="One",e[e.Two=1]="Two",e[e.Three=2]="Three",e[e.Four=3]="Four"}(n||(n={}));var l,c=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return u(t,e),t.prototype.getNormalizedFigure=function(){var e=this.getFigure(),t=e.reduce((function(e,t){return Math.max(e,t.length)}),0);return e.map((function(e){var n=e.length;return e.length=t,e.fill(!1,n-1,t-1)}))},t.prototype.getFirstTurn=function(){return this.getNormalizedFigure()},t.prototype.getSecondTurn=function(){for(var e=this.getNormalizedFigure(),t=[],n=e.length,i=e[0].length,r=0;r<i;r++){t[r]=new Array(n).fill(!1);for(var o=0;o<n;o++)t[r][n-o-1]=e[o][r]}return t},t.prototype.getThirdTurn=function(){return this.getFirstTurn().reverse().map((function(e){return e.reverse()}))},t.prototype.getForthTurn=function(){return this.getSecondTurn().reverse().map((function(e){return e.reverse()}))},t}(function(){function e(){}return e.prototype.getTurn=function(e){switch(e){case n.One:return this.getFirstTurn();case n.Two:return this.getSecondTurn();case n.Three:return this.getThirdTurn();case n.Four:return this.getForthTurn()}},e}()),m=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return u(t,e),t.prototype.getFigure=function(){return["###".split("").map((function(e){return"#"===e})),"-#-".split("").map((function(e){return"#"===e}))]},t}(c),h=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return u(t,e),t.prototype.getFigure=function(){return["###".split("").map((function(e){return"#"===e})),"--#".split("").map((function(e){return"#"===e}))]},t}(c),d=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return u(t,e),t.prototype.getFigure=function(){return["###".split("").map((function(e){return"#"===e})),"#--".split("").map((function(e){return"#"===e}))]},t}(c),f=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return u(t,e),t.prototype.getFigure=function(){return["##".split("").map((function(e){return"#"===e})),"##".split("").map((function(e){return"#"===e}))]},t}(c),p=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return u(t,e),t.prototype.getFigure=function(){return["####".split("").map((function(e){return"#"===e}))]},t}(c),g=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return u(t,e),t.prototype.getFigure=function(){return["##-".split("").map((function(e){return"#"===e})),"-##".split("").map((function(e){return"#"===e}))]},t}(c),v=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return u(t,e),t.prototype.getFigure=function(){return["-##".split("").map((function(e){return"#"===e})),"##-".split("").map((function(e){return"#"===e}))]},t}(c),y=function(){function e(e,t,n,i,r,o){void 0===e&&(e=!1),void 0===t&&(t=!1),void 0===n&&(n=[]),void 0===i&&(i=[]),void 0===r&&(r=setTimeout((function(){}))),this.isInitialized=e,this.isGameOver=t,this.fallingFigures=n,this.matrix=i,this.nextTickTimeoutId=r,this.settings=o}return e.makeSimple=function(t,n){return void 0===t&&(t=10),void 0===n&&(n=20),new e(!1,!1,[],new Array(n).fill([]).map((function(e){return new Array(t).fill(!1)})),setTimeout((function(){})),new s(t,n,[new m,new h,new d,new f,new p,new g,new v]))},e}();!function(e){e[e.InitGame=0]="InitGame",e[e.ResumeGame=1]="ResumeGame",e[e.PauseGame=2]="PauseGame",e[e.FiguresFallTick=3]="FiguresFallTick",e[e.GameOver=4]="GameOver",e[e.Render=5]="Render",e[e.MoveLeft=6]="MoveLeft",e[e.MoveRight=7]="MoveRight",e[e.TurnClockwise=8]="TurnClockwise",e[e.MoveDown=9]="MoveDown",e[e.FiguresFallDown=10]="FiguresFallDown"}(l||(l={}));var F=function(){function e(e){this.gameData=e}return e.prototype.getCommandType=function(){return l.InitGame},e}(),w=function(){function e(e){this.gameData=e}return e.prototype.getCommandType=function(){return l.ResumeGame},e}(),T=function(){function e(e){this.gameData=e}return e.prototype.getCommandType=function(){return l.PauseGame},e}(),C=function(){function e(e){this.gameData=e}return e.prototype.getCommandType=function(){return l.FiguresFallTick},e}(),D=function(){function e(e){this.gameData=e}return e.prototype.getCommandType=function(){return l.GameOver},e}(),B=function(){function e(e){this.gameData=e}return e.prototype.getCommandType=function(){return l.Render},e}(),M=function(){function e(e){this.gameData=e}return e.prototype.getCommandType=function(){return l.MoveLeft},e}(),G=function(){function e(e){this.gameData=e}return e.prototype.getCommandType=function(){return l.MoveRight},e}(),H=function(){function e(e){this.gameData=e}return e.prototype.getCommandType=function(){return l.TurnClockwise},e}(),O=function(){function e(e){this.gameData=e}return e.prototype.getCommandType=function(){return l.MoveDown},e}(),x=function(){function e(e){this.gameData=e}return e.prototype.getCommandType=function(){return l.FiguresFallDown},e}(),S=function(){function e(){this.handlers=new Map}return e.prototype.addHandler=function(e,t,n){void 0===n&&(n=!0);var i=this.handlers.get(e)||[];n&&i.some((function(e){return e===t}))||(i.push(t),this.handlers.set(e,i))},e.prototype.removeHandler=function(e,t){var n=this.handlers.get(e)||[],i=n.indexOf(t);i>0&&n.splice(i,1),this.handlers.set(e,n)},e.prototype.run=function(e){(this.handlers.get(e.getCommandType())||[]).forEach((function(t){t(e)}))},e}(),k=function(){function e(e,t,n){this.timingsHandler=e,this.eventBus=t,this.commandBus=n,this.gameData=y.makeSimple(),this.commandBus.addHandler(l.InitGame,this.initGameHandler.bind(this)),this.commandBus.addHandler(l.ResumeGame,this.resumeGameHandler.bind(this)),this.commandBus.addHandler(l.PauseGame,this.pauseGameHandler.bind(this)),this.commandBus.addHandler(l.GameOver,this.gameOverHandler.bind(this))}return e.prototype.initGameHandler=function(e){this.gameData=e.gameData,this.gameData.isInitialized=!0},e.prototype.resumeGameHandler=function(e){this.gameData.isGameOver||(this.gameData.isInitialized||this.commandBus.run(new F(e.gameData)),this.fallTick())},e.prototype.pauseGameHandler=function(e){this.gameData=e.gameData,clearTimeout(this.gameData.nextTickTimeoutId),this.commandBus.run(new B(this.gameData))},e.prototype.gameOverHandler=function(){clearTimeout(this.gameData.nextTickTimeoutId),this.gameData.isInitialized=!1,this.gameData.isGameOver=!0,this.eventBus.fire(new r(this.gameData))},e.prototype.fallTick=function(){this.commandBus.run(new C(this.gameData)),this.gameData.isGameOver||(this.gameData.nextTickTimeoutId=setTimeout(this.fallTick.bind(this),this.timingsHandler.getDelayForNextTickMs()))},e}(),b=function(){function e(){}return e.canFigureBePlaced=function(e,t,n){return e.every((function(e,i){return e.every((function(e,r){var o=t.y+i,a=t.x+r;return!e||o<0&&a>0&&a<n[0].length-1||o in n&&a in n[o]&&!n[o][a]}))}))},e}(),E=function(e,t){this.x=e,this.y=t},P=function(e,t,n){this.figure=e,this.position=t,this.turnState=n},I=function(e,t,n){this.filled=e,this.filledGameOver=t,this.empty=n},R=function(e,t,n,i,r){void 0===t&&(t=!0),void 0===n&&(n=new I("#007400","#780000","#fff")),void 0===i&&(i=new I("#007400","#780000",null)),void 0===r&&(r=new I("#b8e5e3",null,null)),this.containerElement=e,this.renderProjectionFigures=t,this.matrixCellColors=n,this.fallingFigureCellColors=i,this.projectionFigureCellColors=r},L=function(e,t){this.filled=e,this.empty=t},j=function(){function t(e,t,n){this.renderSettings=e,this.commandBus=t,this.eventBus=n,this.cellsHtmlElementsMap=[],t.addHandler(l.InitGame,this.initHandler.bind(this)),t.addHandler(l.Render,this.renderCommandHandler.bind(this))}return t.prototype.initHandler=function(n){var i=t.createHtmlElement('<div style="display: table; border-collapse: collapse"></div>');this.cellsHtmlElementsMap=[];for(var r=0;r<n.gameData.settings.fieldHeight;r++){var o=t.createHtmlElement('<div style="display: table-row"></div>');this.cellsHtmlElementsMap[r]=[];for(var a=0;a<n.gameData.settings.fieldWidth;a++){var s=t.createHtmlElement('<div style="display: table-cell; border: 1px solid #ccc; width: 20px; height: 20px"></div>');this.cellsHtmlElementsMap[r][a]=s,o.appendChild(s)}i.appendChild(o)}this.renderSettings.containerElement.replaceChildren(i),this.eventBus.on(e.FallingTickProcessed,this.onFallTickProcessed.bind(this)),this.eventBus.on(e.GameOver,this.onFallTickProcessed.bind(this)),this.eventBus.on(e.FiguresMoved,this.onFiguresMoved.bind(this))},t.prototype.onFiguresMoved=function(e){this.renderState(e.gameData)},t.prototype.onFallTickProcessed=function(e){this.renderState(e.gameData)},t.prototype.onGameOver=function(e){this.renderState(e.gameData)},t.prototype.renderCommandHandler=function(e){this.renderState(e.gameData)},t.prototype.renderState=function(e){this.repaintMatrixCells(e.matrix,new E(0,0),e),this.renderSettings.renderProjectionFigures&&this.renderFallingFiguresProjection(e),this.renderFallingFigures(e)},t.prototype.renderFallingFigures=function(e){var t=this;e.fallingFigures.forEach((function(n){t.repaintFallingFiguresCells(n.figure.getTurn(n.turnState),n.position,e)}))},t.prototype.renderFallingFiguresProjection=function(e){var t=this;e.fallingFigures.forEach((function(n){for(var i=n.figure.getTurn(n.turnState),r=n.position.x,o=n.position.y;b.canFigureBePlaced(i,new E(r,o+1),e.matrix);)o++;t.repaintProjectionFiguresCells(i,new E(r,o),e)}))},t.prototype.repaintMatrixCells=function(e,t,n){var i;i=n.isGameOver?new L(this.renderSettings.matrixCellColors.filledGameOver,this.renderSettings.matrixCellColors.empty):new L(this.renderSettings.matrixCellColors.filled,this.renderSettings.matrixCellColors.empty),this.repaintCells(e,t,i)},t.prototype.repaintFallingFiguresCells=function(e,t,n){var i;i=n.isGameOver?new L(this.renderSettings.fallingFigureCellColors.filledGameOver,this.renderSettings.fallingFigureCellColors.empty):new L(this.renderSettings.fallingFigureCellColors.filled,this.renderSettings.fallingFigureCellColors.empty),this.repaintCells(e,t,i)},t.prototype.repaintProjectionFiguresCells=function(e,t,n){var i;i=n.isGameOver?new L(this.renderSettings.projectionFigureCellColors.filledGameOver,this.renderSettings.projectionFigureCellColors.empty):new L(this.renderSettings.projectionFigureCellColors.filled,this.renderSettings.projectionFigureCellColors.empty),this.repaintCells(e,t,i)},t.prototype.repaintCells=function(e,t,n){var i=this;e.forEach((function(e,r){e.forEach((function(e,o){var a=r+t.y,s=o+t.x;if(a in i.cellsHtmlElementsMap&&s in i.cellsHtmlElementsMap[a]){var u=e?n.filled:n.empty;null!==u&&(i.cellsHtmlElementsMap[a][s].style.background=u)}}))}))},t.createHtmlElement=function(e){var t=document.createElement("div");if(t.innerHTML=e,t.children.length>1||null===t.firstElementChild)throw"The HTML must contain only one child";if(!(t.firstElementChild instanceof HTMLElement))throw"Something went wrong while trying to get HTMLElement child from div";return t.firstElementChild},t}(),N=function(){this.transferredFigures=[],this.isGameOver=!1},A=function(){function e(e,t){this.commandBus=e,this.eventBus=t,this.commandBus.addHandler(l.FiguresFallTick,this.processFiguresFallTickCommand.bind(this)),this.commandBus.addHandler(l.FiguresFallDown,this.processFiguresFallDownCommand.bind(this))}return e.prototype.processFiguresFallTickCommand=function(e){var t=this.fallFiguresForOneCell(e.gameData),n=this.squashLines(e.gameData.matrix);t.isGameOver&&this.commandBus.run(new D(e.gameData)),this.eventBus.fire(new i(e.gameData,t.transferredFigures,n))},e.prototype.processFiguresFallDownCommand=function(e){for(var t,n=new N;e.gameData.fallingFigures.length>0;){var r=this.fallFiguresForOneCell(e.gameData);(t=n.transferredFigures).push.apply(t,r.transferredFigures),n.isGameOver=n.isGameOver||r.isGameOver}var o=this.squashLines(e.gameData.matrix);n.isGameOver&&this.commandBus.run(new D(e.gameData)),this.eventBus.fire(new i(e.gameData,n.transferredFigures,o))},e.prototype.fallFiguresForOneCell=function(e){var t=this,n=new N;return e.fallingFigures.forEach((function(i,r){var o;if(t.figureCanFall(e.matrix,i))i.position.y++;else{var a=t.transferFigureToMatrix(e.matrix,i);(o=n.transferredFigures).push.apply(o,e.fallingFigures.splice(r,1)),n.isGameOver=n.isGameOver||a}})),n},e.prototype.figureCanFall=function(e,t){return b.canFigureBePlaced(t.figure.getTurn(t.turnState),new E(t.position.x,t.position.y+1),e)},e.prototype.transferFigureToMatrix=function(e,t){var n=!1;return t.figure.getTurn(t.turnState).forEach((function(i,r){i.forEach((function(i,o){if(i){var a=t.position.x+o,s=t.position.y+r;s in e&&a in e[s]&&!e[s][a]?e[s][a]=!0:n=!0}}))})),n},e.prototype.squashLines=function(e){var t=[];return e.forEach((function(e,n){e.every((function(e){return e}))&&t.push(n)}),0),t.forEach((function(t){e.splice(t,1),e.unshift(new Array(e[0].length).fill(!1))})),t},e}(),q=function(){function t(e,t){this.eventBus=e,this.commandBus=t,this.commandBus.addHandler(l.InitGame,this.initHandler.bind(this))}return t.prototype.initHandler=function(t){this.addFigure(t.gameData),this.eventBus.on(e.FallingTickProcessed,this.processOnFallTick.bind(this))},t.prototype.processOnFallTick=function(e){this.addFigure(e.gameData)},t.prototype.addFigure=function(e){if(!(e.fallingFigures.length>0||e.isGameOver)){var t=Math.floor(Math.random()*e.settings.figures.length),n=e.settings.figures[t],i=this.getRandTurnState(),r=n.getTurn(i),o=Math.max.apply(Math,r.map((function(e){return e.length}))),a=new E(Math.ceil(e.settings.fieldWidth/2-o/2)-1,-r.length);e.fallingFigures.push(new P(n,a,i))}},t.prototype.getRandTurnState=function(){var e=Object.keys(n).map((function(e){return Number.parseInt(e)})).filter((function(e){return!Number.isNaN(e)}));return e[Math.floor(Math.random()*e.length)]},t}(),_=function(){function e(e,t){this.commandBus=e,this.eventBus=t,this.commandBus.addHandler(l.MoveLeft,this.processMoveLeftCommand.bind(this)),this.commandBus.addHandler(l.MoveRight,this.processMoveRightCommand.bind(this)),this.commandBus.addHandler(l.MoveDown,this.processMoveDownCommand.bind(this)),this.commandBus.addHandler(l.TurnClockwise,this.processTurnClockwiseCommand.bind(this))}return e.prototype.processMoveLeftCommand=function(e){e.gameData.fallingFigures.forEach((function(t){b.canFigureBePlaced(t.figure.getTurn(t.turnState),new E(t.position.x-1,t.position.y),e.gameData.matrix)&&t.position.x--})),this.eventBus.fire(new o(e.gameData))},e.prototype.processMoveRightCommand=function(e){e.gameData.fallingFigures.forEach((function(t){b.canFigureBePlaced(t.figure.getTurn(t.turnState),new E(t.position.x+1,t.position.y),e.gameData.matrix)&&t.position.x++})),this.eventBus.fire(new o(e.gameData))},e.prototype.processTurnClockwiseCommand=function(e){var t=this.getTurnStatesAsArray();e.gameData.fallingFigures.forEach((function(n){var i=n.turnState+1;i in t||(i=t[0]),b.canFigureBePlaced(n.figure.getTurn(i),n.position,e.gameData.matrix)&&(n.turnState=i)})),this.eventBus.fire(new o(e.gameData))},e.prototype.processMoveDownCommand=function(e){this.commandBus.run(new C(e.gameData))},e.prototype.getTurnStatesAsArray=function(){return Object.keys(n).map((function(e){return Number.parseInt(e)})).filter((function(e){return!Number.isNaN(e)}))},e}(),z=function(){function e(e){this.commandBus=e,this.commandBus.addHandler(l.InitGame,this.processInitGameCommand.bind(this))}return e.prototype.processInitGameCommand=function(e){var t=this;window.onkeydown=function(n){console.log(n),"ArrowLeft"===n.code?t.commandBus.run(new M(e.gameData)):"ArrowRight"===n.code?t.commandBus.run(new G(e.gameData)):"ArrowUp"===n.code?t.commandBus.run(new H(e.gameData)):"ArrowDown"===n.code||"ArrowDown"===n.code?t.commandBus.run(new O(e.gameData)):"Space"===n.code&&t.commandBus.run(new x(e.gameData))}},e}(),W=function(){function t(e,t,n,i,r,o){this.eventBus=e,this.commandBus=t,this.levelIncreaseOnSquashedRowsNumber=n,this.initialDelayMs=i,this.maxLevels=r,this.squashedRowsCounter=0,this.delayMs=0,this.level=1,this.delayMs=i,this.level=o,this.commandBus.addHandler(l.InitGame,this.processInitGameCommand.bind(this))}return t.prototype.processInitGameCommand=function(t){this.eventBus.on(e.FallingTickProcessed,this.onFallTickProcessed.bind(this))},t.prototype.onFallTickProcessed=function(e){0!==e.squashedLines.length&&(this.squashedRowsCounter++,this.squashedRowsCounter>=this.levelIncreaseOnSquashedRowsNumber&&(this.squashedRowsCounter=0,this.level=Math.min(this.maxLevels,this.level+e.squashedLines.length)))},t.prototype.getDelayForNextTickMs=function(){return Math.pow(.8-.007*(this.level-1),this.level-1)*this.initialDelayMs},t}(),U=function(){function e(){this.eventBus=new a,this.commandBus=new S,this.gameController=new k(new W(this.eventBus,this.commandBus,10,1e3,15,1),this.eventBus,this.commandBus),this.movingHandler=new _(this.commandBus,this.eventBus),this.movingController=new z(this.commandBus),this.tableRenderer=new j(new R(document.body),this.commandBus,this.eventBus),this.fallingFiguresProcessor=new A(this.commandBus,this.eventBus),this.figuresSpawner=new q(this.eventBus,this.commandBus),this.gameData=y.makeSimple()}return e.prototype.start=function(e){this.gameData=e||y.makeSimple(),this.commandBus.run(new F(this.gameData)),this.commandBus.run(new w(this.gameData))},e.prototype.resume=function(){this.commandBus.run(new w(this.gameData))},e.prototype.pause=function(){this.commandBus.run(new T(this.gameData))},e}();document.addEventListener("DOMContentLoaded",(function(){(new U).start()}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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RUFBa0JyUCxLQUFLYixVQUNuRCxFQUVPLFlBQUFtUSxPQUFQLFdBQ0l0UCxLQUFLeUYsV0FBV0osSUFBSSxJQUFJZ0ssRUFBa0JyUCxLQUFLYixVQUNuRCxFQUVPLFlBQUFvUSxNQUFQLFdBQ0l2UCxLQUFLeUYsV0FBV0osSUFBSSxJQUFJbUssRUFBaUJ4UCxLQUFLYixVQUNsRCxFQUNKLEVBcERBLEdDVEF5SyxTQUFTNkYsaUJBQWlCLG9CQUFvQixZQUM3QixJQUFJQyxHQUNWTixPQUNYLEciLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvVGV0cmlzL0V2ZW50QnVzL0V2ZW50QnVzLnRzIiwid2VicGFjazovLy8uL3NyYy9UZXRyaXMvRmlndXJlcy50cyIsIndlYnBhY2s6Ly8vLi9zcmMvVGV0cmlzL0dhbWVTZXR0aW5ncy50cyIsIndlYnBhY2s6Ly8vLi9zcmMvVGV0cmlzL0NvbW1hbmRCdXMvQ29tbWFuZEJ1cy50cyIsIndlYnBhY2s6Ly8vLi9zcmMvVGV0cmlzL0dhbWVEYXRhLnRzIiwid2VicGFjazovLy8uL3NyYy9UZXRyaXMvR2FtZUNvbnRyb2xsZXIudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL1RldHJpcy9VdGlscy9GaWd1cmVQbGFjaW5nQ2hlY2tlci50cyIsIndlYnBhY2s6Ly8vLi9zcmMvVGV0cmlzL1N0cnVjdHVyZXMudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL1RldHJpcy9SZW5kZXJlci9UYWJsZVJlbmRlcmVyLnRzIiwid2VicGFjazovLy8uL3NyYy9UZXRyaXMvRmFsbGluZ0ZpZ3VyZXNQcm9jZXNzb3IvUmVndWxhckZhbGxpbmdGaWd1cmVzUHJvY2Vzc29yLnRzIiwid2VicGFjazovLy8uL3NyYy9UZXRyaXMvRmlndXJlc1NwYXduZXIvQWx3YXlzT25lRmlndXJlU3Bhd25lci50cyIsIndlYnBhY2s6Ly8vLi9zcmMvVGV0cmlzL01vdmluZ0hhbmRsZXIvTW92aW5nSGFuZGxlci50cyIsIndlYnBhY2s6Ly8vLi9zcmMvVGV0cmlzL01vdmluZ0NvbnRyb2xsZXIvTW92aW5nQ29udHJvbGxlci50cyIsIndlYnBhY2s6Ly8vLi9zcmMvVGV0cmlzL1RpbWluZ3NIYW5kbGVyL0xldmVsQmFzZWRUaW1pbmdzSGFuZGxlci50cyIsIndlYnBhY2s6Ly8vLi9zcmMvVGV0cmlzL1RldHJpc0ZhY2FkZS50cyIsIndlYnBhY2s6Ly8vLi9zcmMvaW5kZXgudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtHYW1lRGF0YX0gZnJvbSBcIi4uL0dhbWVEYXRhXCI7XG5pbXBvcnQge0ZhbGxpbmdGaWd1cmV9IGZyb20gXCIuLi9TdHJ1Y3R1cmVzXCI7XG5cbmV4cG9ydCBlbnVtIEV2ZW50VHlwZSB7XG4gICAgRmFsbGluZ1RpY2tQcm9jZXNzZWQsXG4gICAgR2FtZU92ZXIsXG4gICAgRmlndXJlc01vdmVkLFxufVxuXG5leHBvcnQgaW50ZXJmYWNlIEV2ZW50IHtcbiAgICBnYW1lRGF0YTogR2FtZURhdGE7XG5cbiAgICBnZXRFdmVudFR5cGUoKTogRXZlbnRUeXBlO1xufVxuXG5leHBvcnQgY2xhc3MgRmFsbFRpY2tQcm9jZXNzZWRFdmVudCBpbXBsZW1lbnRzIEV2ZW50IHtcbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgcHVibGljIGdhbWVEYXRhOiBHYW1lRGF0YSxcbiAgICAgICAgcHVibGljIHRyYW5zZmVycmVkVG9NYXRyaXhGaWd1cmVzOiBGYWxsaW5nRmlndXJlW10sXG4gICAgICAgIHB1YmxpYyBzcXVhc2hlZExpbmVzOiBudW1iZXJbXSxcbiAgICApIHt9XG5cbiAgICBwdWJsaWMgZ2V0RXZlbnRUeXBlKCk6IEV2ZW50VHlwZSB7XG4gICAgICAgIHJldHVybiBFdmVudFR5cGUuRmFsbGluZ1RpY2tQcm9jZXNzZWQ7XG4gICAgfVxufVxuXG5leHBvcnQgY2xhc3MgR2FtZU92ZXJFdmVudCBpbXBsZW1lbnRzIEV2ZW50IHtcbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgcHVibGljIGdhbWVEYXRhOiBHYW1lRGF0YSxcbiAgICApIHt9XG5cbiAgICBwdWJsaWMgZ2V0RXZlbnRUeXBlKCk6IEV2ZW50VHlwZSB7XG4gICAgICAgIHJldHVybiBFdmVudFR5cGUuR2FtZU92ZXI7XG4gICAgfVxufVxuXG5leHBvcnQgY2xhc3MgRmlndXJlc01vdmVkRXZlbnQgaW1wbGVtZW50cyBFdmVudCB7XG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIHB1YmxpYyBnYW1lRGF0YTogR2FtZURhdGEsXG4gICAgKSB7fVxuXG4gICAgcHVibGljIGdldEV2ZW50VHlwZSgpOiBFdmVudFR5cGUge1xuICAgICAgICByZXR1cm4gRXZlbnRUeXBlLkZpZ3VyZXNNb3ZlZDtcbiAgICB9XG59XG5cbmV4cG9ydCBjbGFzcyBFdmVudEJ1cyB7XG4gICAgcHJpdmF0ZSBoYW5kbGVyczogTWFwPEV2ZW50VHlwZSwgKCguLi5fOiBhbnkpID0+IHZvaWQpW10+ID0gbmV3IE1hcCgpO1xuXG4gICAgcHVibGljIG9uKGV2ZW50OiBFdmVudFR5cGUsIGhhbmRsZXI6ICguLi5fOiBhbnkpID0+IHZvaWQsIHVuaXF1ZTogYm9vbGVhbiA9IHRydWUpOiB2b2lkIHtcbiAgICAgICAgbGV0IGhhbmRsZXJzID0gdGhpcy5oYW5kbGVycy5nZXQoZXZlbnQpIHx8IFtdO1xuICAgICAgICBpZiAodW5pcXVlICYmIGhhbmRsZXJzLnNvbWUoYm91bmRIYW5kbGVyID0+IGJvdW5kSGFuZGxlciA9PT0gaGFuZGxlcikpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBoYW5kbGVycy5wdXNoKGhhbmRsZXIpO1xuICAgICAgICB0aGlzLmhhbmRsZXJzLnNldChldmVudCwgaGFuZGxlcnMpO1xuICAgIH1cblxuICAgIHB1YmxpYyBvZmYoZXZlbnQ6IEV2ZW50VHlwZSwgaGFuZGxlcjogKC4uLl86IGFueSkgPT4gdm9pZCk6IHZvaWQge1xuICAgICAgICBsZXQgaGFuZGxlcnMgPSB0aGlzLmhhbmRsZXJzLmdldChldmVudCkgfHwgW107XG4gICAgICAgIGxldCBpbmRleCA9IGhhbmRsZXJzLmluZGV4T2YoaGFuZGxlcik7XG4gICAgICAgIGlmIChpbmRleCA+IDApIHtcbiAgICAgICAgICAgIGhhbmRsZXJzLnNwbGljZShpbmRleCwgMSlcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmhhbmRsZXJzLnNldChldmVudCwgaGFuZGxlcnMpO1xuICAgIH1cblxuICAgIHB1YmxpYyBmaXJlKGV2ZW50UGF5bG9hZDogRXZlbnQpOiB2b2lkIHtcbiAgICAgICAgbGV0IGhhbmRsZXJzID0gdGhpcy5oYW5kbGVycy5nZXQoZXZlbnRQYXlsb2FkLmdldEV2ZW50VHlwZSgpKSB8fCBbXTtcbiAgICAgICAgaGFuZGxlcnMuZm9yRWFjaChoYW5kbGVyID0+IHtoYW5kbGVyKGV2ZW50UGF5bG9hZCl9KTtcbiAgICB9XG59XG4iLCJleHBvcnQgZW51bSBGaWd1cmVUdXJuU3RhdGUge1xuICAgIE9uZSxcbiAgICBUd28sXG4gICAgVGhyZWUsXG4gICAgRm91cixcbn1cblxuZXhwb3J0IGludGVyZmFjZSBGaWd1cmUge1xuICAgIC8qKlxuICAgICAqIEFueSBmaWd1cmUgbXVzdCBiZSBhYmxlIHRvIHR1cm4gNCB0aW1lcyBpbiAyIGRpbWVuc2lvbnMuXG4gICAgICogQWxsIHR1cm5zIGFyZSBjbG9ja3dpc2UuXG4gICAgICovXG4gICAgZ2V0VHVybihmaWd1cmVUdXJuU3RhdGU6IEZpZ3VyZVR1cm5TdGF0ZSk6IGJvb2xlYW5bXVtdO1xuICAgIGdldEZpcnN0VHVybigpOiBib29sZWFuW11bXTtcbiAgICBnZXRTZWNvbmRUdXJuKCk6IGJvb2xlYW5bXVtdO1xuICAgIGdldFRoaXJkVHVybigpOiBib29sZWFuW11bXTtcbiAgICBnZXRGb3J0aFR1cm4oKTogYm9vbGVhbltdW107XG59XG5cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBBYnN0cmFjdEZpZ3VyZSBpbXBsZW1lbnRzIEZpZ3VyZXtcbiAgICBwdWJsaWMgYWJzdHJhY3QgZ2V0Rmlyc3RUdXJuKCk6IGJvb2xlYW5bXVtdO1xuICAgIHB1YmxpYyBhYnN0cmFjdCBnZXRTZWNvbmRUdXJuKCk6IGJvb2xlYW5bXVtdO1xuICAgIHB1YmxpYyBhYnN0cmFjdCBnZXRUaGlyZFR1cm4oKTogYm9vbGVhbltdW107XG4gICAgcHVibGljIGFic3RyYWN0IGdldEZvcnRoVHVybigpOiBib29sZWFuW11bXTtcblxuICAgIGdldFR1cm4oZmlndXJlVHVyblN0YXRlOiBGaWd1cmVUdXJuU3RhdGUpOiBib29sZWFuW11bXSB7XG4gICAgICAgIHN3aXRjaCAoZmlndXJlVHVyblN0YXRlKSB7XG4gICAgICAgICAgICBjYXNlIEZpZ3VyZVR1cm5TdGF0ZS5PbmU6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0Rmlyc3RUdXJuKCk7XG4gICAgICAgICAgICBjYXNlIEZpZ3VyZVR1cm5TdGF0ZS5Ud286XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0U2Vjb25kVHVybigpO1xuICAgICAgICAgICAgY2FzZSBGaWd1cmVUdXJuU3RhdGUuVGhyZWU6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0VGhpcmRUdXJuKCk7XG4gICAgICAgICAgICBjYXNlIEZpZ3VyZVR1cm5TdGF0ZS5Gb3VyOlxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmdldEZvcnRoVHVybigpO1xuICAgICAgICB9XG4gICAgfVxufVxuXG4vKipcbiAqIFRoaXMgY2xhc3MgZ2l2ZXMgYW4gZWFzeSB3YXkgdG8gZGVmaW5lIGZpZ3VyZXMgZm9yIHRldHJpcy5cbiAqIEp1c3QgaW1wbGVtZW50IHRoZSBnZXRGaWd1cmUgbWV0aG9kIGFuZCByZXR1cm4gZmlndXJlIGxpa2UgdGhpczpcbiAqIGBgYCh0cylcbiAqIHByb3RlY3RlZCBnZXRGaWd1cmUoKTogYm9vbGVhbltdW10ge1xuICogICAgIHJldHVybiBbXG4gKiAgICAgICAgIFt0cnVlLCAgdHJ1ZSwgdHJ1ZV0sXG4gKiAgICAgICAgIFtmYWxzZSwgdHJ1ZSwgZmFsc2VdLFxuICogICAgICAgICBbdHJ1ZSwgIHRydWUsIHRydWVdLFxuICogICAgIF07XG4gKiB9XG4gKiBgYGBcbiAqXG4gKiBPciBkZWZpbmUgaXQgbGlrZSB0aGlzIGZvciBtb3JlIHZpc3VhbCBwcmVzZW50YXRpb246XG4gKiBgYGAodHMpXG4gKiBwcm90ZWN0ZWQgZ2V0RmlndXJlKCk6IGJvb2xlYW5bXVtdIHtcbiAqICAgICByZXR1cm4gW1xuICogICAgICAgICBcIiMjI1wiLnNwbGl0KFwiXCIpLm1hcChpdGVtID0+IGl0ZW0gPT09IFwiI1wiKSxcbiAqICAgICAgICAgXCItIy1cIi5zcGxpdChcIlwiKS5tYXAoaXRlbSA9PiBpdGVtID09PSBcIiNcIiksXG4gKiAgICAgICAgIFwiIyMjXCIuc3BsaXQoXCJcIikubWFwKGl0ZW0gPT4gaXRlbSA9PT0gXCIjXCIpLFxuICogICAgIF07XG4gKiB9XG4gKiBgYGBcbiAqL1xuZXhwb3J0IGFic3RyYWN0IGNsYXNzIFNpbXBseVJvdGF0YWJsZUZpZ3VyZSBleHRlbmRzIEFic3RyYWN0RmlndXJlIHtcbiAgICBwcm90ZWN0ZWQgYWJzdHJhY3QgZ2V0RmlndXJlKCk6IGJvb2xlYW5bXVtdO1xuXG4gICAgcHJpdmF0ZSBnZXROb3JtYWxpemVkRmlndXJlKCk6IGJvb2xlYW5bXVtdIHtcbiAgICAgICAgbGV0IGZpZ3VyZSA9IHRoaXMuZ2V0RmlndXJlKCk7XG4gICAgICAgIGxldCB0aGVMb25nZXN0Um93U2l6ZSA9IGZpZ3VyZS5yZWR1Y2UoXG4gICAgICAgICAgICAocHJldmlvdXMsIGN1cnJlbnQpID0+IE1hdGgubWF4KHByZXZpb3VzLCBjdXJyZW50Lmxlbmd0aCksXG4gICAgICAgICAgICAwXG4gICAgICAgICk7XG4gICAgICAgIHJldHVybiBmaWd1cmUubWFwKHJvdyA9PiB7XG4gICAgICAgICAgICBsZXQgb3JpZ2luYWxMZW5ndGggPSByb3cubGVuZ3RoO1xuICAgICAgICAgICAgcm93Lmxlbmd0aCA9IHRoZUxvbmdlc3RSb3dTaXplO1xuICAgICAgICAgICAgcmV0dXJuIHJvdy5maWxsKGZhbHNlLCBvcmlnaW5hbExlbmd0aCAtIDEsIHRoZUxvbmdlc3RSb3dTaXplIC0gMSk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXRGaXJzdFR1cm4oKTogYm9vbGVhbltdW10ge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXROb3JtYWxpemVkRmlndXJlKCk7XG4gICAgfVxuXG4gICAgcHVibGljIGdldFNlY29uZFR1cm4oKTogYm9vbGVhbltdW10ge1xuICAgICAgICBsZXQgb3JpZ2luYWxGaWd1cmUgPSB0aGlzLmdldE5vcm1hbGl6ZWRGaWd1cmUoKTtcbiAgICAgICAgbGV0IHR1cm5lZEZpZ3VyZTogYm9vbGVhbltdW10gPSBbXTtcbiAgICAgICAgbGV0IG9yaWdpbmFsRmlndXJlSGVpZ2h0ID0gb3JpZ2luYWxGaWd1cmUubGVuZ3RoO1xuICAgICAgICBsZXQgb3JpZ2luYWxGaWd1cmVXaWR0aCA9IG9yaWdpbmFsRmlndXJlWzBdLmxlbmd0aDtcbiAgICAgICAgZm9yIChsZXQgeCA9IDA7IHggPCBvcmlnaW5hbEZpZ3VyZVdpZHRoOyB4KyspIHtcbiAgICAgICAgICAgIHR1cm5lZEZpZ3VyZVt4XSA9IG5ldyBBcnJheShvcmlnaW5hbEZpZ3VyZUhlaWdodCkuZmlsbChmYWxzZSk7XG4gICAgICAgICAgICBmb3IgKGxldCB5ID0gMDsgeSA8IG9yaWdpbmFsRmlndXJlSGVpZ2h0OyB5KyspIHtcbiAgICAgICAgICAgICAgICB0dXJuZWRGaWd1cmVbeF1bb3JpZ2luYWxGaWd1cmVIZWlnaHQgLSB5IC0gMV0gPSBvcmlnaW5hbEZpZ3VyZVt5XVt4XTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHVybmVkRmlndXJlO1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXRUaGlyZFR1cm4oKTogYm9vbGVhbltdW10ge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRGaXJzdFR1cm4oKS5yZXZlcnNlKCkubWFwKHJvdyA9PiByb3cucmV2ZXJzZSgpKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0Rm9ydGhUdXJuKCk6IGJvb2xlYW5bXVtdIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0U2Vjb25kVHVybigpLnJldmVyc2UoKS5tYXAocm93ID0+IHJvdy5yZXZlcnNlKCkpO1xuICAgIH1cbn1cblxuZXhwb3J0IGNsYXNzIFRGaWd1cmUgZXh0ZW5kcyBTaW1wbHlSb3RhdGFibGVGaWd1cmUge1xuICAgIHByb3RlY3RlZCBnZXRGaWd1cmUoKTogYm9vbGVhbltdW10ge1xuICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgXCIjIyNcIi5zcGxpdChcIlwiKS5tYXAoaXRlbSA9PiBpdGVtID09PSBcIiNcIiksXG4gICAgICAgICAgICBcIi0jLVwiLnNwbGl0KFwiXCIpLm1hcChpdGVtID0+IGl0ZW0gPT09IFwiI1wiKSxcbiAgICAgICAgXTtcbiAgICB9XG59XG5cbmV4cG9ydCBjbGFzcyBSaWdodExGaWd1cmUgZXh0ZW5kcyBTaW1wbHlSb3RhdGFibGVGaWd1cmUge1xuICAgIHByb3RlY3RlZCBnZXRGaWd1cmUoKTogYm9vbGVhbltdW10ge1xuICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgXCIjIyNcIi5zcGxpdChcIlwiKS5tYXAoaXRlbSA9PiBpdGVtID09PSBcIiNcIiksXG4gICAgICAgICAgICBcIi0tI1wiLnNwbGl0KFwiXCIpLm1hcChpdGVtID0+IGl0ZW0gPT09IFwiI1wiKSxcbiAgICAgICAgXTtcbiAgICB9XG59XG5cbmV4cG9ydCBjbGFzcyBMZWZ0TEZpZ3VyZSBleHRlbmRzIFNpbXBseVJvdGF0YWJsZUZpZ3VyZSB7XG4gICAgcHJvdGVjdGVkIGdldEZpZ3VyZSgpOiBib29sZWFuW11bXSB7XG4gICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICBcIiMjI1wiLnNwbGl0KFwiXCIpLm1hcChpdGVtID0+IGl0ZW0gPT09IFwiI1wiKSxcbiAgICAgICAgICAgIFwiIy0tXCIuc3BsaXQoXCJcIikubWFwKGl0ZW0gPT4gaXRlbSA9PT0gXCIjXCIpLFxuICAgICAgICBdO1xuICAgIH1cbn1cblxuZXhwb3J0IGNsYXNzIFNxdWFyZUZpZ3VyZSBleHRlbmRzIFNpbXBseVJvdGF0YWJsZUZpZ3VyZSB7XG4gICAgcHJvdGVjdGVkIGdldEZpZ3VyZSgpOiBib29sZWFuW11bXSB7XG4gICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICBcIiMjXCIuc3BsaXQoXCJcIikubWFwKGl0ZW0gPT4gaXRlbSA9PT0gXCIjXCIpLFxuICAgICAgICAgICAgXCIjI1wiLnNwbGl0KFwiXCIpLm1hcChpdGVtID0+IGl0ZW0gPT09IFwiI1wiKSxcbiAgICAgICAgXTtcbiAgICB9XG59XG5cbmV4cG9ydCBjbGFzcyBTdGlja0ZpZ3VyZSBleHRlbmRzIFNpbXBseVJvdGF0YWJsZUZpZ3VyZSB7XG4gICAgcHJvdGVjdGVkIGdldEZpZ3VyZSgpOiBib29sZWFuW11bXSB7XG4gICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICBcIiMjIyNcIi5zcGxpdChcIlwiKS5tYXAoaXRlbSA9PiBpdGVtID09PSBcIiNcIiksXG4gICAgICAgIF07XG4gICAgfVxufVxuXG5leHBvcnQgY2xhc3MgTFpGaWd1cmUgZXh0ZW5kcyBTaW1wbHlSb3RhdGFibGVGaWd1cmUge1xuICAgIHByb3RlY3RlZCBnZXRGaWd1cmUoKTogYm9vbGVhbltdW10ge1xuICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgXCIjIy1cIi5zcGxpdChcIlwiKS5tYXAoaXRlbSA9PiBpdGVtID09PSBcIiNcIiksXG4gICAgICAgICAgICBcIi0jI1wiLnNwbGl0KFwiXCIpLm1hcChpdGVtID0+IGl0ZW0gPT09IFwiI1wiKSxcbiAgICAgICAgXTtcbiAgICB9XG59XG5cblxuZXhwb3J0IGNsYXNzIFJaRmlndXJlIGV4dGVuZHMgU2ltcGx5Um90YXRhYmxlRmlndXJlIHtcbiAgICBwcm90ZWN0ZWQgZ2V0RmlndXJlKCk6IGJvb2xlYW5bXVtdIHtcbiAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgIFwiLSMjXCIuc3BsaXQoXCJcIikubWFwKGl0ZW0gPT4gaXRlbSA9PT0gXCIjXCIpLFxuICAgICAgICAgICAgXCIjIy1cIi5zcGxpdChcIlwiKS5tYXAoaXRlbSA9PiBpdGVtID09PSBcIiNcIiksXG4gICAgICAgIF07XG4gICAgfVxufVxuIiwiaW1wb3J0IHtGaWd1cmUsIExlZnRMRmlndXJlLCBSaWdodExGaWd1cmUsIFNxdWFyZUZpZ3VyZSwgU3RpY2tGaWd1cmUsIFRGaWd1cmV9IGZyb20gXCIuL0ZpZ3VyZXNcIjtcblxuZXhwb3J0IGNsYXNzIEdhbWVTZXR0aW5ncyB7XG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIHB1YmxpYyBmaWVsZFdpZHRoOiBudW1iZXIsXG4gICAgICAgIHB1YmxpYyBmaWVsZEhlaWdodDogbnVtYmVyLFxuICAgICAgICBwdWJsaWMgZmlndXJlczogRmlndXJlW10sXG4gICAgKSB7fVxufVxuIiwiaW1wb3J0IHtHYW1lRGF0YX0gZnJvbSBcIi4uL0dhbWVEYXRhXCI7XG5cbmV4cG9ydCBlbnVtIENvbW1hbmRUeXBlIHtcbiAgICBJbml0R2FtZSxcbiAgICBSZXN1bWVHYW1lLFxuICAgIFBhdXNlR2FtZSxcbiAgICBGaWd1cmVzRmFsbFRpY2ssXG4gICAgR2FtZU92ZXIsXG4gICAgUmVuZGVyLFxuICAgIE1vdmVMZWZ0LFxuICAgIE1vdmVSaWdodCxcbiAgICBUdXJuQ2xvY2t3aXNlLFxuICAgIE1vdmVEb3duLFxuICAgIEZpZ3VyZXNGYWxsRG93bixcbn1cblxuZXhwb3J0IGludGVyZmFjZSBDb21tYW5kIHtcbiAgICBnYW1lRGF0YTogR2FtZURhdGE7XG5cbiAgICBnZXRDb21tYW5kVHlwZSgpOiBDb21tYW5kVHlwZTtcbn1cblxuZXhwb3J0IGNsYXNzIEluaXRHYW1lQ29tbWFuZCBpbXBsZW1lbnRzIENvbW1hbmQge1xuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBwdWJsaWMgZ2FtZURhdGE6IEdhbWVEYXRhLFxuICAgICkge31cblxuICAgIHB1YmxpYyBnZXRDb21tYW5kVHlwZSgpOiBDb21tYW5kVHlwZSB7XG4gICAgICAgIHJldHVybiBDb21tYW5kVHlwZS5Jbml0R2FtZTtcbiAgICB9XG59XG5cbmV4cG9ydCBjbGFzcyBSZXN1bWVHYW1lQ29tbWFuZCBpbXBsZW1lbnRzIENvbW1hbmQge1xuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBwdWJsaWMgZ2FtZURhdGE6IEdhbWVEYXRhLFxuICAgICkge31cblxuICAgIHB1YmxpYyBnZXRDb21tYW5kVHlwZSgpOiBDb21tYW5kVHlwZSB7XG4gICAgICAgIHJldHVybiBDb21tYW5kVHlwZS5SZXN1bWVHYW1lO1xuICAgIH1cbn1cblxuZXhwb3J0IGNsYXNzIFBhdXNlR2FtZUNvbW1hbmQgaW1wbGVtZW50cyBDb21tYW5kIHtcbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgcHVibGljIGdhbWVEYXRhOiBHYW1lRGF0YSxcbiAgICApIHt9XG5cbiAgICBwdWJsaWMgZ2V0Q29tbWFuZFR5cGUoKTogQ29tbWFuZFR5cGUge1xuICAgICAgICByZXR1cm4gQ29tbWFuZFR5cGUuUGF1c2VHYW1lO1xuICAgIH1cbn1cblxuZXhwb3J0IGNsYXNzIEZpZ3VyZXNGYWxsVGlja0NvbW1hbmQgaW1wbGVtZW50cyBDb21tYW5kIHtcbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgcHVibGljIGdhbWVEYXRhOiBHYW1lRGF0YSxcbiAgICApIHt9XG5cbiAgICBwdWJsaWMgZ2V0Q29tbWFuZFR5cGUoKTogQ29tbWFuZFR5cGUge1xuICAgICAgICByZXR1cm4gQ29tbWFuZFR5cGUuRmlndXJlc0ZhbGxUaWNrO1xuICAgIH1cbn1cblxuZXhwb3J0IGNsYXNzIEdhbWVPdmVyQ29tbWFuZCBpbXBsZW1lbnRzIENvbW1hbmQge1xuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBwdWJsaWMgZ2FtZURhdGE6IEdhbWVEYXRhLFxuICAgICkge31cblxuICAgIHB1YmxpYyBnZXRDb21tYW5kVHlwZSgpOiBDb21tYW5kVHlwZSB7XG4gICAgICAgIHJldHVybiBDb21tYW5kVHlwZS5HYW1lT3ZlcjtcbiAgICB9XG59XG5cbmV4cG9ydCBjbGFzcyBSZW5kZXJDb21tYW5kIGltcGxlbWVudHMgQ29tbWFuZCB7XG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIHB1YmxpYyBnYW1lRGF0YTogR2FtZURhdGEsXG4gICAgKSB7fVxuXG4gICAgcHVibGljIGdldENvbW1hbmRUeXBlKCk6IENvbW1hbmRUeXBlIHtcbiAgICAgICAgcmV0dXJuIENvbW1hbmRUeXBlLlJlbmRlcjtcbiAgICB9XG59XG5cbmV4cG9ydCBjbGFzcyBNb3ZlTGVmdENvbW1hbmQgaW1wbGVtZW50cyBDb21tYW5kIHtcbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgcHVibGljIGdhbWVEYXRhOiBHYW1lRGF0YSxcbiAgICApIHt9XG5cbiAgICBwdWJsaWMgZ2V0Q29tbWFuZFR5cGUoKTogQ29tbWFuZFR5cGUge1xuICAgICAgICByZXR1cm4gQ29tbWFuZFR5cGUuTW92ZUxlZnQ7XG4gICAgfVxufVxuXG5leHBvcnQgY2xhc3MgTW92ZVJpZ2h0Q29tbWFuZCBpbXBsZW1lbnRzIENvbW1hbmQge1xuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBwdWJsaWMgZ2FtZURhdGE6IEdhbWVEYXRhLFxuICAgICkge31cblxuICAgIHB1YmxpYyBnZXRDb21tYW5kVHlwZSgpOiBDb21tYW5kVHlwZSB7XG4gICAgICAgIHJldHVybiBDb21tYW5kVHlwZS5Nb3ZlUmlnaHQ7XG4gICAgfVxufVxuXG5leHBvcnQgY2xhc3MgVHVybkNsb2Nrd2lzZUNvbW1hbmQgaW1wbGVtZW50cyBDb21tYW5kIHtcbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgcHVibGljIGdhbWVEYXRhOiBHYW1lRGF0YSxcbiAgICApIHt9XG5cbiAgICBwdWJsaWMgZ2V0Q29tbWFuZFR5cGUoKTogQ29tbWFuZFR5cGUge1xuICAgICAgICByZXR1cm4gQ29tbWFuZFR5cGUuVHVybkNsb2Nrd2lzZTtcbiAgICB9XG59XG5cbmV4cG9ydCBjbGFzcyBNb3ZlRG93bkNvbW1hbmQgaW1wbGVtZW50cyBDb21tYW5kIHtcbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgcHVibGljIGdhbWVEYXRhOiBHYW1lRGF0YSxcbiAgICApIHt9XG5cbiAgICBwdWJsaWMgZ2V0Q29tbWFuZFR5cGUoKTogQ29tbWFuZFR5cGUge1xuICAgICAgICByZXR1cm4gQ29tbWFuZFR5cGUuTW92ZURvd247XG4gICAgfVxufVxuXG5leHBvcnQgY2xhc3MgRmlndXJlc0ZhbGxEb3duQ29tbWFuZCBpbXBsZW1lbnRzIENvbW1hbmQge1xuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBwdWJsaWMgZ2FtZURhdGE6IEdhbWVEYXRhLFxuICAgICkge31cblxuICAgIHB1YmxpYyBnZXRDb21tYW5kVHlwZSgpOiBDb21tYW5kVHlwZSB7XG4gICAgICAgIHJldHVybiBDb21tYW5kVHlwZS5GaWd1cmVzRmFsbERvd247XG4gICAgfVxufVxuXG5leHBvcnQgY2xhc3MgQ29tbWFuZEJ1cyB7XG4gICAgcHJpdmF0ZSBoYW5kbGVyczogTWFwPENvbW1hbmRUeXBlLCAoKHBheWxvYWQ6IENvbW1hbmQpID0+IHZvaWQpW10+ID0gbmV3IE1hcCgpO1xuXG4gICAgcHVibGljIGFkZEhhbmRsZXIoZXZlbnQ6IENvbW1hbmRUeXBlLCBoYW5kbGVyOiAoLi4uXzogYW55KSA9PiB2b2lkLCB1bmlxdWU6IGJvb2xlYW4gPSB0cnVlKTogdm9pZCB7XG4gICAgICAgIGxldCBoYW5kbGVycyA9IHRoaXMuaGFuZGxlcnMuZ2V0KGV2ZW50KSB8fCBbXTtcbiAgICAgICAgaWYgKHVuaXF1ZSAmJiBoYW5kbGVycy5zb21lKGJvdW5kSGFuZGxlciA9PiBib3VuZEhhbmRsZXIgPT09IGhhbmRsZXIpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaGFuZGxlcnMucHVzaChoYW5kbGVyKTtcbiAgICAgICAgdGhpcy5oYW5kbGVycy5zZXQoZXZlbnQsIGhhbmRsZXJzKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgcmVtb3ZlSGFuZGxlcihldmVudDogQ29tbWFuZFR5cGUsIGhhbmRsZXI6ICguLi5fOiBhbnkpID0+IHZvaWQpOiB2b2lkIHtcbiAgICAgICAgbGV0IGhhbmRsZXJzID0gdGhpcy5oYW5kbGVycy5nZXQoZXZlbnQpIHx8IFtdO1xuICAgICAgICBsZXQgaW5kZXggPSBoYW5kbGVycy5pbmRleE9mKGhhbmRsZXIpO1xuICAgICAgICBpZiAoaW5kZXggPiAwKSB7XG4gICAgICAgICAgICBoYW5kbGVycy5zcGxpY2UoaW5kZXgsIDEpXG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5oYW5kbGVycy5zZXQoZXZlbnQsIGhhbmRsZXJzKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgcnVuKHBheWxvYWQ6IENvbW1hbmQpOiB2b2lkIHtcbiAgICAgICAgbGV0IGhhbmRsZXJzID0gdGhpcy5oYW5kbGVycy5nZXQocGF5bG9hZC5nZXRDb21tYW5kVHlwZSgpKSB8fCBbXTtcbiAgICAgICAgaGFuZGxlcnMuZm9yRWFjaChoYW5kbGVyID0+IHtoYW5kbGVyKHBheWxvYWQpfSk7XG4gICAgfVxufVxuIiwiaW1wb3J0IHtGYWxsaW5nRmlndXJlfSBmcm9tIFwiLi9TdHJ1Y3R1cmVzXCI7XG5pbXBvcnQge0dhbWVTZXR0aW5nc30gZnJvbSBcIi4vR2FtZVNldHRpbmdzXCI7XG5pbXBvcnQge0xlZnRMRmlndXJlLCBMWkZpZ3VyZSwgUmlnaHRMRmlndXJlLCBSWkZpZ3VyZSwgU3F1YXJlRmlndXJlLCBTdGlja0ZpZ3VyZSwgVEZpZ3VyZX0gZnJvbSBcIi4vRmlndXJlc1wiO1xuXG5leHBvcnQgY2xhc3MgR2FtZURhdGEge1xuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBwdWJsaWMgaXNJbml0aWFsaXplZDogYm9vbGVhbiA9IGZhbHNlLFxuICAgICAgICBwdWJsaWMgaXNHYW1lT3ZlcjogYm9vbGVhbiA9IGZhbHNlLFxuICAgICAgICBwdWJsaWMgZmFsbGluZ0ZpZ3VyZXM6IEZhbGxpbmdGaWd1cmVbXSA9IFtdLFxuICAgICAgICBwdWJsaWMgbWF0cml4OiBib29sZWFuW11bXSA9IFtdLFxuICAgICAgICBwdWJsaWMgbmV4dFRpY2tUaW1lb3V0SWQ6IFJldHVyblR5cGU8dHlwZW9mIHNldFRpbWVvdXQ+ID0gc2V0VGltZW91dCgoKSA9PiB7fSksXG4gICAgICAgIHB1YmxpYyBzZXR0aW5nczogR2FtZVNldHRpbmdzLFxuICAgICkge31cblxuICAgIHN0YXRpYyBtYWtlU2ltcGxlKHdpZHRoOiBudW1iZXIgPSAxMCwgaGVpZ2h0OiBudW1iZXIgPSAyMCk6IEdhbWVEYXRhIHtcbiAgICAgICAgcmV0dXJuIG5ldyBHYW1lRGF0YShcbiAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICBbXSxcbiAgICAgICAgICAgIG5ldyBBcnJheShoZWlnaHQpLmZpbGwoW10pXG4gICAgICAgICAgICAgICAgLm1hcChfID0+IG5ldyBBcnJheSh3aWR0aCkuZmlsbChmYWxzZSkpLFxuICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7fSksXG4gICAgICAgICAgICBuZXcgR2FtZVNldHRpbmdzKFxuICAgICAgICAgICAgICAgIHdpZHRoLFxuICAgICAgICAgICAgICAgIGhlaWdodCxcbiAgICAgICAgICAgICAgICBbXG4gICAgICAgICAgICAgICAgICAgIG5ldyBURmlndXJlKCksXG4gICAgICAgICAgICAgICAgICAgIG5ldyBSaWdodExGaWd1cmUoKSxcbiAgICAgICAgICAgICAgICAgICAgbmV3IExlZnRMRmlndXJlKCksXG4gICAgICAgICAgICAgICAgICAgIG5ldyBTcXVhcmVGaWd1cmUoKSxcbiAgICAgICAgICAgICAgICAgICAgbmV3IFN0aWNrRmlndXJlKCksXG4gICAgICAgICAgICAgICAgICAgIG5ldyBMWkZpZ3VyZSgpLFxuICAgICAgICAgICAgICAgICAgICBuZXcgUlpGaWd1cmUoKSxcbiAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgKSxcbiAgICAgICAgKVxuICAgIH1cbn1cbiIsImltcG9ydCB7VGltaW5nc0hhbmRsZXJ9IGZyb20gXCIuL1RpbWluZ3NIYW5kbGVyL1RpbWluZ3NIYW5kbGVyXCI7XG5pbXBvcnQge0V2ZW50QnVzLCBHYW1lT3ZlckV2ZW50fSBmcm9tIFwiLi9FdmVudEJ1cy9FdmVudEJ1c1wiO1xuaW1wb3J0IHtHYW1lRGF0YX0gZnJvbSBcIi4vR2FtZURhdGFcIjtcbmltcG9ydCB7Q29tbWFuZEJ1cywgQ29tbWFuZFR5cGUsIEZpZ3VyZXNGYWxsVGlja0NvbW1hbmQsIEluaXRHYW1lQ29tbWFuZCwgUGF1c2VHYW1lQ29tbWFuZCwgUmVuZGVyQ29tbWFuZCwgUmVzdW1lR2FtZUNvbW1hbmR9IGZyb20gXCIuL0NvbW1hbmRCdXMvQ29tbWFuZEJ1c1wiO1xuXG5leHBvcnQgY2xhc3MgR2FtZUNvbnRyb2xsZXIge1xuICAgIHByaXZhdGUgZ2FtZURhdGE6IEdhbWVEYXRhID0gR2FtZURhdGEubWFrZVNpbXBsZSgpO1xuXG4gICAgY29uc3RydWN0b3IgKFxuICAgICAgICBwcml2YXRlIHRpbWluZ3NIYW5kbGVyOiBUaW1pbmdzSGFuZGxlcixcbiAgICAgICAgcHJpdmF0ZSBldmVudEJ1czogRXZlbnRCdXMsXG4gICAgICAgIHByaXZhdGUgY29tbWFuZEJ1czogQ29tbWFuZEJ1cyxcbiAgICApIHtcbiAgICAgICAgdGhpcy5jb21tYW5kQnVzLmFkZEhhbmRsZXIoQ29tbWFuZFR5cGUuSW5pdEdhbWUsIHRoaXMuaW5pdEdhbWVIYW5kbGVyLmJpbmQodGhpcykpO1xuICAgICAgICB0aGlzLmNvbW1hbmRCdXMuYWRkSGFuZGxlcihDb21tYW5kVHlwZS5SZXN1bWVHYW1lLCB0aGlzLnJlc3VtZUdhbWVIYW5kbGVyLmJpbmQodGhpcykpO1xuICAgICAgICB0aGlzLmNvbW1hbmRCdXMuYWRkSGFuZGxlcihDb21tYW5kVHlwZS5QYXVzZUdhbWUsIHRoaXMucGF1c2VHYW1lSGFuZGxlci5iaW5kKHRoaXMpKTtcbiAgICAgICAgdGhpcy5jb21tYW5kQnVzLmFkZEhhbmRsZXIoQ29tbWFuZFR5cGUuR2FtZU92ZXIsIHRoaXMuZ2FtZU92ZXJIYW5kbGVyLmJpbmQodGhpcykpO1xuICAgIH1cblxuICAgIHByaXZhdGUgaW5pdEdhbWVIYW5kbGVyKGNvbW1hbmQ6IEluaXRHYW1lQ29tbWFuZCk6IHZvaWQge1xuICAgICAgICB0aGlzLmdhbWVEYXRhID0gY29tbWFuZC5nYW1lRGF0YTtcbiAgICAgICAgdGhpcy5nYW1lRGF0YS5pc0luaXRpYWxpemVkID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBwcml2YXRlIHJlc3VtZUdhbWVIYW5kbGVyKGNvbW1hbmQ6IFJlc3VtZUdhbWVDb21tYW5kKTogdm9pZCB7XG4gICAgICAgIGlmICh0aGlzLmdhbWVEYXRhLmlzR2FtZU92ZXIpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXRoaXMuZ2FtZURhdGEuaXNJbml0aWFsaXplZCkge1xuICAgICAgICAgICAgdGhpcy5jb21tYW5kQnVzLnJ1bihuZXcgSW5pdEdhbWVDb21tYW5kKGNvbW1hbmQuZ2FtZURhdGEpKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmZhbGxUaWNrKCk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBwYXVzZUdhbWVIYW5kbGVyKGNvbW1hbmQ6IFJlc3VtZUdhbWVDb21tYW5kKTogdm9pZCB7XG4gICAgICAgIHRoaXMuZ2FtZURhdGEgPSBjb21tYW5kLmdhbWVEYXRhO1xuICAgICAgICBjbGVhclRpbWVvdXQodGhpcy5nYW1lRGF0YS5uZXh0VGlja1RpbWVvdXRJZCk7XG4gICAgICAgIHRoaXMuY29tbWFuZEJ1cy5ydW4obmV3IFJlbmRlckNvbW1hbmQodGhpcy5nYW1lRGF0YSkpO1xuICAgIH1cblxuICAgIHByaXZhdGUgZ2FtZU92ZXJIYW5kbGVyKCk6IHZvaWQge1xuICAgICAgICBjbGVhclRpbWVvdXQodGhpcy5nYW1lRGF0YS5uZXh0VGlja1RpbWVvdXRJZCk7XG4gICAgICAgIHRoaXMuZ2FtZURhdGEuaXNJbml0aWFsaXplZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLmdhbWVEYXRhLmlzR2FtZU92ZXIgPSB0cnVlO1xuICAgICAgICB0aGlzLmV2ZW50QnVzLmZpcmUobmV3IEdhbWVPdmVyRXZlbnQodGhpcy5nYW1lRGF0YSkpO1xuICAgIH1cblxuICAgIHByaXZhdGUgZmFsbFRpY2soKTogdm9pZCB7XG4gICAgICAgIHRoaXMuY29tbWFuZEJ1cy5ydW4obmV3IEZpZ3VyZXNGYWxsVGlja0NvbW1hbmQodGhpcy5nYW1lRGF0YSkpO1xuICAgICAgICBpZiAoIXRoaXMuZ2FtZURhdGEuaXNHYW1lT3Zlcikge1xuICAgICAgICAgICAgdGhpcy5nYW1lRGF0YS5uZXh0VGlja1RpbWVvdXRJZCA9IHNldFRpbWVvdXQoXG4gICAgICAgICAgICAgICAgdGhpcy5mYWxsVGljay5iaW5kKHRoaXMpLFxuICAgICAgICAgICAgICAgIHRoaXMudGltaW5nc0hhbmRsZXIuZ2V0RGVsYXlGb3JOZXh0VGlja01zKClcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICB9XG59XG4iLCJpbXBvcnQge0Nvb3JkaW5hdGV9IGZyb20gXCIuLi9TdHJ1Y3R1cmVzXCI7XG5cbmV4cG9ydCBjbGFzcyBGaWd1cmVQbGFjaW5nQ2hlY2tlciB7XG4gICAgcHVibGljIHN0YXRpYyBjYW5GaWd1cmVCZVBsYWNlZCh0YXJnZXRGaWd1cmVNYXRyaXg6IGJvb2xlYW5bXVtdLCB0YXJnZXRQb3NpdGlvbjogQ29vcmRpbmF0ZSwgbWF0cml4OiBib29sZWFuW11bXSk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdGFyZ2V0RmlndXJlTWF0cml4LmV2ZXJ5KChyb3csIHkpID0+IHtcbiAgICAgICAgICAgIHJldHVybiByb3cuZXZlcnkoKHZhbHVlLCB4KSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgcmVhbFkgPSB0YXJnZXRQb3NpdGlvbi55ICsgeTtcbiAgICAgICAgICAgICAgICBjb25zdCByZWFsWCA9IHRhcmdldFBvc2l0aW9uLnggKyB4O1xuICAgICAgICAgICAgICAgIHJldHVybiAhdmFsdWVcbiAgICAgICAgICAgICAgICAgICAgfHwgKFxuICAgICAgICAgICAgICAgICAgICAgICAgcmVhbFkgPCAwXG4gICAgICAgICAgICAgICAgICAgICAgICAmJiByZWFsWCA+IDBcbiAgICAgICAgICAgICAgICAgICAgICAgICYmIHJlYWxYIDwgbWF0cml4WzBdLmxlbmd0aCAtIDFcbiAgICAgICAgICAgICAgICAgICAgKSB8fCAoXG4gICAgICAgICAgICAgICAgICAgICAgICByZWFsWSBpbiBtYXRyaXhcbiAgICAgICAgICAgICAgICAgICAgICAgICYmIHJlYWxYIGluIG1hdHJpeFtyZWFsWV1cbiAgICAgICAgICAgICAgICAgICAgICAgICYmICFtYXRyaXhbcmVhbFldW3JlYWxYXVxuICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cbn1cbiIsImltcG9ydCB7RmlndXJlLCBGaWd1cmVUdXJuU3RhdGV9IGZyb20gXCIuL0ZpZ3VyZXNcIjtcblxuLyoqXG4gKiB4IGZvciBob3Jpem9udGFsIHBvc2l0aW9uaW5nXG4gKiB5IGZvciB2ZXJ0aWNhbCBwb3NpdGlvbmluZ1xuICovXG5leHBvcnQgY2xhc3MgQ29vcmRpbmF0ZSB7XG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIHB1YmxpYyB4OiBudW1iZXIsXG4gICAgICAgIHB1YmxpYyB5OiBudW1iZXIsXG4gICAgKSB7fVxufVxuXG5leHBvcnQgY2xhc3MgRmFsbGluZ0ZpZ3VyZSB7XG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIHB1YmxpYyBmaWd1cmU6IEZpZ3VyZSxcbiAgICAgICAgcHVibGljIHBvc2l0aW9uOiBDb29yZGluYXRlLFxuICAgICAgICBwdWJsaWMgdHVyblN0YXRlOiBGaWd1cmVUdXJuU3RhdGUsXG4gICAgKSB7fVxufVxuIiwiaW1wb3J0IHtDb21tYW5kQnVzLCBDb21tYW5kVHlwZSwgSW5pdEdhbWVDb21tYW5kLCBSZW5kZXJDb21tYW5kfSBmcm9tIFwiLi4vQ29tbWFuZEJ1cy9Db21tYW5kQnVzXCI7XG5pbXBvcnQge0V2ZW50QnVzLCBFdmVudFR5cGUsIEZhbGxUaWNrUHJvY2Vzc2VkRXZlbnQsIEdhbWVPdmVyRXZlbnR9IGZyb20gXCIuLi9FdmVudEJ1cy9FdmVudEJ1c1wiO1xuaW1wb3J0IHtHYW1lRGF0YX0gZnJvbSBcIi4uL0dhbWVEYXRhXCI7XG5pbXBvcnQge0ZpZ3VyZVBsYWNpbmdDaGVja2VyfSBmcm9tIFwiLi4vVXRpbHMvRmlndXJlUGxhY2luZ0NoZWNrZXJcIjtcbmltcG9ydCB7Q29vcmRpbmF0ZX0gZnJvbSBcIi4uL1N0cnVjdHVyZXNcIjtcblxuZXhwb3J0IGNsYXNzIFRhYmxlUmVuZGVyZXJDZWxsQ29sb3JTZXR0aW5ncyB7XG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIHB1YmxpYyBmaWxsZWQ6IHN0cmluZ3xudWxsLFxuICAgICAgICBwdWJsaWMgZmlsbGVkR2FtZU92ZXI6IHN0cmluZ3xudWxsLFxuICAgICAgICBwdWJsaWMgZW1wdHk6IHN0cmluZ3xudWxsLFxuICAgICkge31cbn1cblxuZXhwb3J0IGNsYXNzIFRhYmxlUmVuZGVyZXJTZXR0aW5ncyB7XG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIHB1YmxpYyBjb250YWluZXJFbGVtZW50OiBIVE1MRWxlbWVudCxcbiAgICAgICAgcHVibGljIHJlbmRlclByb2plY3Rpb25GaWd1cmVzOiBib29sZWFuID0gdHJ1ZSxcbiAgICAgICAgcHVibGljIG1hdHJpeENlbGxDb2xvcnM6IFRhYmxlUmVuZGVyZXJDZWxsQ29sb3JTZXR0aW5ncyA9IG5ldyBUYWJsZVJlbmRlcmVyQ2VsbENvbG9yU2V0dGluZ3MoXG4gICAgICAgICAgICAnIzAwNzQwMCcsXG4gICAgICAgICAgICAnIzc4MDAwMCcsXG4gICAgICAgICAgICAnI2ZmZicsXG4gICAgICAgICksXG4gICAgICAgIHB1YmxpYyBmYWxsaW5nRmlndXJlQ2VsbENvbG9yczogVGFibGVSZW5kZXJlckNlbGxDb2xvclNldHRpbmdzID0gbmV3IFRhYmxlUmVuZGVyZXJDZWxsQ29sb3JTZXR0aW5ncyhcbiAgICAgICAgICAgICcjMDA3NDAwJyxcbiAgICAgICAgICAgICcjNzgwMDAwJyxcbiAgICAgICAgICAgIG51bGwsXG4gICAgICAgICksXG4gICAgICAgIHB1YmxpYyBwcm9qZWN0aW9uRmlndXJlQ2VsbENvbG9yczogVGFibGVSZW5kZXJlckNlbGxDb2xvclNldHRpbmdzID0gbmV3IFRhYmxlUmVuZGVyZXJDZWxsQ29sb3JTZXR0aW5ncyhcbiAgICAgICAgICAgICcjYjhlNWUzJyxcbiAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICBudWxsLFxuICAgICAgICApLFxuICAgICkge31cbn1cblxuY2xhc3MgQ2VsbENvbG9ycyB7XG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIHB1YmxpYyBmaWxsZWQ6IHN0cmluZ3xudWxsLFxuICAgICAgICBwdWJsaWMgZW1wdHk6IHN0cmluZ3xudWxsLFxuICAgICkge31cbn1cblxuZXhwb3J0IGNsYXNzIFRhYmxlUmVuZGVyZXIge1xuICAgIHByaXZhdGUgY2VsbHNIdG1sRWxlbWVudHNNYXA6IEhUTUxFbGVtZW50W11bXSA9IFtdO1xuXG4gICAgY29uc3RydWN0b3IgKFxuICAgICAgICBwcml2YXRlIHJlbmRlclNldHRpbmdzOiBUYWJsZVJlbmRlcmVyU2V0dGluZ3MsXG4gICAgICAgIHByaXZhdGUgY29tbWFuZEJ1czogQ29tbWFuZEJ1cyxcbiAgICAgICAgcHJpdmF0ZSBldmVudEJ1czogRXZlbnRCdXMsXG4gICAgKSB7XG4gICAgICAgIGNvbW1hbmRCdXMuYWRkSGFuZGxlcihDb21tYW5kVHlwZS5Jbml0R2FtZSwgdGhpcy5pbml0SGFuZGxlci5iaW5kKHRoaXMpKTtcbiAgICAgICAgY29tbWFuZEJ1cy5hZGRIYW5kbGVyKENvbW1hbmRUeXBlLlJlbmRlciwgdGhpcy5yZW5kZXJDb21tYW5kSGFuZGxlci5iaW5kKHRoaXMpKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGluaXRIYW5kbGVyKGNvbW1hbmQ6IEluaXRHYW1lQ29tbWFuZCk6IHZvaWQge1xuICAgICAgICBsZXQgdGFibGUgPSBUYWJsZVJlbmRlcmVyLmNyZWF0ZUh0bWxFbGVtZW50KCc8ZGl2IHN0eWxlPVwiZGlzcGxheTogdGFibGU7IGJvcmRlci1jb2xsYXBzZTogY29sbGFwc2VcIj48L2Rpdj4nKTtcbiAgICAgICAgdGhpcy5jZWxsc0h0bWxFbGVtZW50c01hcCA9IFtdO1xuICAgICAgICBmb3IgKGxldCB5ID0gMDsgeSA8IGNvbW1hbmQuZ2FtZURhdGEuc2V0dGluZ3MuZmllbGRIZWlnaHQ7IHkrKykge1xuICAgICAgICAgICAgbGV0IHJvdyA9IFRhYmxlUmVuZGVyZXIuY3JlYXRlSHRtbEVsZW1lbnQoJzxkaXYgc3R5bGU9XCJkaXNwbGF5OiB0YWJsZS1yb3dcIj48L2Rpdj4nKTtcbiAgICAgICAgICAgIHRoaXMuY2VsbHNIdG1sRWxlbWVudHNNYXBbeV0gPSBbXTtcbiAgICAgICAgICAgIGZvciAobGV0IHggPSAwOyB4IDwgY29tbWFuZC5nYW1lRGF0YS5zZXR0aW5ncy5maWVsZFdpZHRoOyB4KyspIHtcbiAgICAgICAgICAgICAgICBsZXQgY2VsbCA9IFRhYmxlUmVuZGVyZXIuY3JlYXRlSHRtbEVsZW1lbnQoJzxkaXYgc3R5bGU9XCJkaXNwbGF5OiB0YWJsZS1jZWxsOyBib3JkZXI6IDFweCBzb2xpZCAjY2NjOyB3aWR0aDogMjBweDsgaGVpZ2h0OiAyMHB4XCI+PC9kaXY+Jyk7XG4gICAgICAgICAgICAgICAgdGhpcy5jZWxsc0h0bWxFbGVtZW50c01hcFt5XVt4XSA9IGNlbGw7XG4gICAgICAgICAgICAgICAgcm93LmFwcGVuZENoaWxkKGNlbGwpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGFibGUuYXBwZW5kQ2hpbGQocm93KTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnJlbmRlclNldHRpbmdzLmNvbnRhaW5lckVsZW1lbnQucmVwbGFjZUNoaWxkcmVuKHRhYmxlKTtcblxuICAgICAgICB0aGlzLmV2ZW50QnVzLm9uKEV2ZW50VHlwZS5GYWxsaW5nVGlja1Byb2Nlc3NlZCwgdGhpcy5vbkZhbGxUaWNrUHJvY2Vzc2VkLmJpbmQodGhpcykpO1xuICAgICAgICB0aGlzLmV2ZW50QnVzLm9uKEV2ZW50VHlwZS5HYW1lT3ZlciwgdGhpcy5vbkZhbGxUaWNrUHJvY2Vzc2VkLmJpbmQodGhpcykpO1xuICAgICAgICB0aGlzLmV2ZW50QnVzLm9uKEV2ZW50VHlwZS5GaWd1cmVzTW92ZWQsIHRoaXMub25GaWd1cmVzTW92ZWQuYmluZCh0aGlzKSk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBvbkZpZ3VyZXNNb3ZlZChjb21tYW5kOiBGYWxsVGlja1Byb2Nlc3NlZEV2ZW50KTogdm9pZCB7XG4gICAgICAgIHRoaXMucmVuZGVyU3RhdGUoY29tbWFuZC5nYW1lRGF0YSk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBvbkZhbGxUaWNrUHJvY2Vzc2VkKGNvbW1hbmQ6IEZhbGxUaWNrUHJvY2Vzc2VkRXZlbnQpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5yZW5kZXJTdGF0ZShjb21tYW5kLmdhbWVEYXRhKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIG9uR2FtZU92ZXIoY29tbWFuZDogR2FtZU92ZXJFdmVudCk6IHZvaWQge1xuICAgICAgICB0aGlzLnJlbmRlclN0YXRlKGNvbW1hbmQuZ2FtZURhdGEpO1xuICAgIH1cblxuICAgIHByaXZhdGUgcmVuZGVyQ29tbWFuZEhhbmRsZXIoY29tbWFuZDogUmVuZGVyQ29tbWFuZCk6IHZvaWQge1xuICAgICAgICB0aGlzLnJlbmRlclN0YXRlKGNvbW1hbmQuZ2FtZURhdGEpO1xuICAgIH1cblxuICAgIHByaXZhdGUgcmVuZGVyU3RhdGUoZ2FtZURhdGE6IEdhbWVEYXRhKTogdm9pZCB7XG4gICAgICAgIHRoaXMucmVwYWludE1hdHJpeENlbGxzKGdhbWVEYXRhLm1hdHJpeCwgbmV3IENvb3JkaW5hdGUoMCwgMCksIGdhbWVEYXRhKTtcbiAgICAgICAgaWYgKHRoaXMucmVuZGVyU2V0dGluZ3MucmVuZGVyUHJvamVjdGlvbkZpZ3VyZXMpIHtcbiAgICAgICAgICAgIHRoaXMucmVuZGVyRmFsbGluZ0ZpZ3VyZXNQcm9qZWN0aW9uKGdhbWVEYXRhKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnJlbmRlckZhbGxpbmdGaWd1cmVzKGdhbWVEYXRhKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIHJlbmRlckZhbGxpbmdGaWd1cmVzKGdhbWVEYXRhOiBHYW1lRGF0YSk6IHZvaWQge1xuICAgICAgICBnYW1lRGF0YS5mYWxsaW5nRmlndXJlcy5mb3JFYWNoKGZhbGxpbmdGaWd1cmUgPT4ge1xuICAgICAgICAgICAgdGhpcy5yZXBhaW50RmFsbGluZ0ZpZ3VyZXNDZWxscyhcbiAgICAgICAgICAgICAgICBmYWxsaW5nRmlndXJlLmZpZ3VyZS5nZXRUdXJuKGZhbGxpbmdGaWd1cmUudHVyblN0YXRlKSxcbiAgICAgICAgICAgICAgICBmYWxsaW5nRmlndXJlLnBvc2l0aW9uLFxuICAgICAgICAgICAgICAgIGdhbWVEYXRhXG4gICAgICAgICAgICApO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBwcml2YXRlIHJlbmRlckZhbGxpbmdGaWd1cmVzUHJvamVjdGlvbihnYW1lRGF0YTogR2FtZURhdGEpOiB2b2lkIHtcbiAgICAgICAgZ2FtZURhdGEuZmFsbGluZ0ZpZ3VyZXMuZm9yRWFjaChmYWxsaW5nRmlndXJlID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGZpZ3VyZU1hdHJpeCA9IGZhbGxpbmdGaWd1cmUuZmlndXJlLmdldFR1cm4oZmFsbGluZ0ZpZ3VyZS50dXJuU3RhdGUpO1xuICAgICAgICAgICAgY29uc3QgcHJvamVjdGlvbkZpZ3VyZVggPSBmYWxsaW5nRmlndXJlLnBvc2l0aW9uLng7XG4gICAgICAgICAgICBsZXQgcHJvamVjdGlvbkZpZ3VyZVkgPSBmYWxsaW5nRmlndXJlLnBvc2l0aW9uLnk7XG4gICAgICAgICAgICB3aGlsZShGaWd1cmVQbGFjaW5nQ2hlY2tlci5jYW5GaWd1cmVCZVBsYWNlZChmaWd1cmVNYXRyaXgsIG5ldyBDb29yZGluYXRlKHByb2plY3Rpb25GaWd1cmVYLCBwcm9qZWN0aW9uRmlndXJlWSArIDEpLCBnYW1lRGF0YS5tYXRyaXgpKSB7XG4gICAgICAgICAgICAgICAgcHJvamVjdGlvbkZpZ3VyZVkrKztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMucmVwYWludFByb2plY3Rpb25GaWd1cmVzQ2VsbHMoXG4gICAgICAgICAgICAgICAgZmlndXJlTWF0cml4LFxuICAgICAgICAgICAgICAgIG5ldyBDb29yZGluYXRlKHByb2plY3Rpb25GaWd1cmVYLCBwcm9qZWN0aW9uRmlndXJlWSksXG4gICAgICAgICAgICAgICAgZ2FtZURhdGFcbiAgICAgICAgICAgICk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHByaXZhdGUgcmVwYWludE1hdHJpeENlbGxzKG1hdHJpeDogYm9vbGVhbltdW10sIGluZGVudDogQ29vcmRpbmF0ZSwgZ2FtZURhdGE6IEdhbWVEYXRhKTogdm9pZCB7XG4gICAgICAgIGxldCBjb2xvcnM6IENlbGxDb2xvcnM7XG4gICAgICAgIGlmIChnYW1lRGF0YS5pc0dhbWVPdmVyKSB7XG4gICAgICAgICAgICBjb2xvcnMgPSBuZXcgQ2VsbENvbG9ycyhcbiAgICAgICAgICAgICAgICB0aGlzLnJlbmRlclNldHRpbmdzLm1hdHJpeENlbGxDb2xvcnMuZmlsbGVkR2FtZU92ZXIsXG4gICAgICAgICAgICAgICAgdGhpcy5yZW5kZXJTZXR0aW5ncy5tYXRyaXhDZWxsQ29sb3JzLmVtcHR5LFxuICAgICAgICAgICAgKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbG9ycyA9IG5ldyBDZWxsQ29sb3JzKFxuICAgICAgICAgICAgICAgIHRoaXMucmVuZGVyU2V0dGluZ3MubWF0cml4Q2VsbENvbG9ycy5maWxsZWQsXG4gICAgICAgICAgICAgICAgdGhpcy5yZW5kZXJTZXR0aW5ncy5tYXRyaXhDZWxsQ29sb3JzLmVtcHR5LFxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnJlcGFpbnRDZWxscyhtYXRyaXgsIGluZGVudCwgY29sb3JzKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIHJlcGFpbnRGYWxsaW5nRmlndXJlc0NlbGxzKG1hdHJpeDogYm9vbGVhbltdW10sIGluZGVudDogQ29vcmRpbmF0ZSwgZ2FtZURhdGE6IEdhbWVEYXRhKTogdm9pZCB7XG4gICAgICAgIGxldCBjb2xvcnM6IENlbGxDb2xvcnM7XG4gICAgICAgIGlmIChnYW1lRGF0YS5pc0dhbWVPdmVyKSB7XG4gICAgICAgICAgICBjb2xvcnMgPSBuZXcgQ2VsbENvbG9ycyhcbiAgICAgICAgICAgICAgICB0aGlzLnJlbmRlclNldHRpbmdzLmZhbGxpbmdGaWd1cmVDZWxsQ29sb3JzLmZpbGxlZEdhbWVPdmVyLFxuICAgICAgICAgICAgICAgIHRoaXMucmVuZGVyU2V0dGluZ3MuZmFsbGluZ0ZpZ3VyZUNlbGxDb2xvcnMuZW1wdHksXG4gICAgICAgICAgICApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29sb3JzID0gbmV3IENlbGxDb2xvcnMoXG4gICAgICAgICAgICAgICAgdGhpcy5yZW5kZXJTZXR0aW5ncy5mYWxsaW5nRmlndXJlQ2VsbENvbG9ycy5maWxsZWQsXG4gICAgICAgICAgICAgICAgdGhpcy5yZW5kZXJTZXR0aW5ncy5mYWxsaW5nRmlndXJlQ2VsbENvbG9ycy5lbXB0eSxcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5yZXBhaW50Q2VsbHMobWF0cml4LCBpbmRlbnQsIGNvbG9ycyk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSByZXBhaW50UHJvamVjdGlvbkZpZ3VyZXNDZWxscyhtYXRyaXg6IGJvb2xlYW5bXVtdLCBpbmRlbnQ6IENvb3JkaW5hdGUsIGdhbWVEYXRhOiBHYW1lRGF0YSk6IHZvaWQge1xuICAgICAgICBsZXQgY29sb3JzOiBDZWxsQ29sb3JzO1xuICAgICAgICBpZiAoZ2FtZURhdGEuaXNHYW1lT3Zlcikge1xuICAgICAgICAgICAgY29sb3JzID0gbmV3IENlbGxDb2xvcnMoXG4gICAgICAgICAgICAgICAgdGhpcy5yZW5kZXJTZXR0aW5ncy5wcm9qZWN0aW9uRmlndXJlQ2VsbENvbG9ycy5maWxsZWRHYW1lT3ZlcixcbiAgICAgICAgICAgICAgICB0aGlzLnJlbmRlclNldHRpbmdzLnByb2plY3Rpb25GaWd1cmVDZWxsQ29sb3JzLmVtcHR5LFxuICAgICAgICAgICAgKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbG9ycyA9IG5ldyBDZWxsQ29sb3JzKFxuICAgICAgICAgICAgICAgIHRoaXMucmVuZGVyU2V0dGluZ3MucHJvamVjdGlvbkZpZ3VyZUNlbGxDb2xvcnMuZmlsbGVkLFxuICAgICAgICAgICAgICAgIHRoaXMucmVuZGVyU2V0dGluZ3MucHJvamVjdGlvbkZpZ3VyZUNlbGxDb2xvcnMuZW1wdHksXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMucmVwYWludENlbGxzKG1hdHJpeCwgaW5kZW50LCBjb2xvcnMpO1xuICAgIH1cblxuICAgIHByaXZhdGUgcmVwYWludENlbGxzKG1hdHJpeDogYm9vbGVhbltdW10sIGluZGVudDogQ29vcmRpbmF0ZSwgY2VsbENvbG9yczogQ2VsbENvbG9ycyk6IHZvaWQge1xuICAgICAgICBtYXRyaXguZm9yRWFjaCgocm93LCB5KSA9PiB7XG4gICAgICAgICAgICByb3cuZm9yRWFjaCgodmFsdWUsIHgpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCByZWFsWSA9IHkgKyBpbmRlbnQueTtcbiAgICAgICAgICAgICAgICBjb25zdCByZWFsWCA9IHggKyBpbmRlbnQueDtcbiAgICAgICAgICAgICAgICBpZiAocmVhbFkgaW4gdGhpcy5jZWxsc0h0bWxFbGVtZW50c01hcFxuICAgICAgICAgICAgICAgICAgICAmJiByZWFsWCBpbiB0aGlzLmNlbGxzSHRtbEVsZW1lbnRzTWFwW3JlYWxZXVxuICAgICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBjb2xvciA9IHZhbHVlID8gY2VsbENvbG9ycy5maWxsZWQgOiBjZWxsQ29sb3JzLmVtcHR5O1xuICAgICAgICAgICAgICAgICAgICBpZiAoY29sb3IgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY2VsbHNIdG1sRWxlbWVudHNNYXBbcmVhbFldW3JlYWxYXS5zdHlsZS5iYWNrZ3JvdW5kID0gY29sb3I7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBzdGF0aWMgY3JlYXRlSHRtbEVsZW1lbnQoaHRtbDogc3RyaW5nKTogSFRNTEVsZW1lbnQge1xuICAgICAgICBsZXQgY29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgIGNvbnRhaW5lci5pbm5lckhUTUwgPSBodG1sO1xuICAgICAgICBpZiAoY29udGFpbmVyLmNoaWxkcmVuLmxlbmd0aCA+IDEgfHwgY29udGFpbmVyLmZpcnN0RWxlbWVudENoaWxkID09PSBudWxsKSB7XG4gICAgICAgICAgICB0aHJvdyAnVGhlIEhUTUwgbXVzdCBjb250YWluIG9ubHkgb25lIGNoaWxkJztcbiAgICAgICAgfVxuICAgICAgICBpZiAoIShjb250YWluZXIuZmlyc3RFbGVtZW50Q2hpbGQgaW5zdGFuY2VvZiBIVE1MRWxlbWVudCkpIHtcbiAgICAgICAgICAgIHRocm93ICdTb21ldGhpbmcgd2VudCB3cm9uZyB3aGlsZSB0cnlpbmcgdG8gZ2V0IEhUTUxFbGVtZW50IGNoaWxkIGZyb20gZGl2JztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY29udGFpbmVyLmZpcnN0RWxlbWVudENoaWxkO1xuICAgIH1cbn1cbiIsImltcG9ydCB7Q29vcmRpbmF0ZSwgRmFsbGluZ0ZpZ3VyZX0gZnJvbSBcIi4uL1N0cnVjdHVyZXNcIjtcbmltcG9ydCB7RmlndXJlc0ZhbGxEb3duQ29tbWFuZCwgQ29tbWFuZEJ1cywgQ29tbWFuZFR5cGUsIEdhbWVPdmVyQ29tbWFuZCwgRmlndXJlc0ZhbGxUaWNrQ29tbWFuZH0gZnJvbSBcIi4uL0NvbW1hbmRCdXMvQ29tbWFuZEJ1c1wiO1xuaW1wb3J0IHtFdmVudEJ1cywgRmFsbFRpY2tQcm9jZXNzZWRFdmVudH0gZnJvbSBcIi4uL0V2ZW50QnVzL0V2ZW50QnVzXCI7XG5pbXBvcnQge0dhbWVEYXRhfSBmcm9tIFwiLi4vR2FtZURhdGFcIjtcbmltcG9ydCB7RmlndXJlUGxhY2luZ0NoZWNrZXJ9IGZyb20gXCIuLi9VdGlscy9GaWd1cmVQbGFjaW5nQ2hlY2tlclwiO1xuXG5jbGFzcyBGYWxsaW5nUmVzdWx0IHtcbiAgICBwdWJsaWMgdHJhbnNmZXJyZWRGaWd1cmVzOiBGYWxsaW5nRmlndXJlW10gPSBbXTtcbiAgICBwdWJsaWMgaXNHYW1lT3ZlcjogYm9vbGVhbiA9IGZhbHNlO1xufVxuXG5leHBvcnQgY2xhc3MgUmVndWxhckZhbGxpbmdGaWd1cmVzUHJvY2Vzc29yIHtcbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgcHJpdmF0ZSBjb21tYW5kQnVzOiBDb21tYW5kQnVzLFxuICAgICAgICBwcml2YXRlIGV2ZW50QnVzOiBFdmVudEJ1cyxcbiAgICApIHtcbiAgICAgICAgdGhpcy5jb21tYW5kQnVzLmFkZEhhbmRsZXIoQ29tbWFuZFR5cGUuRmlndXJlc0ZhbGxUaWNrLCB0aGlzLnByb2Nlc3NGaWd1cmVzRmFsbFRpY2tDb21tYW5kLmJpbmQodGhpcykpO1xuICAgICAgICB0aGlzLmNvbW1hbmRCdXMuYWRkSGFuZGxlcihDb21tYW5kVHlwZS5GaWd1cmVzRmFsbERvd24sIHRoaXMucHJvY2Vzc0ZpZ3VyZXNGYWxsRG93bkNvbW1hbmQuYmluZCh0aGlzKSk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBwcm9jZXNzRmlndXJlc0ZhbGxUaWNrQ29tbWFuZChjb21tYW5kOiBGaWd1cmVzRmFsbFRpY2tDb21tYW5kKSB7XG4gICAgICAgIGNvbnN0IGZhbGxpbmdSZXN1bHQgPSB0aGlzLmZhbGxGaWd1cmVzRm9yT25lQ2VsbChjb21tYW5kLmdhbWVEYXRhKTtcbiAgICAgICAgbGV0IHNxdWFzaGVkTGluZXMgPSB0aGlzLnNxdWFzaExpbmVzKGNvbW1hbmQuZ2FtZURhdGEubWF0cml4KTtcbiAgICAgICAgaWYgKGZhbGxpbmdSZXN1bHQuaXNHYW1lT3Zlcikge1xuICAgICAgICAgICAgdGhpcy5jb21tYW5kQnVzLnJ1bihuZXcgR2FtZU92ZXJDb21tYW5kKGNvbW1hbmQuZ2FtZURhdGEpKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmV2ZW50QnVzLmZpcmUobmV3IEZhbGxUaWNrUHJvY2Vzc2VkRXZlbnQoXG4gICAgICAgICAgICBjb21tYW5kLmdhbWVEYXRhLFxuICAgICAgICAgICAgZmFsbGluZ1Jlc3VsdC50cmFuc2ZlcnJlZEZpZ3VyZXMsXG4gICAgICAgICAgICBzcXVhc2hlZExpbmVzLFxuICAgICAgICApKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIHByb2Nlc3NGaWd1cmVzRmFsbERvd25Db21tYW5kKGNvbW1hbmQ6IEZpZ3VyZXNGYWxsRG93bkNvbW1hbmQpOiB2b2lkIHtcbiAgICAgICAgbGV0IGZhbGxpbmdSZXN1bHQgPSBuZXcgRmFsbGluZ1Jlc3VsdCgpO1xuICAgICAgICB3aGlsZSAoY29tbWFuZC5nYW1lRGF0YS5mYWxsaW5nRmlndXJlcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBjb25zdCBvbmVDZWxsRmFsbGluZ1Jlc3VsdCA9IHRoaXMuZmFsbEZpZ3VyZXNGb3JPbmVDZWxsKGNvbW1hbmQuZ2FtZURhdGEpO1xuICAgICAgICAgICAgZmFsbGluZ1Jlc3VsdC50cmFuc2ZlcnJlZEZpZ3VyZXMucHVzaCguLi5vbmVDZWxsRmFsbGluZ1Jlc3VsdC50cmFuc2ZlcnJlZEZpZ3VyZXMpO1xuICAgICAgICAgICAgZmFsbGluZ1Jlc3VsdC5pc0dhbWVPdmVyID0gZmFsbGluZ1Jlc3VsdC5pc0dhbWVPdmVyIHx8IG9uZUNlbGxGYWxsaW5nUmVzdWx0LmlzR2FtZU92ZXI7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IHNxdWFzaGVkTGluZXMgPSB0aGlzLnNxdWFzaExpbmVzKGNvbW1hbmQuZ2FtZURhdGEubWF0cml4KTtcbiAgICAgICAgaWYgKGZhbGxpbmdSZXN1bHQuaXNHYW1lT3Zlcikge1xuICAgICAgICAgICAgdGhpcy5jb21tYW5kQnVzLnJ1bihuZXcgR2FtZU92ZXJDb21tYW5kKGNvbW1hbmQuZ2FtZURhdGEpKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmV2ZW50QnVzLmZpcmUobmV3IEZhbGxUaWNrUHJvY2Vzc2VkRXZlbnQoXG4gICAgICAgICAgICBjb21tYW5kLmdhbWVEYXRhLFxuICAgICAgICAgICAgZmFsbGluZ1Jlc3VsdC50cmFuc2ZlcnJlZEZpZ3VyZXMsXG4gICAgICAgICAgICBzcXVhc2hlZExpbmVzLFxuICAgICAgICApKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGZhbGxGaWd1cmVzRm9yT25lQ2VsbChnYW1lRGF0YTogR2FtZURhdGEpOiBGYWxsaW5nUmVzdWx0IHtcbiAgICAgICAgbGV0IGZhbGxpbmdSZXN1bHQgPSBuZXcgRmFsbGluZ1Jlc3VsdCgpO1xuICAgICAgICBnYW1lRGF0YS5mYWxsaW5nRmlndXJlcy5mb3JFYWNoKChmYWxsaW5nRmlndXJlLCBpbmRleCkgPT4ge1xuICAgICAgICAgICAgaWYgKHRoaXMuZmlndXJlQ2FuRmFsbChnYW1lRGF0YS5tYXRyaXgsIGZhbGxpbmdGaWd1cmUpKSB7XG4gICAgICAgICAgICAgICAgZmFsbGluZ0ZpZ3VyZS5wb3NpdGlvbi55Kys7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGxldCBmaWd1cmVHYW1lT3ZlclJlc3VsdCA9IHRoaXMudHJhbnNmZXJGaWd1cmVUb01hdHJpeChcbiAgICAgICAgICAgICAgICAgICAgZ2FtZURhdGEubWF0cml4LFxuICAgICAgICAgICAgICAgICAgICBmYWxsaW5nRmlndXJlXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICBmYWxsaW5nUmVzdWx0LnRyYW5zZmVycmVkRmlndXJlcy5wdXNoKC4uLmdhbWVEYXRhLmZhbGxpbmdGaWd1cmVzLnNwbGljZShpbmRleCwgMSkpO1xuICAgICAgICAgICAgICAgIGZhbGxpbmdSZXN1bHQuaXNHYW1lT3ZlciA9IGZhbGxpbmdSZXN1bHQuaXNHYW1lT3ZlciB8fCBmaWd1cmVHYW1lT3ZlclJlc3VsdDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBmYWxsaW5nUmVzdWx0O1xuICAgIH1cblxuICAgIHByaXZhdGUgZmlndXJlQ2FuRmFsbChtYXRyaXg6IGJvb2xlYW5bXVtdLCBmYWxsaW5nRmlndXJlOiBGYWxsaW5nRmlndXJlKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiBGaWd1cmVQbGFjaW5nQ2hlY2tlci5jYW5GaWd1cmVCZVBsYWNlZChcbiAgICAgICAgICAgIGZhbGxpbmdGaWd1cmUuZmlndXJlLmdldFR1cm4oZmFsbGluZ0ZpZ3VyZS50dXJuU3RhdGUpLFxuICAgICAgICAgICAgbmV3IENvb3JkaW5hdGUoZmFsbGluZ0ZpZ3VyZS5wb3NpdGlvbi54LCBmYWxsaW5nRmlndXJlLnBvc2l0aW9uLnkgKyAxKSxcbiAgICAgICAgICAgIG1hdHJpeFxuICAgICAgICApO1xuICAgIH1cblxuICAgIHByaXZhdGUgdHJhbnNmZXJGaWd1cmVUb01hdHJpeChtYXRyaXg6IGJvb2xlYW5bXVtdLCBmYWxsaW5nRmlndXJlOiBGYWxsaW5nRmlndXJlKTogYm9vbGVhbiB7XG4gICAgICAgIGxldCBpc0dhbWVPdmVyID0gZmFsc2U7XG4gICAgICAgIGZhbGxpbmdGaWd1cmUuZmlndXJlLmdldFR1cm4oZmFsbGluZ0ZpZ3VyZS50dXJuU3RhdGUpXG4gICAgICAgICAgICAuZm9yRWFjaCgocm93LCBmaWd1cmVDZWxsWSkgPT4ge1xuICAgICAgICAgICAgICAgIHJvdy5mb3JFYWNoKChjZWxsVmFsdWUsIGZpZ3VyZUNlbGxYKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghY2VsbFZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgbGV0IG1hdHJpeFggPSBmYWxsaW5nRmlndXJlLnBvc2l0aW9uLnggKyBmaWd1cmVDZWxsWDtcbiAgICAgICAgICAgICAgICAgICAgbGV0IG1hdHJpeFkgPSBmYWxsaW5nRmlndXJlLnBvc2l0aW9uLnkgKyBmaWd1cmVDZWxsWTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG1hdHJpeFkgaW4gbWF0cml4XG4gICAgICAgICAgICAgICAgICAgICAgICAmJiBtYXRyaXhYIGluIG1hdHJpeFttYXRyaXhZXVxuICAgICAgICAgICAgICAgICAgICAgICAgJiYgIW1hdHJpeFttYXRyaXhZXVttYXRyaXhYXVxuICAgICAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1hdHJpeFttYXRyaXhZXVttYXRyaXhYXSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpc0dhbWVPdmVyID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBpc0dhbWVPdmVyO1xuICAgIH1cblxuICAgIHByaXZhdGUgc3F1YXNoTGluZXMobWF0cml4OiBib29sZWFuW11bXSk6IG51bWJlcltdIHtcbiAgICAgICAgbGV0IGxpbmVzVG9TcXVhc2g6IG51bWJlcltdID0gW107XG4gICAgICAgIG1hdHJpeC5mb3JFYWNoKChyb3csIHkpID0+IHtcbiAgICAgICAgICAgIGxldCBjYW5CZVNxdWFzaGVkID0gcm93LmV2ZXJ5KGNlbGwgPT4gY2VsbCk7XG4gICAgICAgICAgICBpZiAoY2FuQmVTcXVhc2hlZCkge1xuICAgICAgICAgICAgICAgIGxpbmVzVG9TcXVhc2gucHVzaCh5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSwgMCk7XG4gICAgICAgIGxpbmVzVG9TcXVhc2guZm9yRWFjaCh5ID0+IHtcbiAgICAgICAgICAgIG1hdHJpeC5zcGxpY2UoeSwgMSk7XG4gICAgICAgICAgICBtYXRyaXgudW5zaGlmdChuZXcgQXJyYXkobWF0cml4WzBdLmxlbmd0aCkuZmlsbChmYWxzZSkpO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIGxpbmVzVG9TcXVhc2g7XG4gICAgfVxufVxuIiwiaW1wb3J0IHtFdmVudEJ1cywgRXZlbnRUeXBlLCBGYWxsVGlja1Byb2Nlc3NlZEV2ZW50fSBmcm9tIFwiLi4vRXZlbnRCdXMvRXZlbnRCdXNcIjtcbmltcG9ydCB7RmlndXJlVHVyblN0YXRlfSBmcm9tIFwiLi4vRmlndXJlc1wiO1xuaW1wb3J0IHtDb29yZGluYXRlLCBGYWxsaW5nRmlndXJlfSBmcm9tIFwiLi4vU3RydWN0dXJlc1wiO1xuaW1wb3J0IHtDb21tYW5kQnVzLCBDb21tYW5kVHlwZSwgSW5pdEdhbWVDb21tYW5kfSBmcm9tIFwiLi4vQ29tbWFuZEJ1cy9Db21tYW5kQnVzXCI7XG5pbXBvcnQge0dhbWVEYXRhfSBmcm9tIFwiLi4vR2FtZURhdGFcIjtcblxuZXhwb3J0IGNsYXNzIEFsd2F5c09uZUZpZ3VyZVNwYXduZXIge1xuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBwcml2YXRlIGV2ZW50QnVzOiBFdmVudEJ1cyxcbiAgICAgICAgcHJpdmF0ZSBjb21tYW5kQnVzOiBDb21tYW5kQnVzLFxuICAgICkge1xuICAgICAgICB0aGlzLmNvbW1hbmRCdXMuYWRkSGFuZGxlcihDb21tYW5kVHlwZS5Jbml0R2FtZSwgdGhpcy5pbml0SGFuZGxlci5iaW5kKHRoaXMpKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGluaXRIYW5kbGVyKGV2ZW50OiBJbml0R2FtZUNvbW1hbmQpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5hZGRGaWd1cmUoZXZlbnQuZ2FtZURhdGEpO1xuICAgICAgICB0aGlzLmV2ZW50QnVzLm9uKFxuICAgICAgICAgICAgRXZlbnRUeXBlLkZhbGxpbmdUaWNrUHJvY2Vzc2VkLFxuICAgICAgICAgICAgdGhpcy5wcm9jZXNzT25GYWxsVGljay5iaW5kKHRoaXMpLFxuICAgICAgICApO1xuICAgIH1cblxuICAgIHByaXZhdGUgcHJvY2Vzc09uRmFsbFRpY2soZXZlbnQ6IEZhbGxUaWNrUHJvY2Vzc2VkRXZlbnQpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5hZGRGaWd1cmUoZXZlbnQuZ2FtZURhdGEpO1xuICAgIH1cblxuICAgIHByaXZhdGUgYWRkRmlndXJlKGdhbWVEYXRhOiBHYW1lRGF0YSk6IHZvaWQge1xuICAgICAgICBpZiAoZ2FtZURhdGEuZmFsbGluZ0ZpZ3VyZXMubGVuZ3RoID4gMCB8fCBnYW1lRGF0YS5pc0dhbWVPdmVyKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBmaWd1cmVJbmRleCA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIGdhbWVEYXRhLnNldHRpbmdzLmZpZ3VyZXMubGVuZ3RoKTtcbiAgICAgICAgY29uc3QgZmlndXJlID0gZ2FtZURhdGEuc2V0dGluZ3MuZmlndXJlc1tmaWd1cmVJbmRleF07XG4gICAgICAgIGNvbnN0IHR1cm5TdGF0ZSA9IHRoaXMuZ2V0UmFuZFR1cm5TdGF0ZSgpO1xuICAgICAgICBjb25zdCBmaWd1cmVNYXRyaXggPSBmaWd1cmUuZ2V0VHVybih0dXJuU3RhdGUpO1xuICAgICAgICBjb25zdCBmaWd1cmVXaWR0aCA9IE1hdGgubWF4KC4uLmZpZ3VyZU1hdHJpeC5tYXAocm93ID0+IHJvdy5sZW5ndGgpKTtcbiAgICAgICAgY29uc3QgY29vcmRpbmF0ZSA9IG5ldyBDb29yZGluYXRlKFxuICAgICAgICAgICAgTWF0aC5jZWlsKGdhbWVEYXRhLnNldHRpbmdzLmZpZWxkV2lkdGggLyAyIC0gZmlndXJlV2lkdGggLyAyKSAtIDEsXG4gICAgICAgICAgICAtZmlndXJlTWF0cml4Lmxlbmd0aCxcbiAgICAgICAgKTtcbiAgICAgICAgZ2FtZURhdGEuZmFsbGluZ0ZpZ3VyZXMucHVzaChuZXcgRmFsbGluZ0ZpZ3VyZShcbiAgICAgICAgICAgIGZpZ3VyZSxcbiAgICAgICAgICAgIGNvb3JkaW5hdGUsXG4gICAgICAgICAgICB0dXJuU3RhdGVcbiAgICAgICAgKSk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBnZXRSYW5kVHVyblN0YXRlKCk6IEZpZ3VyZVR1cm5TdGF0ZSB7XG4gICAgICAgIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyhGaWd1cmVUdXJuU3RhdGUpO1xuICAgICAgICBjb25zdCBlbnVtVmFsdWVzID0ga2V5c1xuICAgICAgICAgICAgLm1hcChuID0+IE51bWJlci5wYXJzZUludChuKSlcbiAgICAgICAgICAgIC5maWx0ZXIobiA9PiAhTnVtYmVyLmlzTmFOKG4pKSBhcyB1bmtub3duIGFzIEZpZ3VyZVR1cm5TdGF0ZVtdXG4gICAgICAgIGNvbnN0IHJhbmRvbUluZGV4ID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogZW51bVZhbHVlcy5sZW5ndGgpO1xuICAgICAgICByZXR1cm4gZW51bVZhbHVlc1tyYW5kb21JbmRleF07XG4gICAgfVxufVxuIiwiaW1wb3J0IHtDb21tYW5kQnVzLCBDb21tYW5kVHlwZSwgTW92ZUxlZnRDb21tYW5kLCBNb3ZlUmlnaHRDb21tYW5kLCBUdXJuQ2xvY2t3aXNlQ29tbWFuZCwgTW92ZURvd25Db21tYW5kLCBGaWd1cmVzRmFsbFRpY2tDb21tYW5kfSBmcm9tIFwiLi4vQ29tbWFuZEJ1cy9Db21tYW5kQnVzXCI7XG5pbXBvcnQge0ZpZ3VyZVR1cm5TdGF0ZX0gZnJvbSBcIi4uL0ZpZ3VyZXNcIjtcbmltcG9ydCB7RXZlbnRCdXMsIEZpZ3VyZXNNb3ZlZEV2ZW50fSBmcm9tIFwiLi4vRXZlbnRCdXMvRXZlbnRCdXNcIjtcbmltcG9ydCB7Q29vcmRpbmF0ZSwgRmFsbGluZ0ZpZ3VyZX0gZnJvbSBcIi4uL1N0cnVjdHVyZXNcIjtcbmltcG9ydCB7RmlndXJlUGxhY2luZ0NoZWNrZXJ9IGZyb20gXCIuLi9VdGlscy9GaWd1cmVQbGFjaW5nQ2hlY2tlclwiO1xuXG5leHBvcnQgY2xhc3MgTW92aW5nSGFuZGxlciB7XG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIHByaXZhdGUgY29tbWFuZEJ1czogQ29tbWFuZEJ1cyxcbiAgICAgICAgcHJpdmF0ZSBldmVudEJ1czogRXZlbnRCdXMsXG4gICAgKSB7XG4gICAgICAgIHRoaXMuY29tbWFuZEJ1cy5hZGRIYW5kbGVyKENvbW1hbmRUeXBlLk1vdmVMZWZ0LCB0aGlzLnByb2Nlc3NNb3ZlTGVmdENvbW1hbmQuYmluZCh0aGlzKSk7XG4gICAgICAgIHRoaXMuY29tbWFuZEJ1cy5hZGRIYW5kbGVyKENvbW1hbmRUeXBlLk1vdmVSaWdodCwgdGhpcy5wcm9jZXNzTW92ZVJpZ2h0Q29tbWFuZC5iaW5kKHRoaXMpKTtcbiAgICAgICAgdGhpcy5jb21tYW5kQnVzLmFkZEhhbmRsZXIoQ29tbWFuZFR5cGUuTW92ZURvd24sIHRoaXMucHJvY2Vzc01vdmVEb3duQ29tbWFuZC5iaW5kKHRoaXMpKTtcbiAgICAgICAgdGhpcy5jb21tYW5kQnVzLmFkZEhhbmRsZXIoQ29tbWFuZFR5cGUuVHVybkNsb2Nrd2lzZSwgdGhpcy5wcm9jZXNzVHVybkNsb2Nrd2lzZUNvbW1hbmQuYmluZCh0aGlzKSk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBwcm9jZXNzTW92ZUxlZnRDb21tYW5kKGNvbW1hbmQ6IE1vdmVMZWZ0Q29tbWFuZCk6IHZvaWQge1xuICAgICAgICBjb21tYW5kLmdhbWVEYXRhLmZhbGxpbmdGaWd1cmVzLmZvckVhY2goZmlndXJlID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGNhbkJlTW92ZWRMZWZ0ID0gRmlndXJlUGxhY2luZ0NoZWNrZXIuY2FuRmlndXJlQmVQbGFjZWQoXG4gICAgICAgICAgICAgICAgZmlndXJlLmZpZ3VyZS5nZXRUdXJuKGZpZ3VyZS50dXJuU3RhdGUpLFxuICAgICAgICAgICAgICAgIG5ldyBDb29yZGluYXRlKGZpZ3VyZS5wb3NpdGlvbi54IC0gMSwgZmlndXJlLnBvc2l0aW9uLnkpLFxuICAgICAgICAgICAgICAgIGNvbW1hbmQuZ2FtZURhdGEubWF0cml4XG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgaWYgKGNhbkJlTW92ZWRMZWZ0KSB7XG4gICAgICAgICAgICAgICAgZmlndXJlLnBvc2l0aW9uLngtLTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuZXZlbnRCdXMuZmlyZShuZXcgRmlndXJlc01vdmVkRXZlbnQoY29tbWFuZC5nYW1lRGF0YSkpO1xuICAgIH1cblxuICAgIHByaXZhdGUgcHJvY2Vzc01vdmVSaWdodENvbW1hbmQoY29tbWFuZDogTW92ZVJpZ2h0Q29tbWFuZCk6IHZvaWQge1xuICAgICAgICBjb21tYW5kLmdhbWVEYXRhLmZhbGxpbmdGaWd1cmVzLmZvckVhY2goZmlndXJlID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGNhbkJlTW92ZWRSaWdodCA9IEZpZ3VyZVBsYWNpbmdDaGVja2VyLmNhbkZpZ3VyZUJlUGxhY2VkKFxuICAgICAgICAgICAgICAgIGZpZ3VyZS5maWd1cmUuZ2V0VHVybihmaWd1cmUudHVyblN0YXRlKSxcbiAgICAgICAgICAgICAgICBuZXcgQ29vcmRpbmF0ZShmaWd1cmUucG9zaXRpb24ueCArIDEsIGZpZ3VyZS5wb3NpdGlvbi55KSxcbiAgICAgICAgICAgICAgICBjb21tYW5kLmdhbWVEYXRhLm1hdHJpeFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIGlmIChjYW5CZU1vdmVkUmlnaHQpIHtcbiAgICAgICAgICAgICAgICBmaWd1cmUucG9zaXRpb24ueCsrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5ldmVudEJ1cy5maXJlKG5ldyBGaWd1cmVzTW92ZWRFdmVudChjb21tYW5kLmdhbWVEYXRhKSk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBwcm9jZXNzVHVybkNsb2Nrd2lzZUNvbW1hbmQoY29tbWFuZDogVHVybkNsb2Nrd2lzZUNvbW1hbmQpOiB2b2lkIHtcbiAgICAgICAgY29uc3QgYWxsVHVyblN0YXRlcyA9IHRoaXMuZ2V0VHVyblN0YXRlc0FzQXJyYXkoKTtcbiAgICAgICAgY29tbWFuZC5nYW1lRGF0YS5mYWxsaW5nRmlndXJlcy5mb3JFYWNoKGZpZ3VyZSA9PiB7XG4gICAgICAgICAgICBsZXQgbmV4dFR1cm5TdGF0ZSA9IGZpZ3VyZS50dXJuU3RhdGUgKyAxO1xuICAgICAgICAgICAgaWYgKCEobmV4dFR1cm5TdGF0ZSBpbiBhbGxUdXJuU3RhdGVzKSkge1xuICAgICAgICAgICAgICAgIG5leHRUdXJuU3RhdGUgPSBhbGxUdXJuU3RhdGVzWzBdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgY2FuQmVUdXJuZWQgPSBGaWd1cmVQbGFjaW5nQ2hlY2tlci5jYW5GaWd1cmVCZVBsYWNlZChcbiAgICAgICAgICAgICAgICBmaWd1cmUuZmlndXJlLmdldFR1cm4obmV4dFR1cm5TdGF0ZSksXG4gICAgICAgICAgICAgICAgZmlndXJlLnBvc2l0aW9uLFxuICAgICAgICAgICAgICAgIGNvbW1hbmQuZ2FtZURhdGEubWF0cml4XG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgaWYgKGNhbkJlVHVybmVkKSB7XG4gICAgICAgICAgICAgICAgZmlndXJlLnR1cm5TdGF0ZSA9IG5leHRUdXJuU3RhdGU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmV2ZW50QnVzLmZpcmUobmV3IEZpZ3VyZXNNb3ZlZEV2ZW50KGNvbW1hbmQuZ2FtZURhdGEpKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIHByb2Nlc3NNb3ZlRG93bkNvbW1hbmQoY29tbWFuZDogTW92ZURvd25Db21tYW5kKTogdm9pZCB7XG4gICAgICAgIHRoaXMuY29tbWFuZEJ1cy5ydW4obmV3IEZpZ3VyZXNGYWxsVGlja0NvbW1hbmQoY29tbWFuZC5nYW1lRGF0YSkpO1xuICAgIH1cblxuICAgIHByaXZhdGUgZ2V0VHVyblN0YXRlc0FzQXJyYXkoKTogRmlndXJlVHVyblN0YXRlW10ge1xuICAgICAgICByZXR1cm4gT2JqZWN0LmtleXMoRmlndXJlVHVyblN0YXRlKVxuICAgICAgICAgICAgLm1hcChuID0+IE51bWJlci5wYXJzZUludChuKSlcbiAgICAgICAgICAgIC5maWx0ZXIobiA9PiAhTnVtYmVyLmlzTmFOKG4pKSBhcyB1bmtub3duIGFzIEZpZ3VyZVR1cm5TdGF0ZVtdO1xuICAgIH1cbn1cbiIsImltcG9ydCB7Q29tbWFuZEJ1cywgQ29tbWFuZFR5cGUsIEZpZ3VyZXNGYWxsRG93bkNvbW1hbmQsIEluaXRHYW1lQ29tbWFuZCwgTW92ZUxlZnRDb21tYW5kLCBNb3ZlUmlnaHRDb21tYW5kLCBUdXJuQ2xvY2t3aXNlQ29tbWFuZCwgTW92ZURvd25Db21tYW5kfSBmcm9tIFwiLi4vQ29tbWFuZEJ1cy9Db21tYW5kQnVzXCI7XG5pbXBvcnQge0dhbWVEYXRhfSBmcm9tIFwiLi4vR2FtZURhdGFcIjtcblxuZXhwb3J0IGNsYXNzIE1vdmluZ0NvbnRyb2xsZXIge1xuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBwcml2YXRlIGNvbW1hbmRCdXM6IENvbW1hbmRCdXNcbiAgICApIHtcbiAgICAgICAgdGhpcy5jb21tYW5kQnVzLmFkZEhhbmRsZXIoQ29tbWFuZFR5cGUuSW5pdEdhbWUsIHRoaXMucHJvY2Vzc0luaXRHYW1lQ29tbWFuZC5iaW5kKHRoaXMpKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIHByb2Nlc3NJbml0R2FtZUNvbW1hbmQoY29tbWFuZDogSW5pdEdhbWVDb21tYW5kKSB7XG4gICAgICAgIHdpbmRvdy5vbmtleWRvd24gPSBldmVudCA9PiB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhldmVudCk7XG4gICAgICAgICAgICBpZiAoZXZlbnQuY29kZSA9PT0gJ0Fycm93TGVmdCcpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmNvbW1hbmRCdXMucnVuKG5ldyBNb3ZlTGVmdENvbW1hbmQoY29tbWFuZC5nYW1lRGF0YSkpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChldmVudC5jb2RlID09PSAnQXJyb3dSaWdodCcpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmNvbW1hbmRCdXMucnVuKG5ldyBNb3ZlUmlnaHRDb21tYW5kKGNvbW1hbmQuZ2FtZURhdGEpKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoZXZlbnQuY29kZSA9PT0gJ0Fycm93VXAnKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5jb21tYW5kQnVzLnJ1bihuZXcgVHVybkNsb2Nrd2lzZUNvbW1hbmQoY29tbWFuZC5nYW1lRGF0YSkpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChldmVudC5jb2RlID09PSAnQXJyb3dEb3duJykge1xuICAgICAgICAgICAgICAgIHRoaXMuY29tbWFuZEJ1cy5ydW4obmV3IE1vdmVEb3duQ29tbWFuZChjb21tYW5kLmdhbWVEYXRhKSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGV2ZW50LmNvZGUgPT09ICdBcnJvd0Rvd24nKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5jb21tYW5kQnVzLnJ1bihuZXcgTW92ZURvd25Db21tYW5kKGNvbW1hbmQuZ2FtZURhdGEpKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoZXZlbnQuY29kZSA9PT0gJ1NwYWNlJykge1xuICAgICAgICAgICAgICAgIHRoaXMuY29tbWFuZEJ1cy5ydW4obmV3IEZpZ3VyZXNGYWxsRG93bkNvbW1hbmQoY29tbWFuZC5nYW1lRGF0YSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgIH1cbn1cbiIsImltcG9ydCB7VGltaW5nc0hhbmRsZXJ9IGZyb20gXCIuL1RpbWluZ3NIYW5kbGVyXCI7XG5pbXBvcnQge0V2ZW50QnVzLCBFdmVudFR5cGUsIEZhbGxUaWNrUHJvY2Vzc2VkRXZlbnR9IGZyb20gXCIuLi9FdmVudEJ1cy9FdmVudEJ1c1wiO1xuaW1wb3J0IHtDb21tYW5kQnVzLCBDb21tYW5kVHlwZSwgSW5pdEdhbWVDb21tYW5kfSBmcm9tIFwiLi4vQ29tbWFuZEJ1cy9Db21tYW5kQnVzXCI7XG5cbmV4cG9ydCBjbGFzcyBMZXZlbEJhc2VkVGltaW5nc0hhbmRsZXIgaW1wbGVtZW50cyBUaW1pbmdzSGFuZGxlciB7XG4gICAgcHJpdmF0ZSBzcXVhc2hlZFJvd3NDb3VudGVyID0gMDtcbiAgICBwcml2YXRlIGRlbGF5TXMgPSAwO1xuICAgIHByaXZhdGUgbGV2ZWwgPSAxO1xuXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIHByaXZhdGUgZXZlbnRCdXM6IEV2ZW50QnVzLFxuICAgICAgICBwcml2YXRlIGNvbW1hbmRCdXM6IENvbW1hbmRCdXMsXG4gICAgICAgIHByaXZhdGUgbGV2ZWxJbmNyZWFzZU9uU3F1YXNoZWRSb3dzTnVtYmVyOiBudW1iZXIsXG4gICAgICAgIHByaXZhdGUgaW5pdGlhbERlbGF5TXM6IG51bWJlcixcbiAgICAgICAgcHJpdmF0ZSBtYXhMZXZlbHM6IG51bWJlcixcbiAgICAgICAgaW5pdGlhbExldmVsOiBudW1iZXIsXG4gICAgKSB7XG4gICAgICAgIHRoaXMuZGVsYXlNcyA9IGluaXRpYWxEZWxheU1zXG4gICAgICAgIHRoaXMubGV2ZWwgPSBpbml0aWFsTGV2ZWw7XG4gICAgICAgIHRoaXMuY29tbWFuZEJ1cy5hZGRIYW5kbGVyKENvbW1hbmRUeXBlLkluaXRHYW1lLCB0aGlzLnByb2Nlc3NJbml0R2FtZUNvbW1hbmQuYmluZCh0aGlzKSlcbiAgICB9XG5cbiAgICBwcml2YXRlIHByb2Nlc3NJbml0R2FtZUNvbW1hbmQoY29tbWFuZDogSW5pdEdhbWVDb21tYW5kKSB7XG4gICAgICAgIHRoaXMuZXZlbnRCdXMub24oRXZlbnRUeXBlLkZhbGxpbmdUaWNrUHJvY2Vzc2VkLCB0aGlzLm9uRmFsbFRpY2tQcm9jZXNzZWQuYmluZCh0aGlzKSlcbiAgICB9XG5cbiAgICBwcml2YXRlIG9uRmFsbFRpY2tQcm9jZXNzZWQoZXZlbnQ6IEZhbGxUaWNrUHJvY2Vzc2VkRXZlbnQpIHtcbiAgICAgICAgaWYgKGV2ZW50LnNxdWFzaGVkTGluZXMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5zcXVhc2hlZFJvd3NDb3VudGVyKys7XG4gICAgICAgIGlmICh0aGlzLnNxdWFzaGVkUm93c0NvdW50ZXIgPj0gdGhpcy5sZXZlbEluY3JlYXNlT25TcXVhc2hlZFJvd3NOdW1iZXIpIHtcbiAgICAgICAgICAgIHRoaXMuc3F1YXNoZWRSb3dzQ291bnRlciA9IDA7XG4gICAgICAgICAgICB0aGlzLmxldmVsID0gTWF0aC5taW4odGhpcy5tYXhMZXZlbHMsIHRoaXMubGV2ZWwgKyBldmVudC5zcXVhc2hlZExpbmVzLmxlbmd0aCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBnZXREZWxheUZvck5leHRUaWNrTXMoKTogbnVtYmVyIHtcbiAgICAgICAgcmV0dXJuIE1hdGgucG93KDAuOCAtICh0aGlzLmxldmVsIC0gMSkgKiAwLjAwNywgdGhpcy5sZXZlbCAtIDEpICogdGhpcy5pbml0aWFsRGVsYXlNcztcbiAgICB9XG59XG4iLCJpbXBvcnQge0dhbWVDb250cm9sbGVyfSBmcm9tICcuL0dhbWVDb250cm9sbGVyJ1xuaW1wb3J0IHtUYWJsZVJlbmRlcmVyLCBUYWJsZVJlbmRlcmVyU2V0dGluZ3N9IGZyb20gJy4vUmVuZGVyZXIvVGFibGVSZW5kZXJlcidcbmltcG9ydCB7UmVndWxhckZhbGxpbmdGaWd1cmVzUHJvY2Vzc29yfSBmcm9tIFwiLi9GYWxsaW5nRmlndXJlc1Byb2Nlc3Nvci9SZWd1bGFyRmFsbGluZ0ZpZ3VyZXNQcm9jZXNzb3JcIjtcbmltcG9ydCB7QWx3YXlzT25lRmlndXJlU3Bhd25lcn0gZnJvbSBcIi4vRmlndXJlc1NwYXduZXIvQWx3YXlzT25lRmlndXJlU3Bhd25lclwiO1xuaW1wb3J0IHtFdmVudEJ1c30gZnJvbSBcIi4vRXZlbnRCdXMvRXZlbnRCdXNcIjtcbmltcG9ydCB7Q29tbWFuZEJ1cywgSW5pdEdhbWVDb21tYW5kLCBQYXVzZUdhbWVDb21tYW5kLCBSZXN1bWVHYW1lQ29tbWFuZH0gZnJvbSBcIi4vQ29tbWFuZEJ1cy9Db21tYW5kQnVzXCI7XG5pbXBvcnQge0dhbWVEYXRhfSBmcm9tIFwiLi9HYW1lRGF0YVwiO1xuaW1wb3J0IHtNb3ZpbmdIYW5kbGVyfSBmcm9tIFwiLi9Nb3ZpbmdIYW5kbGVyL01vdmluZ0hhbmRsZXJcIjtcbmltcG9ydCB7TW92aW5nQ29udHJvbGxlcn0gZnJvbSBcIi4vTW92aW5nQ29udHJvbGxlci9Nb3ZpbmdDb250cm9sbGVyXCI7XG5pbXBvcnQge0xldmVsQmFzZWRUaW1pbmdzSGFuZGxlcn0gZnJvbSBcIi4vVGltaW5nc0hhbmRsZXIvTGV2ZWxCYXNlZFRpbWluZ3NIYW5kbGVyXCI7XG5cbmV4cG9ydCBjbGFzcyBUZXRyaXNGYWNhZGUge1xuICAgIHByaXZhdGUgZXZlbnRCdXMgPSBuZXcgRXZlbnRCdXMoKTtcbiAgICBwcml2YXRlIGNvbW1hbmRCdXMgPSBuZXcgQ29tbWFuZEJ1cygpO1xuICAgIHByaXZhdGUgZ2FtZUNvbnRyb2xsZXIgPSBuZXcgR2FtZUNvbnRyb2xsZXIoXG4gICAgICAgIG5ldyBMZXZlbEJhc2VkVGltaW5nc0hhbmRsZXIoXG4gICAgICAgICAgICB0aGlzLmV2ZW50QnVzLFxuICAgICAgICAgICAgdGhpcy5jb21tYW5kQnVzLFxuICAgICAgICAgICAgMTAsXG4gICAgICAgICAgICAxMDAwLFxuICAgICAgICAgICAgMTUsXG4gICAgICAgICAgICAxXG4gICAgICAgICksXG4gICAgICAgIHRoaXMuZXZlbnRCdXMsXG4gICAgICAgIHRoaXMuY29tbWFuZEJ1cyxcbiAgICApO1xuICAgIHByaXZhdGUgbW92aW5nSGFuZGxlciA9IG5ldyBNb3ZpbmdIYW5kbGVyKFxuICAgICAgICB0aGlzLmNvbW1hbmRCdXMsXG4gICAgICAgIHRoaXMuZXZlbnRCdXMsXG4gICAgKTtcbiAgICBwcml2YXRlIG1vdmluZ0NvbnRyb2xsZXIgPSBuZXcgTW92aW5nQ29udHJvbGxlcihcbiAgICAgICAgdGhpcy5jb21tYW5kQnVzLFxuICAgICk7XG4gICAgcHJpdmF0ZSB0YWJsZVJlbmRlcmVyID0gbmV3IFRhYmxlUmVuZGVyZXIoXG4gICAgICAgIG5ldyBUYWJsZVJlbmRlcmVyU2V0dGluZ3MoXG4gICAgICAgICAgICBkb2N1bWVudC5ib2R5LFxuICAgICAgICApLFxuICAgICAgICB0aGlzLmNvbW1hbmRCdXMsXG4gICAgICAgIHRoaXMuZXZlbnRCdXNcbiAgICApO1xuICAgIHByaXZhdGUgZmFsbGluZ0ZpZ3VyZXNQcm9jZXNzb3IgPSBuZXcgUmVndWxhckZhbGxpbmdGaWd1cmVzUHJvY2Vzc29yKFxuICAgICAgICB0aGlzLmNvbW1hbmRCdXMsXG4gICAgICAgIHRoaXMuZXZlbnRCdXNcbiAgICApO1xuICAgIHByaXZhdGUgZmlndXJlc1NwYXduZXIgPSBuZXcgQWx3YXlzT25lRmlndXJlU3Bhd25lcihcbiAgICAgICAgdGhpcy5ldmVudEJ1cyxcbiAgICAgICAgdGhpcy5jb21tYW5kQnVzLFxuICAgICk7XG4gICAgcHVibGljIGdhbWVEYXRhID0gR2FtZURhdGEubWFrZVNpbXBsZSgpO1xuXG4gICAgcHVibGljIHN0YXJ0KGdhbWVEYXRhPzogR2FtZURhdGEpIHtcbiAgICAgICAgdGhpcy5nYW1lRGF0YSA9IGdhbWVEYXRhIHx8IEdhbWVEYXRhLm1ha2VTaW1wbGUoKTtcbiAgICAgICAgdGhpcy5jb21tYW5kQnVzLnJ1bihuZXcgSW5pdEdhbWVDb21tYW5kKHRoaXMuZ2FtZURhdGEpKTtcbiAgICAgICAgdGhpcy5jb21tYW5kQnVzLnJ1bihuZXcgUmVzdW1lR2FtZUNvbW1hbmQodGhpcy5nYW1lRGF0YSkpO1xuICAgIH1cblxuICAgIHB1YmxpYyByZXN1bWUoKSB7XG4gICAgICAgIHRoaXMuY29tbWFuZEJ1cy5ydW4obmV3IFJlc3VtZUdhbWVDb21tYW5kKHRoaXMuZ2FtZURhdGEpKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgcGF1c2UoKSB7XG4gICAgICAgIHRoaXMuY29tbWFuZEJ1cy5ydW4obmV3IFBhdXNlR2FtZUNvbW1hbmQodGhpcy5nYW1lRGF0YSkpO1xuICAgIH1cbn1cbiIsImltcG9ydCB7IFRldHJpc0ZhY2FkZSB9IGZyb20gJy4vVGV0cmlzL1RldHJpc0ZhY2FkZSdcblxuZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignRE9NQ29udGVudExvYWRlZCcsICgpID0+IHtcbiAgICBsZXQgdGV0cmlzID0gbmV3IFRldHJpc0ZhY2FkZSgpO1xuICAgIHRldHJpcy5zdGFydCgpO1xufSlcbiJdLCJuYW1lcyI6WyJFdmVudFR5cGUiLCJGaWd1cmVUdXJuU3RhdGUiLCJnYW1lRGF0YSIsInRyYW5zZmVycmVkVG9NYXRyaXhGaWd1cmVzIiwic3F1YXNoZWRMaW5lcyIsImdldEV2ZW50VHlwZSIsIkZhbGxpbmdUaWNrUHJvY2Vzc2VkIiwiR2FtZU92ZXIiLCJGaWd1cmVzTW92ZWQiLCJoYW5kbGVycyIsIk1hcCIsIm9uIiwiZXZlbnQiLCJoYW5kbGVyIiwidW5pcXVlIiwidGhpcyIsImdldCIsInNvbWUiLCJib3VuZEhhbmRsZXIiLCJwdXNoIiwic2V0Iiwib2ZmIiwiaW5kZXgiLCJpbmRleE9mIiwic3BsaWNlIiwiZmlyZSIsImV2ZW50UGF5bG9hZCIsImZvckVhY2giLCJmaWVsZFdpZHRoIiwiZmllbGRIZWlnaHQiLCJmaWd1cmVzIiwiQ29tbWFuZFR5cGUiLCJnZXROb3JtYWxpemVkRmlndXJlIiwiZmlndXJlIiwiZ2V0RmlndXJlIiwidGhlTG9uZ2VzdFJvd1NpemUiLCJyZWR1Y2UiLCJwcmV2aW91cyIsImN1cnJlbnQiLCJNYXRoIiwibWF4IiwibGVuZ3RoIiwibWFwIiwicm93Iiwib3JpZ2luYWxMZW5ndGgiLCJmaWxsIiwiZ2V0Rmlyc3RUdXJuIiwiZ2V0U2Vjb25kVHVybiIsIm9yaWdpbmFsRmlndXJlIiwidHVybmVkRmlndXJlIiwib3JpZ2luYWxGaWd1cmVIZWlnaHQiLCJvcmlnaW5hbEZpZ3VyZVdpZHRoIiwieCIsIkFycmF5IiwieSIsImdldFRoaXJkVHVybiIsInJldmVyc2UiLCJnZXRGb3J0aFR1cm4iLCJnZXRUdXJuIiwiZmlndXJlVHVyblN0YXRlIiwiT25lIiwiVHdvIiwiVGhyZWUiLCJGb3VyIiwic3BsaXQiLCJpdGVtIiwiU2ltcGx5Um90YXRhYmxlRmlndXJlIiwiaXNJbml0aWFsaXplZCIsImlzR2FtZU92ZXIiLCJmYWxsaW5nRmlndXJlcyIsIm1hdHJpeCIsIm5leHRUaWNrVGltZW91dElkIiwic2V0dGluZ3MiLCJzZXRUaW1lb3V0IiwibWFrZVNpbXBsZSIsIndpZHRoIiwiaGVpZ2h0IiwiR2FtZURhdGEiLCJfIiwiR2FtZVNldHRpbmdzIiwiVEZpZ3VyZSIsIlJpZ2h0TEZpZ3VyZSIsIkxlZnRMRmlndXJlIiwiU3F1YXJlRmlndXJlIiwiU3RpY2tGaWd1cmUiLCJMWkZpZ3VyZSIsIlJaRmlndXJlIiwiZ2V0Q29tbWFuZFR5cGUiLCJJbml0R2FtZSIsIlJlc3VtZUdhbWUiLCJQYXVzZUdhbWUiLCJGaWd1cmVzRmFsbFRpY2siLCJSZW5kZXIiLCJNb3ZlTGVmdCIsIk1vdmVSaWdodCIsIlR1cm5DbG9ja3dpc2UiLCJNb3ZlRG93biIsIkZpZ3VyZXNGYWxsRG93biIsImFkZEhhbmRsZXIiLCJyZW1vdmVIYW5kbGVyIiwicnVuIiwicGF5bG9hZCIsInRpbWluZ3NIYW5kbGVyIiwiZXZlbnRCdXMiLCJjb21tYW5kQnVzIiwiaW5pdEdhbWVIYW5kbGVyIiwiYmluZCIsInJlc3VtZUdhbWVIYW5kbGVyIiwicGF1c2VHYW1lSGFuZGxlciIsImdhbWVPdmVySGFuZGxlciIsImNvbW1hbmQiLCJJbml0R2FtZUNvbW1hbmQiLCJmYWxsVGljayIsImNsZWFyVGltZW91dCIsIlJlbmRlckNvbW1hbmQiLCJHYW1lT3ZlckV2ZW50IiwiRmlndXJlc0ZhbGxUaWNrQ29tbWFuZCIsImdldERlbGF5Rm9yTmV4dFRpY2tNcyIsImNhbkZpZ3VyZUJlUGxhY2VkIiwidGFyZ2V0RmlndXJlTWF0cml4IiwidGFyZ2V0UG9zaXRpb24iLCJldmVyeSIsInZhbHVlIiwicmVhbFkiLCJyZWFsWCIsInBvc2l0aW9uIiwidHVyblN0YXRlIiwiZmlsbGVkIiwiZmlsbGVkR2FtZU92ZXIiLCJlbXB0eSIsImNvbnRhaW5lckVsZW1lbnQiLCJyZW5kZXJQcm9qZWN0aW9uRmlndXJlcyIsIm1hdHJpeENlbGxDb2xvcnMiLCJmYWxsaW5nRmlndXJlQ2VsbENvbG9ycyIsInByb2plY3Rpb25GaWd1cmVDZWxsQ29sb3JzIiwiVGFibGVSZW5kZXJlckNlbGxDb2xvclNldHRpbmdzIiwicmVuZGVyU2V0dGluZ3MiLCJjZWxsc0h0bWxFbGVtZW50c01hcCIsImluaXRIYW5kbGVyIiwicmVuZGVyQ29tbWFuZEhhbmRsZXIiLCJ0YWJsZSIsIlRhYmxlUmVuZGVyZXIiLCJjcmVhdGVIdG1sRWxlbWVudCIsImNlbGwiLCJhcHBlbmRDaGlsZCIsInJlcGxhY2VDaGlsZHJlbiIsIm9uRmFsbFRpY2tQcm9jZXNzZWQiLCJvbkZpZ3VyZXNNb3ZlZCIsInJlbmRlclN0YXRlIiwib25HYW1lT3ZlciIsInJlcGFpbnRNYXRyaXhDZWxscyIsIkNvb3JkaW5hdGUiLCJyZW5kZXJGYWxsaW5nRmlndXJlc1Byb2plY3Rpb24iLCJyZW5kZXJGYWxsaW5nRmlndXJlcyIsImZhbGxpbmdGaWd1cmUiLCJyZXBhaW50RmFsbGluZ0ZpZ3VyZXNDZWxscyIsImZpZ3VyZU1hdHJpeCIsInByb2plY3Rpb25GaWd1cmVYIiwicHJvamVjdGlvbkZpZ3VyZVkiLCJGaWd1cmVQbGFjaW5nQ2hlY2tlciIsInJlcGFpbnRQcm9qZWN0aW9uRmlndXJlc0NlbGxzIiwiaW5kZW50IiwiY29sb3JzIiwiQ2VsbENvbG9ycyIsInJlcGFpbnRDZWxscyIsImNlbGxDb2xvcnMiLCJjb2xvciIsInN0eWxlIiwiYmFja2dyb3VuZCIsImh0bWwiLCJjb250YWluZXIiLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnQiLCJpbm5lckhUTUwiLCJjaGlsZHJlbiIsImZpcnN0RWxlbWVudENoaWxkIiwiSFRNTEVsZW1lbnQiLCJ0cmFuc2ZlcnJlZEZpZ3VyZXMiLCJwcm9jZXNzRmlndXJlc0ZhbGxUaWNrQ29tbWFuZCIsInByb2Nlc3NGaWd1cmVzRmFsbERvd25Db21tYW5kIiwiZmFsbGluZ1Jlc3VsdCIsImZhbGxGaWd1cmVzRm9yT25lQ2VsbCIsInNxdWFzaExpbmVzIiwiR2FtZU92ZXJDb21tYW5kIiwiRmFsbFRpY2tQcm9jZXNzZWRFdmVudCIsIkZhbGxpbmdSZXN1bHQiLCJvbmVDZWxsRmFsbGluZ1Jlc3VsdCIsImZpZ3VyZUNhbkZhbGwiLCJmaWd1cmVHYW1lT3ZlclJlc3VsdCIsInRyYW5zZmVyRmlndXJlVG9NYXRyaXgiLCJmaWd1cmVDZWxsWSIsImNlbGxWYWx1ZSIsImZpZ3VyZUNlbGxYIiwibWF0cml4WCIsIm1hdHJpeFkiLCJsaW5lc1RvU3F1YXNoIiwidW5zaGlmdCIsImFkZEZpZ3VyZSIsInByb2Nlc3NPbkZhbGxUaWNrIiwiZmlndXJlSW5kZXgiLCJmbG9vciIsInJhbmRvbSIsImdldFJhbmRUdXJuU3RhdGUiLCJmaWd1cmVXaWR0aCIsImNvb3JkaW5hdGUiLCJjZWlsIiwiRmFsbGluZ0ZpZ3VyZSIsImVudW1WYWx1ZXMiLCJPYmplY3QiLCJrZXlzIiwibiIsIk51bWJlciIsInBhcnNlSW50IiwiZmlsdGVyIiwiaXNOYU4iLCJwcm9jZXNzTW92ZUxlZnRDb21tYW5kIiwicHJvY2Vzc01vdmVSaWdodENvbW1hbmQiLCJwcm9jZXNzTW92ZURvd25Db21tYW5kIiwicHJvY2Vzc1R1cm5DbG9ja3dpc2VDb21tYW5kIiwiRmlndXJlc01vdmVkRXZlbnQiLCJhbGxUdXJuU3RhdGVzIiwiZ2V0VHVyblN0YXRlc0FzQXJyYXkiLCJuZXh0VHVyblN0YXRlIiwicHJvY2Vzc0luaXRHYW1lQ29tbWFuZCIsIndpbmRvdyIsIm9ua2V5ZG93biIsImNvbnNvbGUiLCJsb2ciLCJjb2RlIiwiTW92ZUxlZnRDb21tYW5kIiwiTW92ZVJpZ2h0Q29tbWFuZCIsIlR1cm5DbG9ja3dpc2VDb21tYW5kIiwiTW92ZURvd25Db21tYW5kIiwiRmlndXJlc0ZhbGxEb3duQ29tbWFuZCIsImxldmVsSW5jcmVhc2VPblNxdWFzaGVkUm93c051bWJlciIsImluaXRpYWxEZWxheU1zIiwibWF4TGV2ZWxzIiwiaW5pdGlhbExldmVsIiwic3F1YXNoZWRSb3dzQ291bnRlciIsImRlbGF5TXMiLCJsZXZlbCIsIm1pbiIsInBvdyIsIkV2ZW50QnVzIiwiQ29tbWFuZEJ1cyIsImdhbWVDb250cm9sbGVyIiwiR2FtZUNvbnRyb2xsZXIiLCJMZXZlbEJhc2VkVGltaW5nc0hhbmRsZXIiLCJtb3ZpbmdIYW5kbGVyIiwiTW92aW5nSGFuZGxlciIsIm1vdmluZ0NvbnRyb2xsZXIiLCJNb3ZpbmdDb250cm9sbGVyIiwidGFibGVSZW5kZXJlciIsIlRhYmxlUmVuZGVyZXJTZXR0aW5ncyIsImJvZHkiLCJmYWxsaW5nRmlndXJlc1Byb2Nlc3NvciIsIlJlZ3VsYXJGYWxsaW5nRmlndXJlc1Byb2Nlc3NvciIsImZpZ3VyZXNTcGF3bmVyIiwiQWx3YXlzT25lRmlndXJlU3Bhd25lciIsInN0YXJ0IiwiUmVzdW1lR2FtZUNvbW1hbmQiLCJyZXN1bWUiLCJwYXVzZSIsIlBhdXNlR2FtZUNvbW1hbmQiLCJhZGRFdmVudExpc3RlbmVyIiwiVGV0cmlzRmFjYWRlIl0sInNvdXJjZVJvb3QiOiIifQ==