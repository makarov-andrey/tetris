(()=>{"use strict";var e,t,s;!function(e){e[e.FallingTickProcessed=0]="FallingTickProcessed",e[e.GameOver=1]="GameOver",e[e.FiguresMoved=2]="FiguresMoved",e[e.LevelUp=3]="LevelUp",e[e.FiguresSpawned=4]="FiguresSpawned"}(e||(e={}));class i{constructor(e,t,s,i){this.gameData=e,this.transferredToMatrixFigures=t,this.squashedLines=s,this.droppedLines=i}getEventType(){return e.FallingTickProcessed}}class n{constructor(e){this.gameData=e}getEventType(){return e.GameOver}}class a{constructor(e){this.gameData=e}getEventType(){return e.FiguresMoved}}class r{constructor(e,t){this.gameData=e,this.newFigures=t}getEventType(){return e.FiguresSpawned}}class l{constructor(){this.handlers=new Map}on(e,t,s=!0){let i=this.handlers.get(e)||[];s&&i.some((e=>e===t))||(i.push(t),this.handlers.set(e,i))}off(e,t){let s=this.handlers.get(e)||[],i=s.indexOf(t);i>0&&s.splice(i,1),this.handlers.set(e,s)}fire(e){(this.handlers.get(e.getEventType())||[]).forEach((t=>{t(e)}))}}!function(e){e[e.InitGame=0]="InitGame",e[e.ResumeGame=1]="ResumeGame",e[e.PauseGame=2]="PauseGame",e[e.FiguresFallTick=3]="FiguresFallTick",e[e.GameOver=4]="GameOver",e[e.Render=5]="Render",e[e.MoveLeft=6]="MoveLeft",e[e.MoveRight=7]="MoveRight",e[e.TurnClockwise=8]="TurnClockwise",e[e.MoveDown=9]="MoveDown",e[e.FiguresFallDown=10]="FiguresFallDown",e[e.MoveToX=11]="MoveToX",e[e.MoveToY=12]="MoveToY",e[e.TurnToState=13]="TurnToState"}(t||(t={}));class o{constructor(e){this.gameData=e}getCommandType(){return t.InitGame}}class c{constructor(e){this.gameData=e}getCommandType(){return t.ResumeGame}}class u{constructor(e){this.gameData=e}getCommandType(){return t.PauseGame}}class h{constructor(e){this.gameData=e}getCommandType(){return t.FiguresFallTick}}class m{constructor(e){this.gameData=e}getCommandType(){return t.GameOver}}class d{constructor(e){this.gameData=e}getCommandType(){return t.Render}}class g{constructor(e){this.gameData=e}getCommandType(){return t.MoveLeft}}class p{constructor(e){this.gameData=e}getCommandType(){return t.MoveRight}}class f{constructor(e){this.gameData=e}getCommandType(){return t.TurnClockwise}}class w{constructor(e){this.gameData=e}getCommandType(){return t.MoveDown}}class v{constructor(e,t){this.gameData=e,this.x=t}getCommandType(){return t.MoveToX}}class F{constructor(e,t){this.gameData=e,this.y=t}getCommandType(){return t.MoveToY}}class T{constructor(e,t){this.gameData=e,this.turnState=t}getCommandType(){return t.TurnToState}}class C{constructor(e){this.gameData=e}getCommandType(){return t.FiguresFallDown}}class D{constructor(){this.handlers=new Map}addHandler(e,t,s=!0){let i=this.handlers.get(e)||[];s&&i.some((e=>e===t))||(i.push(t),this.handlers.set(e,i))}removeHandler(e,t){let s=this.handlers.get(e)||[],i=s.indexOf(t);i>0&&s.splice(i,1),this.handlers.set(e,s)}run(e){(this.handlers.get(e.getCommandType())||[]).forEach((t=>{t(e)}))}}!function(e){e[e.One=0]="One",e[e.Two=1]="Two",e[e.Three=2]="Three",e[e.Four=3]="Four"}(s||(s={}));class S{getTurn(e){switch(e){case s.One:return this.getFirstTurn();case s.Two:return this.getSecondTurn();case s.Three:return this.getThirdTurn();case s.Four:return this.getForthTurn()}}}class x extends S{getNormalizedFigure(){let e=this.getFigure(),t=e.reduce(((e,t)=>Math.max(e,t.length)),0);return e.map((e=>{let s=e.length;return e.length=t,e.fill(!1,s-1,t-1)}))}getFirstTurn(){return this.getNormalizedFigure()}getSecondTurn(){let e=this.getNormalizedFigure(),t=[],s=e.length,i=e[0].length;for(let n=0;n<i;n++){t[n]=new Array(s).fill(!1);for(let i=0;i<s;i++)t[n][s-i-1]=e[i][n]}return t}getThirdTurn(){return this.getFirstTurn().reverse().map((e=>e.reverse()))}getForthTurn(){return this.getSecondTurn().reverse().map((e=>e.reverse()))}}class M extends x{getFigure(){return["###".split("").map((e=>"#"===e)),"-#-".split("").map((e=>"#"===e))]}}class y extends x{getFigure(){return["###".split("").map((e=>"#"===e)),"--#".split("").map((e=>"#"===e))]}}class B extends x{getFigure(){return["###".split("").map((e=>"#"===e)),"#--".split("").map((e=>"#"===e))]}}class H extends x{getFigure(){return["##".split("").map((e=>"#"===e)),"##".split("").map((e=>"#"===e))]}}class E extends x{getFigure(){return["####".split("").map((e=>"#"===e))]}}class b extends x{getFigure(){return["##-".split("").map((e=>"#"===e)),"-##".split("").map((e=>"#"===e))]}}class G extends x{getFigure(){return["-##".split("").map((e=>"#"===e)),"##-".split("").map((e=>"#"===e))]}}class O{constructor(e,t){this.x=e,this.y=t}}class k{constructor(e,t,s,i){this.figure=e,this.position=t,this.turnState=s,this.color=i}}class P{constructor(e,t,s){this.fieldWidth=e,this.fieldHeight=t,this.figures=s}}class L{constructor(){this.figuresFallen=0,this.linesSquashed=0}}class R{constructor(e=!1,t=!1,s=[],i=[],n=setTimeout((()=>{})),a,r=1,l=0,o=0,c=new L){this.isInitialized=e,this.isGameOver=t,this.fallingFigures=s,this.matrix=i,this.nextTickTimeoutId=n,this.settings=a,this.level=r,this.score=l,this.combo=o,this.stats=c}static makeSimple(e=10,t=20){return new R(!1,!1,[],new Array(t).fill([]).map((t=>new Array(e).fill(!1))),setTimeout((()=>{})),new P(e,t,[new M,new y,new B,new H,new E,new b,new G]))}}class I{constructor(e,s,i){this.timingsHandler=e,this.eventBus=s,this.commandBus=i,this.gameData=R.makeSimple(),this.commandBus.addHandler(t.InitGame,this.initGameHandler.bind(this)),this.commandBus.addHandler(t.ResumeGame,this.resumeGameHandler.bind(this)),this.commandBus.addHandler(t.PauseGame,this.pauseGameHandler.bind(this)),this.commandBus.addHandler(t.GameOver,this.gameOverHandler.bind(this))}initGameHandler(t){this.gameData=t.gameData,this.gameData.isInitialized=!0,this.eventBus.on(e.FallingTickProcessed,this.onFallTickProcessed.bind(this))}resumeGameHandler(e){this.gameData.isGameOver||(this.gameData.isInitialized||this.commandBus.run(new o(e.gameData)),this.fallTick())}pauseGameHandler(e){this.gameData=e.gameData,clearTimeout(this.gameData.nextTickTimeoutId),this.commandBus.run(new d(this.gameData))}gameOverHandler(){this.gameData.isInitialized=!1,this.gameData.isGameOver=!0,clearTimeout(this.gameData.nextTickTimeoutId),this.eventBus.fire(new n(this.gameData))}fallTick(){this.commandBus.run(new h(this.gameData))}onFallTickProcessed(e){clearTimeout(this.gameData.nextTickTimeoutId),this.gameData.isGameOver||(this.gameData.nextTickTimeoutId=setTimeout(this.fallTick.bind(this),this.timingsHandler.getDelayForNextTickMs(this.gameData)))}}class q{static canFigureBePlaced(e,t,s){return e.every(((e,i)=>e.every(((e,n)=>{const a=t.y+i,r=t.x+n;return!e||a<0&&r>=0&&r<=s[0].length-1||a in s&&r in s[a]&&!s[a][r]}))))}}class X{constructor(e,t,s){this.filled=e,this.filledGameOver=t,this.empty=s}}class A{constructor(e,t=!0,s=new X("#007400","#780000","#fff"),i=new X("#007400","#780000",null),n=new X("#b8e5e3",null,null)){this.containerElement=e,this.renderProjectionFigures=t,this.matrixCellColors=s,this.fallingFigureCellColors=i,this.projectionFigureCellColors=n}}class j{constructor(e,t){this.filled=e,this.empty=t}}class z{constructor(e,s,i){this.renderSettings=e,this.commandBus=s,this.eventBus=i,this.cellsHtmlElementsMap=[],s.addHandler(t.InitGame,this.initHandler.bind(this)),s.addHandler(t.Render,this.renderCommandHandler.bind(this))}initHandler(t){this.table=z.createHtmlElement('<div style="float: left; display: table; border-collapse: collapse"></div>'),this.cellsHtmlElementsMap=[];for(let e=0;e<t.gameData.settings.fieldHeight;e++){let s=z.createHtmlElement('<div style="display: table-row"></div>');this.cellsHtmlElementsMap[e]=[];for(let i=0;i<t.gameData.settings.fieldWidth;i++){let t=z.createHtmlElement('<div style="display: table-cell; border: 1px solid #ccc; width: 20px; height: 20px"></div>');this.cellsHtmlElementsMap[e][i]=t,s.appendChild(t)}this.table.appendChild(s)}this.renderSettings.containerElement.innerHTML="",this.renderSettings.containerElement.appendChild(this.table),this.scoreDisplay=z.createHtmlElement('<div style="float: left; font-family: \'Helvetica Neue\', sans-serif; font-size: 20px; margin-left: 15px;">\n                Level: <span id="level"></span><br>\n                Score: <span id="score"></span><br>\n                Combo: <span id="combo"></span><br>\n                Figures fallen: <span id="figures_fallen"></span><br>\n                Lines squashed: <span id="lines_squashed"></span><br>\n            </div>'),this.renderSettings.containerElement.appendChild(this.scoreDisplay),this.renderSettings.containerElement.appendChild(z.createHtmlElement('<div style="clear: both"></div>')),this.eventBus.on(e.FallingTickProcessed,this.onFallTickProcessed.bind(this)),this.eventBus.on(e.GameOver,this.onGameOver.bind(this)),this.eventBus.on(e.FiguresMoved,this.onFiguresMoved.bind(this))}onFiguresMoved(e){this.renderState(e.gameData)}onFallTickProcessed(e){this.renderState(e.gameData)}onGameOver(e){this.renderState(e.gameData)}renderCommandHandler(e){this.renderState(e.gameData)}renderState(e){this.repaintMatrixCells(e.matrix,new O(0,0),e),this.renderSettings.renderProjectionFigures&&this.renderFallingFiguresProjection(e),this.renderFallingFigures(e),this.renderStats(e)}renderFallingFigures(e){e.fallingFigures.forEach((t=>{this.repaintFallingFiguresCells(t,e)}))}renderFallingFiguresProjection(e){e.fallingFigures.forEach((t=>{const s=t.figure.getTurn(t.turnState),i=t.position.x;let n=t.position.y;for(;q.canFigureBePlaced(s,new O(i,n+1),e.matrix);)n++;this.repaintProjectionFiguresCells(s,new O(i,n),e)}))}repaintMatrixCells(e,t,s){let i;i=s.isGameOver?new j(this.renderSettings.matrixCellColors.filledGameOver,this.renderSettings.matrixCellColors.empty):new j(this.renderSettings.matrixCellColors.filled,this.renderSettings.matrixCellColors.empty),this.repaintCells(e,t,i)}repaintFallingFiguresCells(e,t){let s;s=t.isGameOver?new j(this.renderSettings.fallingFigureCellColors.filledGameOver,this.renderSettings.fallingFigureCellColors.empty):new j(e.color||this.renderSettings.fallingFigureCellColors.filled,this.renderSettings.fallingFigureCellColors.empty),this.repaintCells(e.figure.getTurn(e.turnState),e.position,s)}repaintProjectionFiguresCells(e,t,s){let i;i=s.isGameOver?new j(this.renderSettings.projectionFigureCellColors.filledGameOver,this.renderSettings.projectionFigureCellColors.empty):new j(this.renderSettings.projectionFigureCellColors.filled,this.renderSettings.projectionFigureCellColors.empty),this.repaintCells(e,t,i)}repaintCells(e,t,s){e.forEach(((e,i)=>{e.forEach(((e,n)=>{const a=i+t.y,r=n+t.x;if(a in this.cellsHtmlElementsMap&&r in this.cellsHtmlElementsMap[a]){const t=e?s.filled:s.empty;null!==t&&(this.cellsHtmlElementsMap[a][r].style.background=t)}}))}))}renderStats(e){const t=document.getElementById("level"),s=document.getElementById("score"),i=document.getElementById("combo"),n=document.getElementById("figures_fallen"),a=document.getElementById("lines_squashed");null!==t&&(t.innerHTML=e.level.toString()),null!==s&&(s.innerHTML=e.score.toString()),null!==i&&(i.innerHTML=e.combo.toString()),null!==n&&(n.innerHTML=e.stats.figuresFallen.toString()),null!==a&&(a.innerHTML=e.stats.linesSquashed.toString())}static createHtmlElement(e){let t=document.createElement("div");if(t.innerHTML=e,t.children.length>1||null===t.firstElementChild)throw"The HTML must contain only one child";if(!(t.firstElementChild instanceof HTMLElement))throw"Something went wrong while trying to get HTMLElement child from div";return t.firstElementChild}}class N{constructor(){this.transferredFigures=[],this.isGameOver=!1}}class W{constructor(e,s){this.commandBus=e,this.eventBus=s,this.commandBus.addHandler(t.FiguresFallTick,this.processFiguresFallTickCommand.bind(this)),this.commandBus.addHandler(t.FiguresFallDown,this.processDropFiguresCommand.bind(this))}processFiguresFallTickCommand(e){const t=this.fallFiguresForOneCell(e.gameData);let s=this.squashLines(e.gameData.matrix);t.isGameOver&&this.commandBus.run(new m(e.gameData)),this.eventBus.fire(new i(e.gameData,t.transferredFigures,s,0))}processDropFiguresCommand(e){let t=new N,s=0;for(;e.gameData.fallingFigures.length>0;){const i=this.fallFiguresForOneCell(e.gameData);t.transferredFigures.push(...i.transferredFigures),t.isGameOver=t.isGameOver||i.isGameOver,s++}let n=this.squashLines(e.gameData.matrix);t.isGameOver&&this.commandBus.run(new m(e.gameData)),this.eventBus.fire(new i(e.gameData,t.transferredFigures,n,s-1))}fallFiguresForOneCell(e){let t=new N;return e.fallingFigures.forEach(((s,i)=>{if(this.figureCanFall(e.matrix,s))s.position.y++;else{let n=this.transferFigureToMatrix(e.matrix,s);t.transferredFigures.push(...e.fallingFigures.splice(i,1)),t.isGameOver=t.isGameOver||n}})),t}figureCanFall(e,t){return q.canFigureBePlaced(t.figure.getTurn(t.turnState),new O(t.position.x,t.position.y+1),e)}transferFigureToMatrix(e,t){let s=!1;return t.figure.getTurn(t.turnState).forEach(((i,n)=>{i.forEach(((i,a)=>{if(!i)return;let r=t.position.x+a,l=t.position.y+n;l in e&&r in e[l]&&!e[l][r]?e[l][r]=!0:s=!0}))})),s}squashLines(e){let t=[];return e.forEach(((e,s)=>{e.every((e=>e))&&t.push(s)}),0),t.forEach((t=>{e.splice(t,1),e.unshift(new Array(e[0].length).fill(!1))})),t}}class Y{static ToArray(e){return Object.keys(e).map((e=>Number.parseInt(e))).filter((e=>!Number.isNaN(e)))}static GetRandom(e){const t=Y.ToArray(e);return t[Math.floor(Math.random()*t.length)]}}class _{constructor(e,s){this.eventBus=e,this.commandBus=s,this.commandBus.addHandler(t.InitGame,this.initHandler.bind(this))}initHandler(t){this.eventBus.on(e.FallingTickProcessed,this.processOnFallTick.bind(this))}processOnFallTick(e){this.addFigure(e.gameData)}addFigure(e){if(e.fallingFigures.length>0||e.isGameOver)return;const t=Math.floor(Math.random()*e.settings.figures.length),i=e.settings.figures[t],n=Y.GetRandom(s),a=i.getTurn(n),l=Math.max(...a.map((e=>e.length))),o=new O(Math.ceil(e.settings.fieldWidth/2-l/2)-1,-a.length),c=new k(i,o,n);e.fallingFigures.push(c),this.eventBus.fire(new r(e,[c]))}}class U{constructor(e,s){this.commandBus=e,this.eventBus=s,this.commandBus.addHandler(t.MoveLeft,this.processMoveLeftCommand.bind(this)),this.commandBus.addHandler(t.MoveRight,this.processMoveRightCommand.bind(this)),this.commandBus.addHandler(t.MoveDown,this.processMoveDownCommand.bind(this)),this.commandBus.addHandler(t.TurnClockwise,this.processTurnClockwiseCommand.bind(this)),this.commandBus.addHandler(t.MoveToX,this.processMoveToXCommand.bind(this)),this.commandBus.addHandler(t.MoveToY,this.processMoveToYCommand.bind(this)),this.commandBus.addHandler(t.TurnToState,this.processTurnToStateCommand.bind(this))}processMoveLeftCommand(e){e.gameData.fallingFigures.forEach((t=>{q.canFigureBePlaced(t.figure.getTurn(t.turnState),new O(t.position.x-1,t.position.y),e.gameData.matrix)&&t.position.x--})),this.eventBus.fire(new a(e.gameData))}processMoveRightCommand(e){e.gameData.fallingFigures.forEach((t=>{q.canFigureBePlaced(t.figure.getTurn(t.turnState),new O(t.position.x+1,t.position.y),e.gameData.matrix)&&t.position.x++})),this.eventBus.fire(new a(e.gameData))}processTurnClockwiseCommand(e){const t=Y.ToArray(s);e.gameData.fallingFigures.forEach((s=>{let i=s.turnState+1;i in t||(i=t[0]),q.canFigureBePlaced(s.figure.getTurn(i),s.position,e.gameData.matrix)&&(s.turnState=i)})),this.eventBus.fire(new a(e.gameData))}processMoveDownCommand(e){this.commandBus.run(new h(e.gameData))}processMoveToXCommand(e){e.x<0||e.x>e.gameData.settings.fieldWidth-1||(e.gameData.fallingFigures.forEach((t=>{const s=e.x>t.position.x?1:-1;for(;t.position.x!==e.x&&q.canFigureBePlaced(t.figure.getTurn(t.turnState),new O(t.position.x+s,t.position.y),e.gameData.matrix);)t.position.x+=s})),this.eventBus.fire(new a(e.gameData)))}processMoveToYCommand(e){e.y<0||(e.gameData.fallingFigures.forEach((t=>{for(;t.position.y<e.y&&q.canFigureBePlaced(t.figure.getTurn(t.turnState),new O(t.position.x,t.position.y+1),e.gameData.matrix);)t.position.y++})),this.eventBus.fire(new a(e.gameData)))}processTurnToStateCommand(e){e.gameData.fallingFigures.forEach((t=>{q.canFigureBePlaced(t.figure.getTurn(e.turnState),t.position,e.gameData.matrix)&&(t.turnState=e.turnState)})),this.eventBus.fire(new a(e.gameData))}}class J{constructor(e,s,i=new Map([[1,100],[2,300],[3,500],[4,800]]),n=50){this.commandBus=e,this.eventBus=s,this.squashedRowsRewardThresholdsMap=i,this.rewardOnCombo=n,e.addHandler(t.InitGame,this.initGameHandler.bind(this))}initGameHandler(t){this.eventBus.on(e.FallingTickProcessed,this.onFallingTickProcessed.bind(this))}onFallingTickProcessed(e){if(e.squashedLines.length<0)return;let t=0;this.squashedRowsRewardThresholdsMap.forEach(((s,i)=>{i>e.squashedLines.length||(t=s)})),e.gameData.score+=t*e.gameData.level+this.rewardOnCombo*Math.max(0,e.gameData.combo-1)*e.gameData.level+2*e.droppedLines*e.gameData.level}}class K{constructor(e,s,i,n){this.eventBus=e,this.commandBus=s,this.levelIncreaseOnSquashedRowsNumber=i,this.maxLevels=n,this.squashedRowsCounter=0,this.commandBus.addHandler(t.InitGame,this.processInitGameCommand.bind(this))}processInitGameCommand(t){this.eventBus.on(e.FallingTickProcessed,this.onFallTickProcessed.bind(this))}onFallTickProcessed(e){0!==e.squashedLines.length&&(this.squashedRowsCounter++,this.squashedRowsCounter>=this.levelIncreaseOnSquashedRowsNumber&&(this.squashedRowsCounter=0,e.gameData.level=Math.min(this.maxLevels,e.gameData.level+1)))}}class Q{constructor(e,s){this.commandBus=e,this.eventBus=s,e.addHandler(t.InitGame,this.initGameHandler.bind(this))}initGameHandler(t){this.eventBus.on(e.FallingTickProcessed,this.onFallTickProcessed.bind(this))}onFallTickProcessed(e){e.transferredToMatrixFigures.length<=0||(e.squashedLines.length>0?e.gameData.combo+=1:e.gameData.combo=0)}}class V{constructor(e){this.delayMs=e}getDelayForNextTickMs(e){return this.delayMs}}class Z{constructor(e,s){this.commandBus=e,this.eventBus=s,e.addHandler(t.InitGame,this.initGameHandler.bind(this))}initGameHandler(t){this.eventBus.on(e.FallingTickProcessed,this.onFallingTickProcessed.bind(this))}onFallingTickProcessed(e){e.gameData.stats.figuresFallen+=e.transferredToMatrixFigures.length,e.gameData.stats.linesSquashed+=e.squashedLines.length}}class ${constructor(e){this.commandBus=e,this.commandBus.addHandler(t.InitGame,this.processInitGameCommand.bind(this))}processInitGameCommand(e){window.onkeydown=t=>{"ArrowLeft"===t.code?this.commandBus.run(new g(e.gameData)):"ArrowRight"===t.code?this.commandBus.run(new p(e.gameData)):"ArrowUp"===t.code?this.commandBus.run(new f(e.gameData)):"ArrowDown"===t.code||"ArrowDown"===t.code?this.commandBus.run(new w(e.gameData)):"Space"===t.code&&this.commandBus.run(new C(e.gameData))}}}class ee{constructor(e=new l,t=new D,s=new I(new V(2e3),e,t),i=new U(t,e),n=new $(t),a=new W(t,e),r=new _(e,t),o=new K(e,t,8,15),c=new Q(t,e),u=new J(t,e),h=new Z(t,e),m=new z(new A(document.body),t,e),d=R.makeSimple()){this.eventBus=e,this.commandBus=t,this.gameController=s,this.movingHandler=i,this.keyboardController=n,this.fallingFiguresProcessor=a,this.figuresSpawner=r,this.levelCounter=o,this.comboCounter=c,this.scoreCounter=u,this.statsCounter=h,this.tableRenderer=m,this.gameData=d}start(e){e=e||R.makeSimple(),this.commandBus.run(new o(e)),this.commandBus.run(new c(e))}resume(){this.commandBus.run(new c(this.gameData))}pause(){this.commandBus.run(new u(this.gameData))}}class te{constructor(e,t){this.target=e,this._persisted=t}get persisted(){return this._persisted}}class se{constructor(e,t){this.target=e,this._persisted=t}get persisted(){return this._persisted}}class ie{constructor(e){this.target=e}get persisted(){return!1}}class ne{get persisted(){return!1}}class ae{constructor(e,t){this.figuresTargetStates=e,this.placingSteps=t}}class re{constructor(e,t){this.isOpened=e,this.cells=t}}class le{static collectHoles(e){let t=[];class s{constructor(e=[],t=[],s=[],i=!1,n=!1){this.cells=e,this.previousRowOpenXs=t,this.currentRowOpenXs=s,this.isOpened=i,this.continues=n}}let i=[],n=new Set;return e.forEach(((a,r)=>{i.forEach((e=>e.continues=!1)),a.forEach(((t,a)=>{if(t)n.add(a);else if(n.has(a)){let t=i.find((e=>e.previousRowOpenXs.some((e=>e===a))||e.currentRowOpenXs.length>0&&e.currentRowOpenXs[e.currentRowOpenXs.length-1]===a));void 0===t&&(t=new s,i.push(t)),t.currentRowOpenXs.push(a),t.cells.push(new O(a,r)),t.continues=!0,t.isOpened=t.isOpened||this.doesTheWayOutFromHoleExists(e,new O(a,r),n,[[!0,!0]])}}));let l=[];i.forEach(((s,i)=>{s.continues&&(s.previousRowOpenXs=s.currentRowOpenXs,s.currentRowOpenXs=[]),s.continues&&r!=e.length-1||(t.push(new re(s.isOpened,s.cells)),l.push(i))})),l.reverse().forEach((e=>i.splice(e,1)))})),t}static doesTheWayOutFromHoleExists(e,t,s,i){return void 0!==this.findTheWayOutFromHole(e,t,s,i)}static findTheWayOutFromHole(e,t,s,i){s instanceof Map&&(s=le.convertCoveredColumnsToXs(s));for(let n=t.x-1;n>=0&&q.canFigureBePlaced(i,new O(n,t.y),e);n--){let e=!0;for(let t=n+i[0].length-1;t>=n;t--)if(s.has(t)){e=!1;break}if(e)return n}for(let n=t.x+1;n<e[0].length&&q.canFigureBePlaced(i,new O(n,t.y),e);n++){let e=!0;for(let t=n;t<n+i[0].length;t++)if(s.has(t)){e=!1;break}if(e)return n}}static collectCoveredColumnsXs(e,t){return le.convertCoveredColumnsToXs(le.collectCoveredColumns(e,t))}static convertCoveredColumnsToXs(e){return new Set([...e.keys()])}static collectCoveredColumns(e,t){let s=new Map;return e.some(((i,n)=>(i.forEach(((e,t)=>{e&&s.set(t,n)})),void 0!==t&&n>=t||s.size==e[0].length))),s}}class oe{constructor(e,t,s,i,n,a){this.gameData=e,this.originalHoles=t,this.originalCoveredColumns=s,this.imaginableMatrix=i,this.imaginableCoveredColumns=n,this.squashedLinesCount=a}}class ce extends Error{}class ue extends ce{}class he{constructor(e,t){this.commandBus=e,this.scoreCalculator=t}resolve(e){if(0===e.fallingFigures.length)return;if(1!==e.fallingFigures.length)throw new ue;const t=e.fallingFigures[0];let s=-1/0,i=new ae(new Map,[]);this.processStates(e,((e,n,a)=>{n>s&&(s=n,i=new ae(new Map([[t,e]]),a))}));let n="debugMode"in window&&window.debugMode,a=i.figuresTargetStates.get(t);if(n&&void 0!==a){let t=structuredClone(e);a.color="#f00",t.fallingFigures=[a],this.commandBus.run(new d(t)),this.processStates(e,void 0,(e=>{e.color="#00f",t.fallingFigures=[e],this.commandBus.run(new d(t))}))}return i}processStates(e,t,i){const n=e.fallingFigures[0];let a=Y.ToArray(s);for(;a[0]!==n.turnState;)a.unshift(a.pop());let r=new Map,l=new Set;a.forEach((e=>{let t=n.figure.getTurn(e),s=t.map((e=>e.map((e=>e?"1":"0")).join())).join("\n");l.has(s)||(l.add(s),r.set(e,t))}));const o=le.collectHoles(e.matrix),c=le.collectCoveredColumns(e.matrix);r.forEach(((s,a)=>{for(let r=0;r<e.settings.fieldWidth-s[0].length+1;r++){let[l,u]=this.imagineFigureDrop(e.matrix,s,r),h=new O(r,l),m=this.squashLines(u),d=new k(n.figure,h,a);i&&i(d);let g=le.collectCoveredColumns(u),p=new oe(e,o,c,u,g,m),f=this.scoreCalculator.calculateScore(p),w=this.makeSimplePlacingSteps(d);t&&t(d,f,w)}})),o.filter((e=>e.isOpened&&e.cells.length>0)).forEach((s=>{let a=e.settings.fieldHeight,l=e.settings.fieldWidth,u=-1,h=-1;s.cells.forEach((e=>{a=Math.min(a,e.y),l=Math.min(l,e.x),u=Math.max(u,e.y),h=Math.max(h,e.x)})),r.forEach(((s,r)=>{for(let m=Math.max(a-s.length+1,0);m<=u;m++)for(let a=Math.max(l-s[0].length+1,0);a<=h;a++){let l=new O(a,m),u=new k(n.figure,l,r);if(i&&i(u),q.canFigureBePlaced(s,l,e.matrix)){let i=this.makePushInPlacingSteps(e,u,c);if(void 0!==i){let n=this.imagineFigurePlacing(e.matrix,s,l),a=this.squashLines(n),r=le.collectCoveredColumns(n),h=new oe(e,o,c,n,r,a),m=this.scoreCalculator.calculateScore(h);t&&t(u,m,i)}}}}))}))}squashLines(e){let t=[];return e.forEach(((e,s)=>{e.every((e=>e))&&t.push(s)}),0),t.forEach((t=>{e.splice(t,1),e.unshift(new Array(e[0].length).fill(!1))})),t.length}imagineFigureDrop(e,t,s){let i=-t.length;for(;q.canFigureBePlaced(t,new O(s,i+1),e);)i++;return[i,this.imagineFigurePlacing(e,t,new O(s,i))]}imagineFigurePlacing(e,t,s){let i=structuredClone(e);return t.forEach(((e,t)=>{e.forEach(((e,n)=>{const a=s.y+t,r=s.x+n;a in i&&r in i[a]&&e&&(i[a][r]=!0)}))})),i}makePushInPlacingSteps(e,t,s){let i=t.figure.getTurn(t.turnState),n=le.findTheWayOutFromHole(e.matrix,t.position,s,i);if(void 0!==n)return[new te(t.turnState,!0),new se(n,!1),new ie(t.position.y),new se(t.position.x,!0),new ne]}makeSimplePlacingSteps(e){return[new te(e.turnState,!0),new se(e.position.x,!0),new ne]}}class me{constructor(e){this.calculators=e}calculateScore(e){return this.calculators.reduce(((t,s)=>t+s.calculateScore(e)),0)}}class de{calculateScore(e){return 5*e.squashedLinesCount}}class ge{calculateScore(e){const t=e.gameData.settings.fieldHeight,s=e.gameData.settings.fieldWidth,[i,n]=this.calculateFillableSpace(e.imaginableMatrix,s);let a=0;return n>5&&(a=-i*Math.pow(i,i/(t*s))),a}calculateFillableSpace(e,t){let s=new Set,i=0,n=0;return e.every((e=>(e.forEach(((e,t)=>{e&&s.add(t)})),e.forEach(((e,t)=>{!e&&s.size>0&&!s.has(t)&&i++})),s.size<t&&(s.size>0&&n++,!0)))),[i,n]}}class pe{calculateScore(e){const[t,s]=this.calculateHolesAndCoveredHeight(e.imaginableMatrix,e.gameData.matrix),i=e.originalHoles.length-t;let n;return n=0===s||0===t?i>0?150*i:70*i:(i>0?150*i:70*i)-s*Math.pow(s,s/(e.gameData.settings.fieldHeight*t))*5,n}calculateHolesAndCoveredHeight(e,t){const[s,i]=this.calculateTheHighestHoleCoveredY(t);let n=new Map,a=0,r=0;return e.forEach(((e,t)=>{e.forEach(((e,l)=>{e&&!n.has(l)&&n.set(l,t);let o=n.get(l);void 0===o||e||(r++,void 0!==s&&void 0!==i&&(t<s?a+=t-o:o<i&&(a+=i-o)))}))})),[r,a]}calculateTheHighestHoleCoveredY(e){let t,s,i=new Map;return e.some(((e,n)=>e.some(((e,a)=>{e&&!i.has(a)&&i.set(a,n);let r=i.get(a);return void 0!==r&&!e&&(s=n,t=r,!0)})))),[s,t]}}class fe{calculateScore(e){const t=this.calculateHeight(e.imaginableMatrix);return-t*Math.pow(t,t/e.gameData.settings.fieldHeight)*3}calculateHeight(e){let t=-1;return e.every(((e,s)=>!!e.every((e=>!e))&&(t=s,!0))),e.length-t-1}}class we{calculateScore(e){const[t,s]=this.calculateTunnelsExceptUncovered(e.imaginableMatrix,e.gameData.matrix);let i;return i=0===s?0:70*-s-t*Math.pow(t,t/(e.gameData.settings.fieldHeight*s))*7,i}calculateTunnelsExceptUncovered(e,t){let s=new Set;t.every((e=>{e.forEach(((e,t)=>{e&&s.add(t)}))}));let i=new Set,n=new Map;const a=e[0].length;e.every(((e,t)=>(e.forEach(((e,t)=>{e&&i.add(t)})),e.forEach(((e,t)=>{e||i.has(t)||s.has(t)||0!==t&&!i.has(t-1)||t!==a-1&&!i.has(t+1)||n.set(t,(n.get(t)||0)+1)})),i.size<a)));let r=0,l=0;return n.forEach((e=>{e>=3&&(r+=e,l++)})),[r,l]}}class ve{constructor(e,s,i,n){this.eventBus=e,this.commandBus=s,this.figurePlacingResolver=i,this.figurePlacingPerformer=n,this.commandBus.addHandler(t.InitGame,this.initGameHandler.bind(this))}initGameHandler(t){this.eventBus.on(e.FiguresSpawned,this.onFiguresSpawned.bind(this))}onFiguresSpawned(e){const t=this.figurePlacingResolver.resolve(e.gameData);this.figurePlacingPerformer.place(e.gameData,t)}}class Fe extends Error{}class Te extends Fe{}class Ce extends Fe{}class De extends Fe{}class Se{constructor(e){this.commandBus=e}place(e,t){setTimeout((()=>this.placeImpl(e,t)),0)}placeImpl(e,t){if(0===e.fallingFigures.length)return;if(1!==e.fallingFigures.length)throw new Te;if(void 0===t)return;const s=e.fallingFigures[0],i=t.figuresTargetStates.get(s);if(i){if(s.figure!==i.figure)throw new Ce("Both of the original and the target falling figures must have the same figure in it.");t.placingSteps.forEach((t=>{if(t instanceof te)this.commandBus.run(new T(e,t.target));else if(t instanceof se)this.commandBus.run(new v(e,t.target));else if(t instanceof ie)this.commandBus.run(new F(e,t.target));else{if(!(t instanceof ne))throw new De("Unknown step "+t.constructor.name);this.commandBus.run(new C(e))}}))}}}class xe{static initSolver(e,t){return new ve(e,t,new he(t,new me([new ge,new fe,new pe,new de,new we])),new Se(t))}}document.addEventListener("DOMContentLoaded",(()=>{const e=new l,t=new D;let s=new ee(e,t);xe.initSolver(e,t),s.start()}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,