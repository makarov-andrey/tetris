(()=>{"use strict";var e;!function(e){e[e.FallingTickProcessed=0]="FallingTickProcessed",e[e.GameOver=1]="GameOver",e[e.FiguresMoved=2]="FiguresMoved",e[e.LevelUp=3]="LevelUp",e[e.FiguresSpawned=4]="FiguresSpawned"}(e||(e={}));var t,n=function(){function t(e,t,n,i){this.gameData=e,this.transferredToMatrixFigures=t,this.squashedLines=n,this.droppedLines=i}return t.prototype.getEventType=function(){return e.FallingTickProcessed},t}(),i=function(){function t(e){this.gameData=e}return t.prototype.getEventType=function(){return e.GameOver},t}(),r=function(){function t(e){this.gameData=e}return t.prototype.getEventType=function(){return e.FiguresMoved},t}(),o=function(){function t(e,t){this.gameData=e,this.newFigures=t}return t.prototype.getEventType=function(){return e.FiguresSpawned},t}(),a=function(){function e(){this.handlers=new Map}return e.prototype.on=function(e,t,n){void 0===n&&(n=!0);var i=this.handlers.get(e)||[];n&&i.some((function(e){return e===t}))||(i.push(t),this.handlers.set(e,i))},e.prototype.off=function(e,t){var n=this.handlers.get(e)||[],i=n.indexOf(t);i>0&&n.splice(i,1),this.handlers.set(e,n)},e.prototype.fire=function(e){(this.handlers.get(e.getEventType())||[]).forEach((function(t){t(e)}))},e}();!function(e){e[e.InitGame=0]="InitGame",e[e.ResumeGame=1]="ResumeGame",e[e.PauseGame=2]="PauseGame",e[e.FiguresFallTick=3]="FiguresFallTick",e[e.GameOver=4]="GameOver",e[e.Render=5]="Render",e[e.MoveLeft=6]="MoveLeft",e[e.MoveRight=7]="MoveRight",e[e.TurnClockwise=8]="TurnClockwise",e[e.MoveDown=9]="MoveDown",e[e.FiguresFallDown=10]="FiguresFallDown"}(t||(t={}));var s,u,l=function(){function e(e){this.gameData=e}return e.prototype.getCommandType=function(){return t.InitGame},e}(),c=function(){function e(e){this.gameData=e}return e.prototype.getCommandType=function(){return t.ResumeGame},e}(),h=function(){function e(e){this.gameData=e}return e.prototype.getCommandType=function(){return t.PauseGame},e}(),f=function(){function e(e){this.gameData=e}return e.prototype.getCommandType=function(){return t.FiguresFallTick},e}(),d=function(){function e(e){this.gameData=e}return e.prototype.getCommandType=function(){return t.GameOver},e}(),m=function(){function e(e){this.gameData=e}return e.prototype.getCommandType=function(){return t.Render},e}(),p=function(){function e(e){this.gameData=e}return e.prototype.getCommandType=function(){return t.MoveLeft},e}(),g=function(){function e(e){this.gameData=e}return e.prototype.getCommandType=function(){return t.MoveRight},e}(),v=function(){function e(e){this.gameData=e}return e.prototype.getCommandType=function(){return t.TurnClockwise},e}(),y=function(){function e(e){this.gameData=e}return e.prototype.getCommandType=function(){return t.MoveDown},e}(),w=function(){function e(e){this.gameData=e}return e.prototype.getCommandType=function(){return t.FiguresFallDown},e}(),F=function(){function e(){this.handlers=new Map}return e.prototype.addHandler=function(e,t,n){void 0===n&&(n=!0);var i=this.handlers.get(e)||[];n&&i.some((function(e){return e===t}))||(i.push(t),this.handlers.set(e,i))},e.prototype.removeHandler=function(e,t){var n=this.handlers.get(e)||[],i=n.indexOf(t);i>0&&n.splice(i,1),this.handlers.set(e,n)},e.prototype.run=function(e){(this.handlers.get(e.getCommandType())||[]).forEach((function(t){t(e)}))},e}(),T=(s=function(e,t){return s=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},s(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}s(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});!function(e){e[e.One=0]="One",e[e.Two=1]="Two",e[e.Three=2]="Three",e[e.Four=3]="Four"}(u||(u={}));var D=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return T(t,e),t.prototype.getNormalizedFigure=function(){var e=this.getFigure(),t=e.reduce((function(e,t){return Math.max(e,t.length)}),0);return e.map((function(e){var n=e.length;return e.length=t,e.fill(!1,n-1,t-1)}))},t.prototype.getFirstTurn=function(){return this.getNormalizedFigure()},t.prototype.getSecondTurn=function(){for(var e=this.getNormalizedFigure(),t=[],n=e.length,i=e[0].length,r=0;r<i;r++){t[r]=new Array(n).fill(!1);for(var o=0;o<n;o++)t[r][n-o-1]=e[o][r]}return t},t.prototype.getThirdTurn=function(){return this.getFirstTurn().reverse().map((function(e){return e.reverse()}))},t.prototype.getForthTurn=function(){return this.getSecondTurn().reverse().map((function(e){return e.reverse()}))},t}(function(){function e(){}return e.prototype.getTurn=function(e){switch(e){case u.One:return this.getFirstTurn();case u.Two:return this.getSecondTurn();case u.Three:return this.getThirdTurn();case u.Four:return this.getForthTurn()}},e}()),C=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return T(t,e),t.prototype.getFigure=function(){return["###".split("").map((function(e){return"#"===e})),"-#-".split("").map((function(e){return"#"===e}))]},t}(D),S=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return T(t,e),t.prototype.getFigure=function(){return["###".split("").map((function(e){return"#"===e})),"--#".split("").map((function(e){return"#"===e}))]},t}(D),B=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return T(t,e),t.prototype.getFigure=function(){return["###".split("").map((function(e){return"#"===e})),"#--".split("").map((function(e){return"#"===e}))]},t}(D),M=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return T(t,e),t.prototype.getFigure=function(){return["##".split("").map((function(e){return"#"===e})),"##".split("").map((function(e){return"#"===e}))]},t}(D),H=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return T(t,e),t.prototype.getFigure=function(){return["####".split("").map((function(e){return"#"===e}))]},t}(D),b=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return T(t,e),t.prototype.getFigure=function(){return["##-".split("").map((function(e){return"#"===e})),"-##".split("").map((function(e){return"#"===e}))]},t}(D),x=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return T(t,e),t.prototype.getFigure=function(){return["-##".split("").map((function(e){return"#"===e})),"##-".split("").map((function(e){return"#"===e}))]},t}(D),E=function(e,t){this.x=e,this.y=t},G=function(e,t,n,i){void 0===i&&(i=void 0),this.figure=e,this.position=t,this.turnState=n,this.color=i},k=function(e,t,n){this.fieldWidth=e,this.fieldHeight=t,this.figures=n},O=function(){this.figuresFallen=0,this.linesSquashed=0},P=function(){function e(e,t,n,i,r,o,a,s,u,l){void 0===e&&(e=!1),void 0===t&&(t=!1),void 0===n&&(n=[]),void 0===i&&(i=[]),void 0===r&&(r=setTimeout((function(){}))),void 0===a&&(a=1),void 0===s&&(s=0),void 0===u&&(u=0),void 0===l&&(l=new O),this.isInitialized=e,this.isGameOver=t,this.fallingFigures=n,this.matrix=i,this.nextTickTimeoutId=r,this.settings=o,this.level=a,this.score=s,this.combo=u,this.stats=l}return e.makeSimple=function(t,n){return void 0===t&&(t=10),void 0===n&&(n=20),new e(!1,!1,[],new Array(n).fill([]).map((function(e){return new Array(t).fill(!1)})),setTimeout((function(){})),new k(t,n,[new C,new S,new B,new M,new H,new b,new x]))},e}(),I=function(){function n(e,n,i){this.timingsHandler=e,this.eventBus=n,this.commandBus=i,this.gameData=P.makeSimple(),this.commandBus.addHandler(t.InitGame,this.initGameHandler.bind(this)),this.commandBus.addHandler(t.ResumeGame,this.resumeGameHandler.bind(this)),this.commandBus.addHandler(t.PauseGame,this.pauseGameHandler.bind(this)),this.commandBus.addHandler(t.GameOver,this.gameOverHandler.bind(this))}return n.prototype.initGameHandler=function(t){this.gameData=t.gameData,this.gameData.isInitialized=!0,this.eventBus.on(e.FallingTickProcessed,this.onFallTickProcessed.bind(this))},n.prototype.resumeGameHandler=function(e){this.gameData.isGameOver||(this.gameData.isInitialized||this.commandBus.run(new l(e.gameData)),this.fallTick())},n.prototype.pauseGameHandler=function(e){this.gameData=e.gameData,clearTimeout(this.gameData.nextTickTimeoutId),this.commandBus.run(new m(this.gameData))},n.prototype.gameOverHandler=function(){this.gameData.isInitialized=!1,this.gameData.isGameOver=!0,clearTimeout(this.gameData.nextTickTimeoutId),this.eventBus.fire(new i(this.gameData))},n.prototype.fallTick=function(){this.commandBus.run(new f(this.gameData))},n.prototype.onFallTickProcessed=function(e){clearTimeout(this.gameData.nextTickTimeoutId),this.gameData.isGameOver||(this.gameData.nextTickTimeoutId=setTimeout(this.fallTick.bind(this),this.timingsHandler.getDelayForNextTickMs(this.gameData)))},n}(),L=function(){function e(){}return e.canFigureBePlaced=function(e,t,n){return e.every((function(e,i){return e.every((function(e,r){var o=t.y+i,a=t.x+r;return!e||o<0&&a>=0&&a<=n[0].length-1||o in n&&a in n[o]&&!n[o][a]}))}))},e}(),R=function(e,t,n){this.filled=e,this.filledGameOver=t,this.empty=n},_=function(e,t,n,i,r){void 0===t&&(t=!0),void 0===n&&(n=new R("#007400","#780000","#fff")),void 0===i&&(i=new R("#007400","#780000",null)),void 0===r&&(r=new R("#b8e5e3",null,null)),this.containerElement=e,this.renderProjectionFigures=t,this.matrixCellColors=n,this.fallingFigureCellColors=i,this.projectionFigureCellColors=r},q=function(e,t){this.filled=e,this.empty=t},j=function(){function n(e,n,i){this.renderSettings=e,this.commandBus=n,this.eventBus=i,this.cellsHtmlElementsMap=[],n.addHandler(t.InitGame,this.initHandler.bind(this)),n.addHandler(t.Render,this.renderCommandHandler.bind(this))}return n.prototype.initHandler=function(t){this.table=n.createHtmlElement('<div style="float: left; display: table; border-collapse: collapse"></div>'),this.cellsHtmlElementsMap=[];for(var i=0;i<t.gameData.settings.fieldHeight;i++){var r=n.createHtmlElement('<div style="display: table-row"></div>');this.cellsHtmlElementsMap[i]=[];for(var o=0;o<t.gameData.settings.fieldWidth;o++){var a=n.createHtmlElement('<div style="display: table-cell; border: 1px solid #ccc; width: 20px; height: 20px"></div>');this.cellsHtmlElementsMap[i][o]=a,r.appendChild(a)}this.table.appendChild(r)}this.renderSettings.containerElement.innerHTML="",this.renderSettings.containerElement.appendChild(this.table),this.scoreDisplay=n.createHtmlElement('<div style="float: left; font-family: \'Helvetica Neue\', sans-serif; font-size: 20px; margin-left: 15px;">\n                Level: <span id="level"></span><br>\n                Score: <span id="score"></span><br>\n                Combo: <span id="combo"></span><br>\n                Figures fallen: <span id="figures_fallen"></span><br>\n                Lines squashed: <span id="lines_squashed"></span><br>\n            </div>'),this.renderSettings.containerElement.appendChild(this.scoreDisplay),this.renderSettings.containerElement.appendChild(n.createHtmlElement('<div style="clear: both"></div>')),this.eventBus.on(e.FallingTickProcessed,this.onFallTickProcessed.bind(this)),this.eventBus.on(e.GameOver,this.onGameOver.bind(this)),this.eventBus.on(e.FiguresMoved,this.onFiguresMoved.bind(this))},n.prototype.onFiguresMoved=function(e){this.renderState(e.gameData)},n.prototype.onFallTickProcessed=function(e){this.renderState(e.gameData)},n.prototype.onGameOver=function(e){this.renderState(e.gameData)},n.prototype.renderCommandHandler=function(e){this.renderState(e.gameData)},n.prototype.renderState=function(e){this.repaintMatrixCells(e.matrix,new E(0,0),e),this.renderSettings.renderProjectionFigures&&this.renderFallingFiguresProjection(e),this.renderFallingFigures(e),this.renderStats(e)},n.prototype.renderFallingFigures=function(e){var t=this;e.fallingFigures.forEach((function(n){t.repaintFallingFiguresCells(n,e)}))},n.prototype.renderFallingFiguresProjection=function(e){var t=this;e.fallingFigures.forEach((function(n){for(var i=n.figure.getTurn(n.turnState),r=n.position.x,o=n.position.y;L.canFigureBePlaced(i,new E(r,o+1),e.matrix);)o++;t.repaintProjectionFiguresCells(i,new E(r,o),e)}))},n.prototype.repaintMatrixCells=function(e,t,n){var i;i=n.isGameOver?new q(this.renderSettings.matrixCellColors.filledGameOver,this.renderSettings.matrixCellColors.empty):new q(this.renderSettings.matrixCellColors.filled,this.renderSettings.matrixCellColors.empty),this.repaintCells(e,t,i)},n.prototype.repaintFallingFiguresCells=function(e,t){var n;n=t.isGameOver?new q(this.renderSettings.fallingFigureCellColors.filledGameOver,this.renderSettings.fallingFigureCellColors.empty):new q(e.color||this.renderSettings.fallingFigureCellColors.filled,this.renderSettings.fallingFigureCellColors.empty),this.repaintCells(e.figure.getTurn(e.turnState),e.position,n)},n.prototype.repaintProjectionFiguresCells=function(e,t,n){var i;i=n.isGameOver?new q(this.renderSettings.projectionFigureCellColors.filledGameOver,this.renderSettings.projectionFigureCellColors.empty):new q(this.renderSettings.projectionFigureCellColors.filled,this.renderSettings.projectionFigureCellColors.empty),this.repaintCells(e,t,i)},n.prototype.repaintCells=function(e,t,n){var i=this;e.forEach((function(e,r){e.forEach((function(e,o){var a=r+t.y,s=o+t.x;if(a in i.cellsHtmlElementsMap&&s in i.cellsHtmlElementsMap[a]){var u=e?n.filled:n.empty;null!==u&&(i.cellsHtmlElementsMap[a][s].style.background=u)}}))}))},n.prototype.renderStats=function(e){var t=document.getElementById("level"),n=document.getElementById("score"),i=document.getElementById("combo"),r=document.getElementById("figures_fallen"),o=document.getElementById("lines_squashed");null!==t&&(t.innerHTML=e.level.toString()),null!==n&&(n.innerHTML=e.score.toString()),null!==i&&(i.innerHTML=e.combo.toString()),null!==r&&(r.innerHTML=e.stats.figuresFallen.toString()),null!==o&&(o.innerHTML=e.stats.linesSquashed.toString())},n.createHtmlElement=function(e){var t=document.createElement("div");if(t.innerHTML=e,t.children.length>1||null===t.firstElementChild)throw"The HTML must contain only one child";if(!(t.firstElementChild instanceof HTMLElement))throw"Something went wrong while trying to get HTMLElement child from div";return t.firstElementChild},n}(),A=function(){this.transferredFigures=[],this.isGameOver=!1},N=function(){function e(e,n){this.commandBus=e,this.eventBus=n,this.commandBus.addHandler(t.FiguresFallTick,this.processFiguresFallTickCommand.bind(this)),this.commandBus.addHandler(t.FiguresFallDown,this.processDropFiguresCommand.bind(this))}return e.prototype.processFiguresFallTickCommand=function(e){var t=this.fallFiguresForOneCell(e.gameData),i=this.squashLines(e.gameData.matrix);t.isGameOver&&this.commandBus.run(new d(e.gameData)),this.eventBus.fire(new n(e.gameData,t.transferredFigures,i,0))},e.prototype.processDropFiguresCommand=function(e){for(var t,i=new A,r=0;e.gameData.fallingFigures.length>0;){var o=this.fallFiguresForOneCell(e.gameData);(t=i.transferredFigures).push.apply(t,o.transferredFigures),i.isGameOver=i.isGameOver||o.isGameOver,r++}var a=this.squashLines(e.gameData.matrix);i.isGameOver&&this.commandBus.run(new d(e.gameData)),this.eventBus.fire(new n(e.gameData,i.transferredFigures,a,r-1))},e.prototype.fallFiguresForOneCell=function(e){var t=this,n=new A;return e.fallingFigures.forEach((function(i,r){var o;if(t.figureCanFall(e.matrix,i))i.position.y++;else{var a=t.transferFigureToMatrix(e.matrix,i);(o=n.transferredFigures).push.apply(o,e.fallingFigures.splice(r,1)),n.isGameOver=n.isGameOver||a}})),n},e.prototype.figureCanFall=function(e,t){return L.canFigureBePlaced(t.figure.getTurn(t.turnState),new E(t.position.x,t.position.y+1),e)},e.prototype.transferFigureToMatrix=function(e,t){var n=!1;return t.figure.getTurn(t.turnState).forEach((function(i,r){i.forEach((function(i,o){if(i){var a=t.position.x+o,s=t.position.y+r;s in e&&a in e[s]&&!e[s][a]?e[s][a]=!0:n=!0}}))})),n},e.prototype.squashLines=function(e){var t=[];return e.forEach((function(e,n){e.every((function(e){return e}))&&t.push(n)}),0),t.forEach((function(t){e.splice(t,1),e.unshift(new Array(e[0].length).fill(!1))})),t},e}(),z=function(){function e(){}return e.ToArray=function(e){return Object.keys(e).map((function(e){return Number.parseInt(e)})).filter((function(e){return!Number.isNaN(e)}))},e.GetRandom=function(t){var n=e.ToArray(t);return n[Math.floor(Math.random()*n.length)]},e}(),U=function(){function n(e,n){this.eventBus=e,this.commandBus=n,this.commandBus.addHandler(t.InitGame,this.initHandler.bind(this))}return n.prototype.initHandler=function(t){this.eventBus.on(e.FallingTickProcessed,this.processOnFallTick.bind(this))},n.prototype.processOnFallTick=function(e){this.addFigure(e.gameData)},n.prototype.addFigure=function(e){if(!(e.fallingFigures.length>0||e.isGameOver)){var t=Math.floor(Math.random()*e.settings.figures.length),n=e.settings.figures[t],i=z.GetRandom(u),r=n.getTurn(i),a=Math.max.apply(Math,r.map((function(e){return e.length}))),s=new E(Math.ceil(e.settings.fieldWidth/2-a/2)-1,-r.length),l=new G(n,s,i);e.fallingFigures.push(l),this.eventBus.fire(new o(e,[l]))}},n}(),W=function(){function e(e,n){this.commandBus=e,this.eventBus=n,this.commandBus.addHandler(t.MoveLeft,this.processMoveLeftCommand.bind(this)),this.commandBus.addHandler(t.MoveRight,this.processMoveRightCommand.bind(this)),this.commandBus.addHandler(t.MoveDown,this.processMoveDownCommand.bind(this)),this.commandBus.addHandler(t.TurnClockwise,this.processTurnClockwiseCommand.bind(this))}return e.prototype.processMoveLeftCommand=function(e){e.gameData.fallingFigures.forEach((function(t){L.canFigureBePlaced(t.figure.getTurn(t.turnState),new E(t.position.x-1,t.position.y),e.gameData.matrix)&&t.position.x--})),this.eventBus.fire(new r(e.gameData))},e.prototype.processMoveRightCommand=function(e){e.gameData.fallingFigures.forEach((function(t){L.canFigureBePlaced(t.figure.getTurn(t.turnState),new E(t.position.x+1,t.position.y),e.gameData.matrix)&&t.position.x++})),this.eventBus.fire(new r(e.gameData))},e.prototype.processTurnClockwiseCommand=function(e){var t=z.ToArray(u);e.gameData.fallingFigures.forEach((function(n){var i=n.turnState+1;i in t||(i=t[0]),L.canFigureBePlaced(n.figure.getTurn(i),n.position,e.gameData.matrix)&&(n.turnState=i)})),this.eventBus.fire(new r(e.gameData))},e.prototype.processMoveDownCommand=function(e){this.commandBus.run(new f(e.gameData))},e}(),Y=function(){function e(e){this.commandBus=e,this.commandBus.addHandler(t.InitGame,this.processInitGameCommand.bind(this))}return e.prototype.processInitGameCommand=function(e){var t=this;window.onkeydown=function(n){"ArrowLeft"===n.code?t.commandBus.run(new p(e.gameData)):"ArrowRight"===n.code?t.commandBus.run(new g(e.gameData)):"ArrowUp"===n.code?t.commandBus.run(new v(e.gameData)):"ArrowDown"===n.code||"ArrowDown"===n.code?t.commandBus.run(new y(e.gameData)):"Space"===n.code&&t.commandBus.run(new w(e.gameData))}},e}(),J=function(){function n(e,n,i,r){void 0===i&&(i=new Map([[1,100],[2,300],[3,500],[4,800]])),void 0===r&&(r=50),this.commandBus=e,this.eventBus=n,this.squashedRowsRewardThresholdsMap=i,this.rewardOnCombo=r,e.addHandler(t.InitGame,this.initGameHandler.bind(this))}return n.prototype.initGameHandler=function(t){this.eventBus.on(e.FallingTickProcessed,this.onFallingTickProcessed.bind(this))},n.prototype.onFallingTickProcessed=function(e){if(!(e.squashedLines.length<0)){var t=0;this.squashedRowsRewardThresholdsMap.forEach((function(n,i){i>e.squashedLines.length||(t=n)})),e.gameData.score+=t*e.gameData.level+this.rewardOnCombo*Math.max(0,e.gameData.combo-1)*e.gameData.level+2*e.droppedLines*e.gameData.level}},n}(),K=function(){function n(e,n,i,r){this.eventBus=e,this.commandBus=n,this.levelIncreaseOnSquashedRowsNumber=i,this.maxLevels=r,this.squashedRowsCounter=0,this.commandBus.addHandler(t.InitGame,this.processInitGameCommand.bind(this))}return n.prototype.processInitGameCommand=function(t){this.eventBus.on(e.FallingTickProcessed,this.onFallTickProcessed.bind(this))},n.prototype.onFallTickProcessed=function(e){0!==e.squashedLines.length&&(this.squashedRowsCounter++,this.squashedRowsCounter>=this.levelIncreaseOnSquashedRowsNumber&&(this.squashedRowsCounter=0,e.gameData.level=Math.min(this.maxLevels,e.gameData.level+1)))},n}(),Q=function(){function n(e,n){this.commandBus=e,this.eventBus=n,e.addHandler(t.InitGame,this.initGameHandler.bind(this))}return n.prototype.initGameHandler=function(t){this.eventBus.on(e.FallingTickProcessed,this.onFallTickProcessed.bind(this))},n.prototype.onFallTickProcessed=function(e){e.transferredToMatrixFigures.length<=0||(e.squashedLines.length>0?e.gameData.combo+=1:e.gameData.combo=0)},n}(),V=function(){function e(e){this.delayMs=e}return e.prototype.getDelayForNextTickMs=function(e){return this.delayMs},e}(),X=function(){function n(e,n){this.commandBus=e,this.eventBus=n,e.addHandler(t.InitGame,this.initGameHandler.bind(this))}return n.prototype.initGameHandler=function(t){this.eventBus.on(e.FallingTickProcessed,this.onFallingTickProcessed.bind(this))},n.prototype.onFallingTickProcessed=function(e){e.gameData.stats.figuresFallen+=e.transferredToMatrixFigures.length,e.gameData.stats.linesSquashed+=e.squashedLines.length},n}(),Z=function(){function e(e,t,n,i,r,o,s,u,l,c,h,f,d){void 0===e&&(e=new a),void 0===t&&(t=new F),void 0===n&&(n=new I(new V(2e3),e,t)),void 0===i&&(i=new W(t,e)),void 0===r&&(r=new Y(t)),void 0===o&&(o=new N(t,e)),void 0===s&&(s=new U(e,t)),void 0===u&&(u=new K(e,t,8,15)),void 0===l&&(l=new Q(t,e)),void 0===c&&(c=new J(t,e)),void 0===h&&(h=new X(t,e)),void 0===f&&(f=new j(new _(document.body),t,e)),void 0===d&&(d=P.makeSimple()),this.eventBus=e,this.commandBus=t,this.gameController=n,this.movingHandler=i,this.movingController=r,this.fallingFiguresProcessor=o,this.figuresSpawner=s,this.levelCounter=u,this.comboCounter=l,this.scoreCounter=c,this.statsCounter=h,this.tableRenderer=f,this.gameData=d}return e.prototype.start=function(e){e=e||P.makeSimple(),this.commandBus.run(new l(e)),this.commandBus.run(new c(e))},e.prototype.resume=function(){this.commandBus.run(new c(this.gameData))},e.prototype.pause=function(){this.commandBus.run(new h(this.gameData))},e}(),$=function(e){this.target=e},ee=function(e){this.target=e},te=function(e){this.target=e},ne=function(){},ie=function(e,t){this.figuresTargetStates=e,this.placingSteps=t},re=function(){var e=function(t,n){return e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},e(t,n)};return function(t,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function i(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}(),oe=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return re(t,e),t}(function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return re(t,e),t}(Error)),ae=function(){function e(e,t){this.commandBus=e,this.scoreCalculator=t}return e.prototype.resolve=function(e){var t=this;if(0!==e.fallingFigures.length){if(1!==e.fallingFigures.length)throw new oe;var n=e.fallingFigures[0],i=-1/0,r=new ie(new Map,[]);this.processStates(e,(function(e,t,o){t>i&&(i=t,r=new ie(new Map([[n,e]]),o))}));var o="debugMode"in window&&window.debugMode,a=r.figuresTargetStates.get(n);if(o&&void 0!==a){var s=structuredClone(e);a.color="#f00",s.fallingFigures=[a],this.commandBus.run(new m(s)),this.processStates(e,void 0,(function(e){e.color="#00f",s.fallingFigures=[e],t.commandBus.run(new m(s))}))}return r}},e.prototype.processStates=function(e,t,n){for(var i=this,r=e.fallingFigures[0],o=z.ToArray(u);o[0]!==r.turnState;)o.unshift(o.pop());var a=new Map,s=new Set;o.forEach((function(e){var t=r.figure.getTurn(e),n=t.map((function(e){return e.map((function(e){return e?"1":"0"})).join()})).join("\n");s.has(n)||(s.add(n),a.set(e,t))})),a.forEach((function(o,a){for(var s=0;s<e.settings.fieldWidth-o[0].length+1;s++){var u=i.imagineFigureDrop(e.matrix,o,s),l=u[0],c=u[1],h=new E(s,l),f=i.squashLines(c),d=new G(r.figure,h,a);n&&n(d);var m=i.scoreCalculator.calculateScore(e,c,f),p=i.makeSimplePlacingSteps(r,d);t&&t(d,m,p)}})),this.collectOpenHoles(e.matrix).forEach((function(o){var s=o[0],u=o[1];a.forEach((function(o,a){for(var l=Math.min(s.y-o.length,0);l++;l<=u.y)for(var c=Math.min(s.x-o[0].length,0);c++;c<=u.x){var h=new E(c,l);if(L.canFigureBePlaced(o,h,e.matrix)){var f=new G(r.figure,h,a),d=i.makePushInPlacingSteps(e,r,f);if(void 0!==d){var m=i.imagineFigurePlacing(e.matrix,o,h),p=i.squashLines(m);n&&n(f);var g=i.scoreCalculator.calculateScore(e,m,p);t&&t(f,g,d)}}}}))}))},e.prototype.squashLines=function(e){var t=[];return e.forEach((function(e,n){e.every((function(e){return e}))&&t.push(n)}),0),t.forEach((function(t){e.splice(t,1),e.unshift(new Array(e[0].length).fill(!1))})),t.length},e.prototype.imagineFigureDrop=function(e,t,n){for(var i=-t.length;L.canFigureBePlaced(t,new E(n,i+1),e);)i++;return[i,this.imagineFigurePlacing(e,t,new E(n,i))]},e.prototype.imagineFigurePlacing=function(e,t,n){var i=structuredClone(e);return t.forEach((function(e,t){e.forEach((function(e,r){var o=n.y+t,a=n.x+r;o in i&&a in i[o]&&e&&(i[o][a]=!0)}))})),i},e.prototype.collectOpenHoles=function(e){return[]},e.prototype.makePushInPlacingSteps=function(e,t,n){},e.prototype.makeSimplePlacingSteps=function(e,t){return[new $(t.turnState),new ee(t.position.x),new ne]},e}(),se=function(){function e(e,t){void 0===t&&(t=.8),this.initialDelayMs=e,this.base=t}return e.prototype.getDelayForNextTickMs=function(e){return Math.pow(this.base-.007*(e.level-1),e.level-1)*this.initialDelayMs},e}(),ue=function(){var e=function(t,n){return e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},e(t,n)};return function(t,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function i(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}(),le=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return ue(t,e),t}(Error),ce=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return ue(t,e),t}(le),he=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return ue(t,e),t}(le),fe=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return ue(t,e),t}(le),de=function(){function e(e,t){void 0===t&&(t=new se(100,.9)),this.commandBus=e,this.timingsHandler=t,this.nextMoveTimeoutId=setTimeout((function(){})),this.gameData=P.makeSimple()}return e.prototype.place=function(e,t){this.gameData=e,this.targetState=t,clearTimeout(this.nextMoveTimeoutId),this.nextMoveTimeoutId=setTimeout(this.processTick.bind(this),this.timingsHandler.getDelayForNextTickMs(this.gameData))},e.prototype.processTick=function(){var e=this;if(0!==this.gameData.fallingFigures.length){if(1!==this.gameData.fallingFigures.length)throw new ce;if(void 0!==this.targetState){var t=this.gameData.fallingFigures[0],n=this.targetState.figuresTargetStates.get(t);if(n){if(t.figure!==n.figure)throw new he("Both of the original and the target falling figures must have the same figure in it.");this.targetState.placingSteps.every((function(n){if(n instanceof $)return t.turnState===n.target||(e.commandBus.run(new v(e.gameData)),!1);if(n instanceof ee)return t.position.x===n.target||(t.position.x>n.target?e.commandBus.run(new p(e.gameData)):e.commandBus.run(new g(e.gameData)),!1);if(n instanceof te)return!(t.position.y<n.target&&(e.commandBus.run(new y(e.gameData)),1));if(n instanceof ne)return e.commandBus.run(new w(e.gameData)),!0;throw new fe("Unknown step "+n.constructor.name)}))||(this.nextMoveTimeoutId=setTimeout(this.processTick.bind(this),this.timingsHandler.getDelayForNextTickMs(this.gameData)))}}}},e}(),me=function(){function e(){}return e.prototype.calculateScore=function(e,t,n){var i,r=e.settings.fieldHeight,o=e.settings.fieldWidth,a=5*n,s=this.calculateHoles(e.matrix),u=this.calculateHolesAndCoveredHeight(t,e.matrix),l=u[0],c=u[1],h=s-l;i=0===c||0===l?h>0?150*h:70*h:(h>0?150*h:70*h)-c*Math.pow(c,c/(r*l))*5;var f=this.calculateHeight(t),d=-f*Math.pow(f,f/r)*3,m=this.calculateFillableSpace(t,o),p=m[0],g=0;m[1]>5&&(g=-p*Math.pow(p,p/(r*o)));var v,y=this.calculateTunnelsExceptUncovered(t,e.matrix),w=y[0],F=y[1],T=i+a+d+(v=0===F?0:70*-F-w*Math.pow(w,w/(r*F))*7)+g;return isNaN(T)&&console.log(t,i,a,d,v,g),T},e.prototype.calculateHoles=function(e){var t=new Set,n=0;return e.forEach((function(e,i){e.forEach((function(e,i){e?t.add(i):t.has(i)&&n++}))})),n},e.prototype.calculateHolesAndCoveredHeight=function(e,t){var n=this.calculateTheHighestHoleCoveredY(t),i=n[0],r=n[1],o=new Map,a=0,s=0;return e.forEach((function(e,t){e.forEach((function(e,n){e&&!o.has(n)&&o.set(n,t);var u=o.get(n);void 0===u||e||(s++,void 0!==i&&void 0!==r&&(t<i?a+=t-u:u<r&&(a+=r-u)))}))})),[s,a]},e.prototype.calculateTheHighestHoleCoveredY=function(e){var t=void 0,n=void 0,i=new Map;return e.some((function(e,r){return e.some((function(e,o){e&&!i.has(o)&&i.set(o,r);var a=i.get(o);return void 0!==a&&!e&&(n=r,t=a,!0)}))})),[n,t]},e.prototype.calculateHeight=function(e){var t=-1;return e.every((function(e,n){return!!e.every((function(e){return!e}))&&(t=n,!0)})),e.length-t-1},e.prototype.calculateTunnelsExceptUncovered=function(e,t){var n=new Set;t.every((function(e){e.forEach((function(e,t){e&&n.add(t)}))}));var i=new Set,r=new Map,o=e[0].length;e.every((function(e,t){return e.forEach((function(e,t){e&&i.add(t)})),e.forEach((function(e,t){e||i.has(t)||n.has(t)||0!==t&&!i.has(t-1)||t!==o-1&&!i.has(t+1)||r.set(t,(r.get(t)||0)+1)})),i.size<o}));var a=0,s=0;return r.forEach((function(e){e>=3&&(a+=e,s++)})),[a,s]},e.prototype.calculateFillableSpace=function(e,t){var n=new Set,i=0,r=0;return e.every((function(e){return e.forEach((function(e,t){e&&n.add(t)})),e.forEach((function(e,t){!e&&n.size>0&&!n.has(t)&&i++})),n.size<t&&(n.size>0&&r++,!0)})),[i,r]},e}(),pe=function(){function n(e,n,i,r){void 0===i&&(i=new ae(n,new me)),void 0===r&&(r=new de(n)),this.eventBus=e,this.commandBus=n,this.fallingFigurePlacingResolver=i,this.fallingFiguresPlacer=r,this.commandBus.addHandler(t.InitGame,this.initGameHandler.bind(this))}return n.prototype.initGameHandler=function(t){this.eventBus.on(e.FiguresSpawned,this.onFiguresSpawned.bind(this))},n.prototype.onFiguresSpawned=function(e){var t=this.fallingFigurePlacingResolver.resolve(e.gameData);this.fallingFiguresPlacer.place(e.gameData,t)},n}();document.addEventListener("DOMContentLoaded",(function(){var e=new a,t=new F,n=new Z(e,t);new pe(e,t),n.start()}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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Y2s6Ly8vLi9zcmMvVGV0cmlzL0NvbW1hbmRCdXMvQ29tbWFuZEJ1cy50cyIsIndlYnBhY2s6Ly8vLi9zcmMvVGV0cmlzL0ZpZ3VyZXMudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL1RldHJpcy9Db21tb24udHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL1RldHJpcy9HYW1lQ29udHJvbGxlci50cyIsIndlYnBhY2s6Ly8vLi9zcmMvVGV0cmlzL1V0aWxzL0ZpZ3VyZVBsYWNpbmdDaGVja2VyLnRzIiwid2VicGFjazovLy8uL3NyYy9UZXRyaXMvUmVuZGVyZXIvVGFibGVSZW5kZXJlci50cyIsIndlYnBhY2s6Ly8vLi9zcmMvVGV0cmlzL0ZhbGxpbmdGaWd1cmVzUHJvY2Vzc29yL1JlZ3VsYXJGYWxsaW5nRmlndXJlc1Byb2Nlc3Nvci50cyIsIndlYnBhY2s6Ly8vLi9zcmMvVGV0cmlzL1V0aWxzL0VudW1IZWxwZXIudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL1RldHJpcy9GaWd1cmVzU3Bhd25lci9BbHdheXNPbmVGaWd1cmVTcGF3bmVyLnRzIiwid2VicGFjazovLy8uL3NyYy9UZXRyaXMvTW92aW5nSGFuZGxlci9Nb3ZpbmdIYW5kbGVyLnRzIiwid2VicGFjazovLy8uL3NyYy9UZXRyaXMvTW92aW5nQ29udHJvbGxlci9Nb3ZpbmdDb250cm9sbGVyLnRzIiwid2VicGFjazovLy8uL3NyYy9UZXRyaXMvU2NvcmVDb3VudGVyL0ZhbGxUaWNrU2NvcmVDb3VudGVyLnRzIiwid2VicGFjazovLy8uL3NyYy9UZXRyaXMvTGV2ZWxDb3VudGVyL1NxdWFzaGVkUm93c0NvdW50ZXJCYXNlZExldmVsQ291bnRlci50cyIsIndlYnBhY2s6Ly8vLi9zcmMvVGV0cmlzL0NvbWJvQ291bnRlci9Db21ib0NvdW50ZXIudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL1RldHJpcy9UaW1pbmdzSGFuZGxlci9Db25zdFRpbWluZ3NIYW5kbGVyLnRzIiwid2VicGFjazovLy8uL3NyYy9UZXRyaXMvU3RhdHNDb3VudGVyL1N0YXRzQ291bnRlci50cyIsIndlYnBhY2s6Ly8vLi9zcmMvVGV0cmlzL1RldHJpc0ZhY2FkZS50cyIsIndlYnBhY2s6Ly8vLi9zcmMvVGV0cmlzU29sdmVyL0NvbW1vbi50cyIsIndlYnBhY2s6Ly8vLi9zcmMvVGV0cmlzU29sdmVyL0ZpZ3VyZVBsYWNpbmdSZXNvbHZlci50cyIsIndlYnBhY2s6Ly8vLi9zcmMvVGV0cmlzL1RpbWluZ3NIYW5kbGVyL0xldmVsQmFzZWRUaW1pbmdzSGFuZGxlci50cyIsIndlYnBhY2s6Ly8vLi9zcmMvVGV0cmlzU29sdmVyL0ZpZ3VyZVBsYWNpbmdQZXJmb3JtZXIudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL1RldHJpc1NvbHZlci9TY29yZUNhbGN1bGF0b3IudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL1RldHJpc1NvbHZlci9UZXRyaXNTb2x2ZXIudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2luZGV4LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7RmFsbGluZ0ZpZ3VyZSwgR2FtZURhdGF9IGZyb20gXCIuLi9Db21tb25cIjtcblxuZXhwb3J0IGVudW0gRXZlbnRUeXBlIHtcbiAgICBGYWxsaW5nVGlja1Byb2Nlc3NlZCxcbiAgICBHYW1lT3ZlcixcbiAgICBGaWd1cmVzTW92ZWQsXG4gICAgTGV2ZWxVcCxcbiAgICBGaWd1cmVzU3Bhd25lZCxcbn1cblxuZXhwb3J0IGludGVyZmFjZSBFdmVudCB7XG4gICAgZ2FtZURhdGE6IEdhbWVEYXRhO1xuXG4gICAgZ2V0RXZlbnRUeXBlKCk6IEV2ZW50VHlwZTtcbn1cblxuZXhwb3J0IGNsYXNzIEZhbGxUaWNrUHJvY2Vzc2VkRXZlbnQgaW1wbGVtZW50cyBFdmVudCB7XG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIHB1YmxpYyBnYW1lRGF0YTogR2FtZURhdGEsXG4gICAgICAgIHB1YmxpYyB0cmFuc2ZlcnJlZFRvTWF0cml4RmlndXJlczogRmFsbGluZ0ZpZ3VyZVtdLFxuICAgICAgICBwdWJsaWMgc3F1YXNoZWRMaW5lczogbnVtYmVyW10sXG4gICAgICAgIHB1YmxpYyBkcm9wcGVkTGluZXM6IG51bWJlcixcbiAgICApIHt9XG5cbiAgICBwdWJsaWMgZ2V0RXZlbnRUeXBlKCk6IEV2ZW50VHlwZSB7XG4gICAgICAgIHJldHVybiBFdmVudFR5cGUuRmFsbGluZ1RpY2tQcm9jZXNzZWQ7XG4gICAgfVxufVxuXG5leHBvcnQgY2xhc3MgR2FtZU92ZXJFdmVudCBpbXBsZW1lbnRzIEV2ZW50IHtcbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgcHVibGljIGdhbWVEYXRhOiBHYW1lRGF0YSxcbiAgICApIHt9XG5cbiAgICBwdWJsaWMgZ2V0RXZlbnRUeXBlKCk6IEV2ZW50VHlwZSB7XG4gICAgICAgIHJldHVybiBFdmVudFR5cGUuR2FtZU92ZXI7XG4gICAgfVxufVxuXG5leHBvcnQgY2xhc3MgRmlndXJlc01vdmVkRXZlbnQgaW1wbGVtZW50cyBFdmVudCB7XG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIHB1YmxpYyBnYW1lRGF0YTogR2FtZURhdGEsXG4gICAgKSB7fVxuXG4gICAgcHVibGljIGdldEV2ZW50VHlwZSgpOiBFdmVudFR5cGUge1xuICAgICAgICByZXR1cm4gRXZlbnRUeXBlLkZpZ3VyZXNNb3ZlZDtcbiAgICB9XG59XG5cbmV4cG9ydCBjbGFzcyBMZXZlbFVwRXZlbnQgaW1wbGVtZW50cyBFdmVudCB7XG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIHB1YmxpYyBnYW1lRGF0YTogR2FtZURhdGEsXG4gICAgKSB7fVxuXG4gICAgcHVibGljIGdldEV2ZW50VHlwZSgpOiBFdmVudFR5cGUge1xuICAgICAgICByZXR1cm4gRXZlbnRUeXBlLkxldmVsVXA7XG4gICAgfVxufVxuXG5leHBvcnQgY2xhc3MgRmlndXJlc1NwYXduZWRFdmVudCBpbXBsZW1lbnRzIEV2ZW50IHtcbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgcHVibGljIGdhbWVEYXRhOiBHYW1lRGF0YSxcbiAgICAgICAgcHVibGljIG5ld0ZpZ3VyZXM6IEZhbGxpbmdGaWd1cmVbXSxcbiAgICApIHt9XG5cbiAgICBwdWJsaWMgZ2V0RXZlbnRUeXBlKCk6IEV2ZW50VHlwZSB7XG4gICAgICAgIHJldHVybiBFdmVudFR5cGUuRmlndXJlc1NwYXduZWQ7XG4gICAgfVxufVxuXG5leHBvcnQgY2xhc3MgRXZlbnRCdXMge1xuICAgIHByaXZhdGUgaGFuZGxlcnM6IE1hcDxFdmVudFR5cGUsICgoLi4uXzogYW55KSA9PiB2b2lkKVtdPiA9IG5ldyBNYXAoKTtcblxuICAgIHB1YmxpYyBvbihldmVudDogRXZlbnRUeXBlLCBoYW5kbGVyOiAoLi4uXzogYW55KSA9PiB2b2lkLCB1bmlxdWU6IGJvb2xlYW4gPSB0cnVlKTogdm9pZCB7XG4gICAgICAgIGxldCBoYW5kbGVycyA9IHRoaXMuaGFuZGxlcnMuZ2V0KGV2ZW50KSB8fCBbXTtcbiAgICAgICAgaWYgKHVuaXF1ZSAmJiBoYW5kbGVycy5zb21lKGJvdW5kSGFuZGxlciA9PiBib3VuZEhhbmRsZXIgPT09IGhhbmRsZXIpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaGFuZGxlcnMucHVzaChoYW5kbGVyKTtcbiAgICAgICAgdGhpcy5oYW5kbGVycy5zZXQoZXZlbnQsIGhhbmRsZXJzKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgb2ZmKGV2ZW50OiBFdmVudFR5cGUsIGhhbmRsZXI6ICguLi5fOiBhbnkpID0+IHZvaWQpOiB2b2lkIHtcbiAgICAgICAgbGV0IGhhbmRsZXJzID0gdGhpcy5oYW5kbGVycy5nZXQoZXZlbnQpIHx8IFtdO1xuICAgICAgICBsZXQgaW5kZXggPSBoYW5kbGVycy5pbmRleE9mKGhhbmRsZXIpO1xuICAgICAgICBpZiAoaW5kZXggPiAwKSB7XG4gICAgICAgICAgICBoYW5kbGVycy5zcGxpY2UoaW5kZXgsIDEpXG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5oYW5kbGVycy5zZXQoZXZlbnQsIGhhbmRsZXJzKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgZmlyZShldmVudFBheWxvYWQ6IEV2ZW50KTogdm9pZCB7XG4gICAgICAgIGxldCBoYW5kbGVycyA9IHRoaXMuaGFuZGxlcnMuZ2V0KGV2ZW50UGF5bG9hZC5nZXRFdmVudFR5cGUoKSkgfHwgW107XG4gICAgICAgIGhhbmRsZXJzLmZvckVhY2goaGFuZGxlciA9PiB7aGFuZGxlcihldmVudFBheWxvYWQpfSk7XG4gICAgfVxufVxuIiwiaW1wb3J0IHtHYW1lRGF0YX0gZnJvbSBcIi4uL0NvbW1vblwiO1xuXG5leHBvcnQgZW51bSBDb21tYW5kVHlwZSB7XG4gICAgSW5pdEdhbWUsXG4gICAgUmVzdW1lR2FtZSxcbiAgICBQYXVzZUdhbWUsXG4gICAgRmlndXJlc0ZhbGxUaWNrLFxuICAgIEdhbWVPdmVyLFxuICAgIFJlbmRlcixcbiAgICBNb3ZlTGVmdCxcbiAgICBNb3ZlUmlnaHQsXG4gICAgVHVybkNsb2Nrd2lzZSxcbiAgICBNb3ZlRG93bixcbiAgICBGaWd1cmVzRmFsbERvd24sXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQ29tbWFuZCB7XG4gICAgZ2FtZURhdGE6IEdhbWVEYXRhO1xuXG4gICAgZ2V0Q29tbWFuZFR5cGUoKTogQ29tbWFuZFR5cGU7XG59XG5cbmV4cG9ydCBjbGFzcyBJbml0R2FtZUNvbW1hbmQgaW1wbGVtZW50cyBDb21tYW5kIHtcbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgcHVibGljIGdhbWVEYXRhOiBHYW1lRGF0YSxcbiAgICApIHt9XG5cbiAgICBwdWJsaWMgZ2V0Q29tbWFuZFR5cGUoKTogQ29tbWFuZFR5cGUge1xuICAgICAgICByZXR1cm4gQ29tbWFuZFR5cGUuSW5pdEdhbWU7XG4gICAgfVxufVxuXG5leHBvcnQgY2xhc3MgUmVzdW1lR2FtZUNvbW1hbmQgaW1wbGVtZW50cyBDb21tYW5kIHtcbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgcHVibGljIGdhbWVEYXRhOiBHYW1lRGF0YSxcbiAgICApIHt9XG5cbiAgICBwdWJsaWMgZ2V0Q29tbWFuZFR5cGUoKTogQ29tbWFuZFR5cGUge1xuICAgICAgICByZXR1cm4gQ29tbWFuZFR5cGUuUmVzdW1lR2FtZTtcbiAgICB9XG59XG5cbmV4cG9ydCBjbGFzcyBQYXVzZUdhbWVDb21tYW5kIGltcGxlbWVudHMgQ29tbWFuZCB7XG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIHB1YmxpYyBnYW1lRGF0YTogR2FtZURhdGEsXG4gICAgKSB7fVxuXG4gICAgcHVibGljIGdldENvbW1hbmRUeXBlKCk6IENvbW1hbmRUeXBlIHtcbiAgICAgICAgcmV0dXJuIENvbW1hbmRUeXBlLlBhdXNlR2FtZTtcbiAgICB9XG59XG5cbmV4cG9ydCBjbGFzcyBGaWd1cmVzRmFsbFRpY2tDb21tYW5kIGltcGxlbWVudHMgQ29tbWFuZCB7XG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIHB1YmxpYyBnYW1lRGF0YTogR2FtZURhdGEsXG4gICAgKSB7fVxuXG4gICAgcHVibGljIGdldENvbW1hbmRUeXBlKCk6IENvbW1hbmRUeXBlIHtcbiAgICAgICAgcmV0dXJuIENvbW1hbmRUeXBlLkZpZ3VyZXNGYWxsVGljaztcbiAgICB9XG59XG5cbmV4cG9ydCBjbGFzcyBHYW1lT3ZlckNvbW1hbmQgaW1wbGVtZW50cyBDb21tYW5kIHtcbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgcHVibGljIGdhbWVEYXRhOiBHYW1lRGF0YSxcbiAgICApIHt9XG5cbiAgICBwdWJsaWMgZ2V0Q29tbWFuZFR5cGUoKTogQ29tbWFuZFR5cGUge1xuICAgICAgICByZXR1cm4gQ29tbWFuZFR5cGUuR2FtZU92ZXI7XG4gICAgfVxufVxuXG5leHBvcnQgY2xhc3MgUmVuZGVyQ29tbWFuZCBpbXBsZW1lbnRzIENvbW1hbmQge1xuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBwdWJsaWMgZ2FtZURhdGE6IEdhbWVEYXRhLFxuICAgICkge31cblxuICAgIHB1YmxpYyBnZXRDb21tYW5kVHlwZSgpOiBDb21tYW5kVHlwZSB7XG4gICAgICAgIHJldHVybiBDb21tYW5kVHlwZS5SZW5kZXI7XG4gICAgfVxufVxuXG5leHBvcnQgY2xhc3MgTW92ZUxlZnRDb21tYW5kIGltcGxlbWVudHMgQ29tbWFuZCB7XG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIHB1YmxpYyBnYW1lRGF0YTogR2FtZURhdGEsXG4gICAgKSB7fVxuXG4gICAgcHVibGljIGdldENvbW1hbmRUeXBlKCk6IENvbW1hbmRUeXBlIHtcbiAgICAgICAgcmV0dXJuIENvbW1hbmRUeXBlLk1vdmVMZWZ0O1xuICAgIH1cbn1cblxuZXhwb3J0IGNsYXNzIE1vdmVSaWdodENvbW1hbmQgaW1wbGVtZW50cyBDb21tYW5kIHtcbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgcHVibGljIGdhbWVEYXRhOiBHYW1lRGF0YSxcbiAgICApIHt9XG5cbiAgICBwdWJsaWMgZ2V0Q29tbWFuZFR5cGUoKTogQ29tbWFuZFR5cGUge1xuICAgICAgICByZXR1cm4gQ29tbWFuZFR5cGUuTW92ZVJpZ2h0O1xuICAgIH1cbn1cblxuZXhwb3J0IGNsYXNzIFR1cm5DbG9ja3dpc2VDb21tYW5kIGltcGxlbWVudHMgQ29tbWFuZCB7XG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIHB1YmxpYyBnYW1lRGF0YTogR2FtZURhdGEsXG4gICAgKSB7fVxuXG4gICAgcHVibGljIGdldENvbW1hbmRUeXBlKCk6IENvbW1hbmRUeXBlIHtcbiAgICAgICAgcmV0dXJuIENvbW1hbmRUeXBlLlR1cm5DbG9ja3dpc2U7XG4gICAgfVxufVxuXG5leHBvcnQgY2xhc3MgTW92ZURvd25Db21tYW5kIGltcGxlbWVudHMgQ29tbWFuZCB7XG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIHB1YmxpYyBnYW1lRGF0YTogR2FtZURhdGEsXG4gICAgKSB7fVxuXG4gICAgcHVibGljIGdldENvbW1hbmRUeXBlKCk6IENvbW1hbmRUeXBlIHtcbiAgICAgICAgcmV0dXJuIENvbW1hbmRUeXBlLk1vdmVEb3duO1xuICAgIH1cbn1cblxuZXhwb3J0IGNsYXNzIERyb3BGaWd1cmVzQ29tbWFuZCBpbXBsZW1lbnRzIENvbW1hbmQge1xuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBwdWJsaWMgZ2FtZURhdGE6IEdhbWVEYXRhLFxuICAgICkge31cblxuICAgIHB1YmxpYyBnZXRDb21tYW5kVHlwZSgpOiBDb21tYW5kVHlwZSB7XG4gICAgICAgIHJldHVybiBDb21tYW5kVHlwZS5GaWd1cmVzRmFsbERvd247XG4gICAgfVxufVxuXG5leHBvcnQgY2xhc3MgQ29tbWFuZEJ1cyB7XG4gICAgcHJpdmF0ZSBoYW5kbGVyczogTWFwPENvbW1hbmRUeXBlLCAoKHBheWxvYWQ6IENvbW1hbmQpID0+IHZvaWQpW10+ID0gbmV3IE1hcCgpO1xuXG4gICAgcHVibGljIGFkZEhhbmRsZXIoZXZlbnQ6IENvbW1hbmRUeXBlLCBoYW5kbGVyOiAoLi4uXzogYW55KSA9PiB2b2lkLCB1bmlxdWU6IGJvb2xlYW4gPSB0cnVlKTogdm9pZCB7XG4gICAgICAgIGxldCBoYW5kbGVycyA9IHRoaXMuaGFuZGxlcnMuZ2V0KGV2ZW50KSB8fCBbXTtcbiAgICAgICAgaWYgKHVuaXF1ZSAmJiBoYW5kbGVycy5zb21lKGJvdW5kSGFuZGxlciA9PiBib3VuZEhhbmRsZXIgPT09IGhhbmRsZXIpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaGFuZGxlcnMucHVzaChoYW5kbGVyKTtcbiAgICAgICAgdGhpcy5oYW5kbGVycy5zZXQoZXZlbnQsIGhhbmRsZXJzKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgcmVtb3ZlSGFuZGxlcihldmVudDogQ29tbWFuZFR5cGUsIGhhbmRsZXI6ICguLi5fOiBhbnkpID0+IHZvaWQpOiB2b2lkIHtcbiAgICAgICAgbGV0IGhhbmRsZXJzID0gdGhpcy5oYW5kbGVycy5nZXQoZXZlbnQpIHx8IFtdO1xuICAgICAgICBsZXQgaW5kZXggPSBoYW5kbGVycy5pbmRleE9mKGhhbmRsZXIpO1xuICAgICAgICBpZiAoaW5kZXggPiAwKSB7XG4gICAgICAgICAgICBoYW5kbGVycy5zcGxpY2UoaW5kZXgsIDEpXG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5oYW5kbGVycy5zZXQoZXZlbnQsIGhhbmRsZXJzKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgcnVuKHBheWxvYWQ6IENvbW1hbmQpOiB2b2lkIHtcbiAgICAgICAgbGV0IGhhbmRsZXJzID0gdGhpcy5oYW5kbGVycy5nZXQocGF5bG9hZC5nZXRDb21tYW5kVHlwZSgpKSB8fCBbXTtcbiAgICAgICAgaGFuZGxlcnMuZm9yRWFjaChoYW5kbGVyID0+IHtoYW5kbGVyKHBheWxvYWQpfSk7XG4gICAgfVxufVxuIiwiZXhwb3J0IGVudW0gRmlndXJlVHVyblN0YXRlIHtcbiAgICBPbmUsXG4gICAgVHdvLFxuICAgIFRocmVlLFxuICAgIEZvdXIsXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgRmlndXJlIHtcbiAgICAvKipcbiAgICAgKiBBbnkgZmlndXJlIG11c3QgYmUgYWJsZSB0byB0dXJuIDQgdGltZXMgaW4gMiBkaW1lbnNpb25zLlxuICAgICAqIEFsbCB0dXJucyBhcmUgY2xvY2t3aXNlLlxuICAgICAqL1xuICAgIGdldFR1cm4oZmlndXJlVHVyblN0YXRlOiBGaWd1cmVUdXJuU3RhdGUpOiBib29sZWFuW11bXTtcbiAgICBnZXRGaXJzdFR1cm4oKTogYm9vbGVhbltdW107XG4gICAgZ2V0U2Vjb25kVHVybigpOiBib29sZWFuW11bXTtcbiAgICBnZXRUaGlyZFR1cm4oKTogYm9vbGVhbltdW107XG4gICAgZ2V0Rm9ydGhUdXJuKCk6IGJvb2xlYW5bXVtdO1xufVxuXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgQWJzdHJhY3RGaWd1cmUgaW1wbGVtZW50cyBGaWd1cmV7XG4gICAgcHVibGljIGFic3RyYWN0IGdldEZpcnN0VHVybigpOiBib29sZWFuW11bXTtcbiAgICBwdWJsaWMgYWJzdHJhY3QgZ2V0U2Vjb25kVHVybigpOiBib29sZWFuW11bXTtcbiAgICBwdWJsaWMgYWJzdHJhY3QgZ2V0VGhpcmRUdXJuKCk6IGJvb2xlYW5bXVtdO1xuICAgIHB1YmxpYyBhYnN0cmFjdCBnZXRGb3J0aFR1cm4oKTogYm9vbGVhbltdW107XG5cbiAgICBnZXRUdXJuKGZpZ3VyZVR1cm5TdGF0ZTogRmlndXJlVHVyblN0YXRlKTogYm9vbGVhbltdW10ge1xuICAgICAgICBzd2l0Y2ggKGZpZ3VyZVR1cm5TdGF0ZSkge1xuICAgICAgICAgICAgY2FzZSBGaWd1cmVUdXJuU3RhdGUuT25lOlxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmdldEZpcnN0VHVybigpO1xuICAgICAgICAgICAgY2FzZSBGaWd1cmVUdXJuU3RhdGUuVHdvOlxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmdldFNlY29uZFR1cm4oKTtcbiAgICAgICAgICAgIGNhc2UgRmlndXJlVHVyblN0YXRlLlRocmVlOlxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmdldFRoaXJkVHVybigpO1xuICAgICAgICAgICAgY2FzZSBGaWd1cmVUdXJuU3RhdGUuRm91cjpcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5nZXRGb3J0aFR1cm4oKTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuLyoqXG4gKiBUaGlzIGNsYXNzIGdpdmVzIGFuIGVhc3kgd2F5IHRvIGRlZmluZSBmaWd1cmVzIGZvciB0ZXRyaXMuXG4gKiBKdXN0IGltcGxlbWVudCB0aGUgZ2V0RmlndXJlIG1ldGhvZCBhbmQgcmV0dXJuIGZpZ3VyZSBsaWtlIHRoaXM6XG4gKiBgYGAodHMpXG4gKiBwcm90ZWN0ZWQgZ2V0RmlndXJlKCk6IGJvb2xlYW5bXVtdIHtcbiAqICAgICByZXR1cm4gW1xuICogICAgICAgICBbdHJ1ZSwgIHRydWUsIHRydWVdLFxuICogICAgICAgICBbZmFsc2UsIHRydWUsIGZhbHNlXSxcbiAqICAgICAgICAgW3RydWUsICB0cnVlLCB0cnVlXSxcbiAqICAgICBdO1xuICogfVxuICogYGBgXG4gKlxuICogT3IgZGVmaW5lIGl0IGxpa2UgdGhpcyBmb3IgbW9yZSB2aXN1YWwgcHJlc2VudGF0aW9uOlxuICogYGBgKHRzKVxuICogcHJvdGVjdGVkIGdldEZpZ3VyZSgpOiBib29sZWFuW11bXSB7XG4gKiAgICAgcmV0dXJuIFtcbiAqICAgICAgICAgXCIjIyNcIi5zcGxpdChcIlwiKS5tYXAoaXRlbSA9PiBpdGVtID09PSBcIiNcIiksXG4gKiAgICAgICAgIFwiLSMtXCIuc3BsaXQoXCJcIikubWFwKGl0ZW0gPT4gaXRlbSA9PT0gXCIjXCIpLFxuICogICAgICAgICBcIiMjI1wiLnNwbGl0KFwiXCIpLm1hcChpdGVtID0+IGl0ZW0gPT09IFwiI1wiKSxcbiAqICAgICBdO1xuICogfVxuICogYGBgXG4gKi9cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBTaW1wbHlSb3RhdGFibGVGaWd1cmUgZXh0ZW5kcyBBYnN0cmFjdEZpZ3VyZSB7XG4gICAgcHJvdGVjdGVkIGFic3RyYWN0IGdldEZpZ3VyZSgpOiBib29sZWFuW11bXTtcblxuICAgIHByaXZhdGUgZ2V0Tm9ybWFsaXplZEZpZ3VyZSgpOiBib29sZWFuW11bXSB7XG4gICAgICAgIGxldCBmaWd1cmUgPSB0aGlzLmdldEZpZ3VyZSgpO1xuICAgICAgICBsZXQgdGhlTG9uZ2VzdFJvd1NpemUgPSBmaWd1cmUucmVkdWNlKFxuICAgICAgICAgICAgKHByZXZpb3VzLCBjdXJyZW50KSA9PiBNYXRoLm1heChwcmV2aW91cywgY3VycmVudC5sZW5ndGgpLFxuICAgICAgICAgICAgMFxuICAgICAgICApO1xuICAgICAgICByZXR1cm4gZmlndXJlLm1hcChyb3cgPT4ge1xuICAgICAgICAgICAgbGV0IG9yaWdpbmFsTGVuZ3RoID0gcm93Lmxlbmd0aDtcbiAgICAgICAgICAgIHJvdy5sZW5ndGggPSB0aGVMb25nZXN0Um93U2l6ZTtcbiAgICAgICAgICAgIHJldHVybiByb3cuZmlsbChmYWxzZSwgb3JpZ2luYWxMZW5ndGggLSAxLCB0aGVMb25nZXN0Um93U2l6ZSAtIDEpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0Rmlyc3RUdXJuKCk6IGJvb2xlYW5bXVtdIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0Tm9ybWFsaXplZEZpZ3VyZSgpO1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXRTZWNvbmRUdXJuKCk6IGJvb2xlYW5bXVtdIHtcbiAgICAgICAgbGV0IG9yaWdpbmFsRmlndXJlID0gdGhpcy5nZXROb3JtYWxpemVkRmlndXJlKCk7XG4gICAgICAgIGxldCB0dXJuZWRGaWd1cmU6IGJvb2xlYW5bXVtdID0gW107XG4gICAgICAgIGxldCBvcmlnaW5hbEZpZ3VyZUhlaWdodCA9IG9yaWdpbmFsRmlndXJlLmxlbmd0aDtcbiAgICAgICAgbGV0IG9yaWdpbmFsRmlndXJlV2lkdGggPSBvcmlnaW5hbEZpZ3VyZVswXS5sZW5ndGg7XG4gICAgICAgIGZvciAobGV0IHggPSAwOyB4IDwgb3JpZ2luYWxGaWd1cmVXaWR0aDsgeCsrKSB7XG4gICAgICAgICAgICB0dXJuZWRGaWd1cmVbeF0gPSBuZXcgQXJyYXkob3JpZ2luYWxGaWd1cmVIZWlnaHQpLmZpbGwoZmFsc2UpO1xuICAgICAgICAgICAgZm9yIChsZXQgeSA9IDA7IHkgPCBvcmlnaW5hbEZpZ3VyZUhlaWdodDsgeSsrKSB7XG4gICAgICAgICAgICAgICAgdHVybmVkRmlndXJlW3hdW29yaWdpbmFsRmlndXJlSGVpZ2h0IC0geSAtIDFdID0gb3JpZ2luYWxGaWd1cmVbeV1beF07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHR1cm5lZEZpZ3VyZTtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0VGhpcmRUdXJuKCk6IGJvb2xlYW5bXVtdIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0Rmlyc3RUdXJuKCkucmV2ZXJzZSgpLm1hcChyb3cgPT4gcm93LnJldmVyc2UoKSk7XG4gICAgfVxuXG4gICAgcHVibGljIGdldEZvcnRoVHVybigpOiBib29sZWFuW11bXSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldFNlY29uZFR1cm4oKS5yZXZlcnNlKCkubWFwKHJvdyA9PiByb3cucmV2ZXJzZSgpKTtcbiAgICB9XG59XG5cbmV4cG9ydCBjbGFzcyBURmlndXJlIGV4dGVuZHMgU2ltcGx5Um90YXRhYmxlRmlndXJlIHtcbiAgICBwcm90ZWN0ZWQgZ2V0RmlndXJlKCk6IGJvb2xlYW5bXVtdIHtcbiAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgIFwiIyMjXCIuc3BsaXQoXCJcIikubWFwKGl0ZW0gPT4gaXRlbSA9PT0gXCIjXCIpLFxuICAgICAgICAgICAgXCItIy1cIi5zcGxpdChcIlwiKS5tYXAoaXRlbSA9PiBpdGVtID09PSBcIiNcIiksXG4gICAgICAgIF07XG4gICAgfVxufVxuXG5leHBvcnQgY2xhc3MgUmlnaHRMRmlndXJlIGV4dGVuZHMgU2ltcGx5Um90YXRhYmxlRmlndXJlIHtcbiAgICBwcm90ZWN0ZWQgZ2V0RmlndXJlKCk6IGJvb2xlYW5bXVtdIHtcbiAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgIFwiIyMjXCIuc3BsaXQoXCJcIikubWFwKGl0ZW0gPT4gaXRlbSA9PT0gXCIjXCIpLFxuICAgICAgICAgICAgXCItLSNcIi5zcGxpdChcIlwiKS5tYXAoaXRlbSA9PiBpdGVtID09PSBcIiNcIiksXG4gICAgICAgIF07XG4gICAgfVxufVxuXG5leHBvcnQgY2xhc3MgTGVmdExGaWd1cmUgZXh0ZW5kcyBTaW1wbHlSb3RhdGFibGVGaWd1cmUge1xuICAgIHByb3RlY3RlZCBnZXRGaWd1cmUoKTogYm9vbGVhbltdW10ge1xuICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgXCIjIyNcIi5zcGxpdChcIlwiKS5tYXAoaXRlbSA9PiBpdGVtID09PSBcIiNcIiksXG4gICAgICAgICAgICBcIiMtLVwiLnNwbGl0KFwiXCIpLm1hcChpdGVtID0+IGl0ZW0gPT09IFwiI1wiKSxcbiAgICAgICAgXTtcbiAgICB9XG59XG5cbmV4cG9ydCBjbGFzcyBTcXVhcmVGaWd1cmUgZXh0ZW5kcyBTaW1wbHlSb3RhdGFibGVGaWd1cmUge1xuICAgIHByb3RlY3RlZCBnZXRGaWd1cmUoKTogYm9vbGVhbltdW10ge1xuICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgXCIjI1wiLnNwbGl0KFwiXCIpLm1hcChpdGVtID0+IGl0ZW0gPT09IFwiI1wiKSxcbiAgICAgICAgICAgIFwiIyNcIi5zcGxpdChcIlwiKS5tYXAoaXRlbSA9PiBpdGVtID09PSBcIiNcIiksXG4gICAgICAgIF07XG4gICAgfVxufVxuXG5leHBvcnQgY2xhc3MgU3RpY2tGaWd1cmUgZXh0ZW5kcyBTaW1wbHlSb3RhdGFibGVGaWd1cmUge1xuICAgIHByb3RlY3RlZCBnZXRGaWd1cmUoKTogYm9vbGVhbltdW10ge1xuICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgXCIjIyMjXCIuc3BsaXQoXCJcIikubWFwKGl0ZW0gPT4gaXRlbSA9PT0gXCIjXCIpLFxuICAgICAgICBdO1xuICAgIH1cbn1cblxuZXhwb3J0IGNsYXNzIExaRmlndXJlIGV4dGVuZHMgU2ltcGx5Um90YXRhYmxlRmlndXJlIHtcbiAgICBwcm90ZWN0ZWQgZ2V0RmlndXJlKCk6IGJvb2xlYW5bXVtdIHtcbiAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgIFwiIyMtXCIuc3BsaXQoXCJcIikubWFwKGl0ZW0gPT4gaXRlbSA9PT0gXCIjXCIpLFxuICAgICAgICAgICAgXCItIyNcIi5zcGxpdChcIlwiKS5tYXAoaXRlbSA9PiBpdGVtID09PSBcIiNcIiksXG4gICAgICAgIF07XG4gICAgfVxufVxuXG5cbmV4cG9ydCBjbGFzcyBSWkZpZ3VyZSBleHRlbmRzIFNpbXBseVJvdGF0YWJsZUZpZ3VyZSB7XG4gICAgcHJvdGVjdGVkIGdldEZpZ3VyZSgpOiBib29sZWFuW11bXSB7XG4gICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICBcIi0jI1wiLnNwbGl0KFwiXCIpLm1hcChpdGVtID0+IGl0ZW0gPT09IFwiI1wiKSxcbiAgICAgICAgICAgIFwiIyMtXCIuc3BsaXQoXCJcIikubWFwKGl0ZW0gPT4gaXRlbSA9PT0gXCIjXCIpLFxuICAgICAgICBdO1xuICAgIH1cbn1cbiIsImltcG9ydCB7RmlndXJlLCBGaWd1cmVUdXJuU3RhdGUsIExlZnRMRmlndXJlLCBMWkZpZ3VyZSwgUmlnaHRMRmlndXJlLCBSWkZpZ3VyZSwgU3F1YXJlRmlndXJlLCBTdGlja0ZpZ3VyZSwgVEZpZ3VyZX0gZnJvbSBcIi4vRmlndXJlc1wiO1xuXG4vKipcbiAqIHggZm9yIGhvcml6b250YWwgcG9zaXRpb25pbmdcbiAqIHkgZm9yIHZlcnRpY2FsIHBvc2l0aW9uaW5nXG4gKi9cbmV4cG9ydCBjbGFzcyBDb29yZGluYXRlIHtcbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgcHVibGljIHg6IG51bWJlcixcbiAgICAgICAgcHVibGljIHk6IG51bWJlcixcbiAgICApIHt9XG59XG5cbmV4cG9ydCBjbGFzcyBGYWxsaW5nRmlndXJlIHtcbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgcHVibGljIGZpZ3VyZTogRmlndXJlLFxuICAgICAgICBwdWJsaWMgcG9zaXRpb246IENvb3JkaW5hdGUsXG4gICAgICAgIHB1YmxpYyB0dXJuU3RhdGU6IEZpZ3VyZVR1cm5TdGF0ZSxcbiAgICAgICAgcHVibGljIGNvbG9yOiBzdHJpbmd8dW5kZWZpbmVkID0gdW5kZWZpbmVkLFxuICAgICkge31cbn1cblxuZXhwb3J0IGNsYXNzIEdhbWVTZXR0aW5ncyB7XG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIHB1YmxpYyBmaWVsZFdpZHRoOiBudW1iZXIsXG4gICAgICAgIHB1YmxpYyBmaWVsZEhlaWdodDogbnVtYmVyLFxuICAgICAgICBwdWJsaWMgZmlndXJlczogRmlndXJlW10sXG4gICAgKSB7fVxufVxuXG5leHBvcnQgY2xhc3MgU3RhdHMge1xuICAgIHB1YmxpYyBmaWd1cmVzRmFsbGVuID0gMDtcbiAgICBwdWJsaWMgbGluZXNTcXVhc2hlZCA9IDA7XG59XG5cbmV4cG9ydCBjbGFzcyBHYW1lRGF0YSB7XG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIHB1YmxpYyBpc0luaXRpYWxpemVkOiBib29sZWFuID0gZmFsc2UsXG4gICAgICAgIHB1YmxpYyBpc0dhbWVPdmVyOiBib29sZWFuID0gZmFsc2UsXG4gICAgICAgIHB1YmxpYyBmYWxsaW5nRmlndXJlczogRmFsbGluZ0ZpZ3VyZVtdID0gW10sXG4gICAgICAgIHB1YmxpYyBtYXRyaXg6IGJvb2xlYW5bXVtdID0gW10sXG4gICAgICAgIHB1YmxpYyBuZXh0VGlja1RpbWVvdXRJZDogUmV0dXJuVHlwZTx0eXBlb2Ygc2V0VGltZW91dD4gPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgfSksXG4gICAgICAgIHB1YmxpYyBzZXR0aW5nczogR2FtZVNldHRpbmdzLFxuICAgICAgICBwdWJsaWMgbGV2ZWw6IG51bWJlciA9IDEsXG4gICAgICAgIHB1YmxpYyBzY29yZTogbnVtYmVyID0gMCxcbiAgICAgICAgcHVibGljIGNvbWJvOiBudW1iZXIgPSAwLFxuICAgICAgICBwdWJsaWMgc3RhdHM6IFN0YXRzID0gbmV3IFN0YXRzKCksXG4gICAgKSB7fVxuXG4gICAgc3RhdGljIG1ha2VTaW1wbGUod2lkdGg6IG51bWJlciA9IDEwLCBoZWlnaHQ6IG51bWJlciA9IDIwKTogR2FtZURhdGEge1xuICAgICAgICByZXR1cm4gbmV3IEdhbWVEYXRhKFxuICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgIFtdLFxuICAgICAgICAgICAgbmV3IEFycmF5KGhlaWdodCkuZmlsbChbXSlcbiAgICAgICAgICAgICAgICAubWFwKF8gPT4gbmV3IEFycmF5KHdpZHRoKS5maWxsKGZhbHNlKSksXG4gICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgbmV3IEdhbWVTZXR0aW5ncyhcbiAgICAgICAgICAgICAgICB3aWR0aCxcbiAgICAgICAgICAgICAgICBoZWlnaHQsXG4gICAgICAgICAgICAgICAgW1xuICAgICAgICAgICAgICAgICAgICBuZXcgVEZpZ3VyZSgpLFxuICAgICAgICAgICAgICAgICAgICBuZXcgUmlnaHRMRmlndXJlKCksXG4gICAgICAgICAgICAgICAgICAgIG5ldyBMZWZ0TEZpZ3VyZSgpLFxuICAgICAgICAgICAgICAgICAgICBuZXcgU3F1YXJlRmlndXJlKCksXG4gICAgICAgICAgICAgICAgICAgIG5ldyBTdGlja0ZpZ3VyZSgpLFxuICAgICAgICAgICAgICAgICAgICBuZXcgTFpGaWd1cmUoKSxcbiAgICAgICAgICAgICAgICAgICAgbmV3IFJaRmlndXJlKCksXG4gICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICksXG4gICAgICAgICk7XG4gICAgfVxufVxuIiwiaW1wb3J0IHtUaW1pbmdzSGFuZGxlcn0gZnJvbSBcIi4vVGltaW5nc0hhbmRsZXIvVGltaW5nc0hhbmRsZXJcIjtcbmltcG9ydCB7RXZlbnRCdXMsIEV2ZW50VHlwZSwgRmFsbFRpY2tQcm9jZXNzZWRFdmVudCwgRmlndXJlc01vdmVkRXZlbnQsIEdhbWVPdmVyRXZlbnR9IGZyb20gXCIuL0V2ZW50QnVzL0V2ZW50QnVzXCI7XG5pbXBvcnQge0NvbW1hbmRCdXMsIENvbW1hbmRUeXBlLCBGaWd1cmVzRmFsbFRpY2tDb21tYW5kLCBJbml0R2FtZUNvbW1hbmQsIFBhdXNlR2FtZUNvbW1hbmQsIFJlbmRlckNvbW1hbmQsIFJlc3VtZUdhbWVDb21tYW5kfSBmcm9tIFwiLi9Db21tYW5kQnVzL0NvbW1hbmRCdXNcIjtcbmltcG9ydCB7R2FtZURhdGF9IGZyb20gXCIuL0NvbW1vblwiO1xuXG5leHBvcnQgY2xhc3MgR2FtZUNvbnRyb2xsZXIge1xuICAgIHByaXZhdGUgZ2FtZURhdGE6IEdhbWVEYXRhID0gR2FtZURhdGEubWFrZVNpbXBsZSgpO1xuXG4gICAgY29uc3RydWN0b3IgKFxuICAgICAgICBwcml2YXRlIHRpbWluZ3NIYW5kbGVyOiBUaW1pbmdzSGFuZGxlcixcbiAgICAgICAgcHJpdmF0ZSBldmVudEJ1czogRXZlbnRCdXMsXG4gICAgICAgIHByaXZhdGUgY29tbWFuZEJ1czogQ29tbWFuZEJ1cyxcbiAgICApIHtcbiAgICAgICAgdGhpcy5jb21tYW5kQnVzLmFkZEhhbmRsZXIoQ29tbWFuZFR5cGUuSW5pdEdhbWUsIHRoaXMuaW5pdEdhbWVIYW5kbGVyLmJpbmQodGhpcykpO1xuICAgICAgICB0aGlzLmNvbW1hbmRCdXMuYWRkSGFuZGxlcihDb21tYW5kVHlwZS5SZXN1bWVHYW1lLCB0aGlzLnJlc3VtZUdhbWVIYW5kbGVyLmJpbmQodGhpcykpO1xuICAgICAgICB0aGlzLmNvbW1hbmRCdXMuYWRkSGFuZGxlcihDb21tYW5kVHlwZS5QYXVzZUdhbWUsIHRoaXMucGF1c2VHYW1lSGFuZGxlci5iaW5kKHRoaXMpKTtcbiAgICAgICAgdGhpcy5jb21tYW5kQnVzLmFkZEhhbmRsZXIoQ29tbWFuZFR5cGUuR2FtZU92ZXIsIHRoaXMuZ2FtZU92ZXJIYW5kbGVyLmJpbmQodGhpcykpO1xuICAgIH1cblxuICAgIHByaXZhdGUgaW5pdEdhbWVIYW5kbGVyKGNvbW1hbmQ6IEluaXRHYW1lQ29tbWFuZCk6IHZvaWQge1xuICAgICAgICB0aGlzLmdhbWVEYXRhID0gY29tbWFuZC5nYW1lRGF0YTtcbiAgICAgICAgdGhpcy5nYW1lRGF0YS5pc0luaXRpYWxpemVkID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5ldmVudEJ1cy5vbihFdmVudFR5cGUuRmFsbGluZ1RpY2tQcm9jZXNzZWQsIHRoaXMub25GYWxsVGlja1Byb2Nlc3NlZC5iaW5kKHRoaXMpKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIHJlc3VtZUdhbWVIYW5kbGVyKGNvbW1hbmQ6IFJlc3VtZUdhbWVDb21tYW5kKTogdm9pZCB7XG4gICAgICAgIGlmICh0aGlzLmdhbWVEYXRhLmlzR2FtZU92ZXIpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXRoaXMuZ2FtZURhdGEuaXNJbml0aWFsaXplZCkge1xuICAgICAgICAgICAgdGhpcy5jb21tYW5kQnVzLnJ1bihuZXcgSW5pdEdhbWVDb21tYW5kKGNvbW1hbmQuZ2FtZURhdGEpKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmZhbGxUaWNrKCk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBwYXVzZUdhbWVIYW5kbGVyKGNvbW1hbmQ6IFBhdXNlR2FtZUNvbW1hbmQpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5nYW1lRGF0YSA9IGNvbW1hbmQuZ2FtZURhdGE7XG4gICAgICAgIGNsZWFyVGltZW91dCh0aGlzLmdhbWVEYXRhLm5leHRUaWNrVGltZW91dElkKTtcbiAgICAgICAgdGhpcy5jb21tYW5kQnVzLnJ1bihuZXcgUmVuZGVyQ29tbWFuZCh0aGlzLmdhbWVEYXRhKSk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBnYW1lT3ZlckhhbmRsZXIoKTogdm9pZCB7XG4gICAgICAgIHRoaXMuZ2FtZURhdGEuaXNJbml0aWFsaXplZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLmdhbWVEYXRhLmlzR2FtZU92ZXIgPSB0cnVlO1xuICAgICAgICBjbGVhclRpbWVvdXQodGhpcy5nYW1lRGF0YS5uZXh0VGlja1RpbWVvdXRJZCk7XG4gICAgICAgIHRoaXMuZXZlbnRCdXMuZmlyZShuZXcgR2FtZU92ZXJFdmVudCh0aGlzLmdhbWVEYXRhKSk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBmYWxsVGljaygpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5jb21tYW5kQnVzLnJ1bihuZXcgRmlndXJlc0ZhbGxUaWNrQ29tbWFuZCh0aGlzLmdhbWVEYXRhKSk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBvbkZhbGxUaWNrUHJvY2Vzc2VkKGV2ZW50OiBGYWxsVGlja1Byb2Nlc3NlZEV2ZW50KTogdm9pZCB7XG4gICAgICAgIGNsZWFyVGltZW91dCh0aGlzLmdhbWVEYXRhLm5leHRUaWNrVGltZW91dElkKTtcbiAgICAgICAgaWYgKCF0aGlzLmdhbWVEYXRhLmlzR2FtZU92ZXIpIHtcbiAgICAgICAgICAgIHRoaXMuZ2FtZURhdGEubmV4dFRpY2tUaW1lb3V0SWQgPSBzZXRUaW1lb3V0KFxuICAgICAgICAgICAgICAgIHRoaXMuZmFsbFRpY2suYmluZCh0aGlzKSxcbiAgICAgICAgICAgICAgICB0aGlzLnRpbWluZ3NIYW5kbGVyLmdldERlbGF5Rm9yTmV4dFRpY2tNcyh0aGlzLmdhbWVEYXRhKVxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbiIsImltcG9ydCB7Q29vcmRpbmF0ZX0gZnJvbSBcIi4uL0NvbW1vblwiO1xuXG5leHBvcnQgY2xhc3MgRmlndXJlUGxhY2luZ0NoZWNrZXIge1xuICAgIHB1YmxpYyBzdGF0aWMgY2FuRmlndXJlQmVQbGFjZWQodGFyZ2V0RmlndXJlTWF0cml4OiBib29sZWFuW11bXSwgdGFyZ2V0UG9zaXRpb246IENvb3JkaW5hdGUsIG1hdHJpeDogYm9vbGVhbltdW10pOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRhcmdldEZpZ3VyZU1hdHJpeC5ldmVyeSgocm93LCB5KSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gcm93LmV2ZXJ5KCh2YWx1ZSwgeCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IHJlYWxZID0gdGFyZ2V0UG9zaXRpb24ueSArIHk7XG4gICAgICAgICAgICAgICAgY29uc3QgcmVhbFggPSB0YXJnZXRQb3NpdGlvbi54ICsgeDtcbiAgICAgICAgICAgICAgICByZXR1cm4gIXZhbHVlXG4gICAgICAgICAgICAgICAgICAgIHx8IChcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlYWxZIDwgMFxuICAgICAgICAgICAgICAgICAgICAgICAgJiYgcmVhbFggPj0gMFxuICAgICAgICAgICAgICAgICAgICAgICAgJiYgcmVhbFggPD0gbWF0cml4WzBdLmxlbmd0aCAtIDFcbiAgICAgICAgICAgICAgICAgICAgKSB8fCAoXG4gICAgICAgICAgICAgICAgICAgICAgICByZWFsWSBpbiBtYXRyaXhcbiAgICAgICAgICAgICAgICAgICAgICAgICYmIHJlYWxYIGluIG1hdHJpeFtyZWFsWV1cbiAgICAgICAgICAgICAgICAgICAgICAgICYmICFtYXRyaXhbcmVhbFldW3JlYWxYXVxuICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cbn1cbiIsImltcG9ydCB7Q29tbWFuZEJ1cywgQ29tbWFuZFR5cGUsIEluaXRHYW1lQ29tbWFuZCwgUmVuZGVyQ29tbWFuZH0gZnJvbSBcIi4uL0NvbW1hbmRCdXMvQ29tbWFuZEJ1c1wiO1xuaW1wb3J0IHtFdmVudEJ1cywgRXZlbnRUeXBlLCBGYWxsVGlja1Byb2Nlc3NlZEV2ZW50LCBHYW1lT3ZlckV2ZW50fSBmcm9tIFwiLi4vRXZlbnRCdXMvRXZlbnRCdXNcIjtcbmltcG9ydCB7RmlndXJlUGxhY2luZ0NoZWNrZXJ9IGZyb20gXCIuLi9VdGlscy9GaWd1cmVQbGFjaW5nQ2hlY2tlclwiO1xuaW1wb3J0IHtDb29yZGluYXRlLCBGYWxsaW5nRmlndXJlLCBHYW1lRGF0YX0gZnJvbSBcIi4uL0NvbW1vblwiO1xuXG5leHBvcnQgY2xhc3MgVGFibGVSZW5kZXJlckNlbGxDb2xvclNldHRpbmdzIHtcbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgcHVibGljIGZpbGxlZDogc3RyaW5nfG51bGwsXG4gICAgICAgIHB1YmxpYyBmaWxsZWRHYW1lT3Zlcjogc3RyaW5nfG51bGwsXG4gICAgICAgIHB1YmxpYyBlbXB0eTogc3RyaW5nfG51bGwsXG4gICAgKSB7fVxufVxuXG5leHBvcnQgY2xhc3MgVGFibGVSZW5kZXJlclNldHRpbmdzIHtcbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgcHVibGljIGNvbnRhaW5lckVsZW1lbnQ6IEhUTUxFbGVtZW50LFxuICAgICAgICBwdWJsaWMgcmVuZGVyUHJvamVjdGlvbkZpZ3VyZXM6IGJvb2xlYW4gPSB0cnVlLFxuICAgICAgICBwdWJsaWMgbWF0cml4Q2VsbENvbG9yczogVGFibGVSZW5kZXJlckNlbGxDb2xvclNldHRpbmdzID0gbmV3IFRhYmxlUmVuZGVyZXJDZWxsQ29sb3JTZXR0aW5ncyhcbiAgICAgICAgICAgICcjMDA3NDAwJyxcbiAgICAgICAgICAgICcjNzgwMDAwJyxcbiAgICAgICAgICAgICcjZmZmJyxcbiAgICAgICAgKSxcbiAgICAgICAgcHVibGljIGZhbGxpbmdGaWd1cmVDZWxsQ29sb3JzOiBUYWJsZVJlbmRlcmVyQ2VsbENvbG9yU2V0dGluZ3MgPSBuZXcgVGFibGVSZW5kZXJlckNlbGxDb2xvclNldHRpbmdzKFxuICAgICAgICAgICAgJyMwMDc0MDAnLFxuICAgICAgICAgICAgJyM3ODAwMDAnLFxuICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgKSxcbiAgICAgICAgcHVibGljIHByb2plY3Rpb25GaWd1cmVDZWxsQ29sb3JzOiBUYWJsZVJlbmRlcmVyQ2VsbENvbG9yU2V0dGluZ3MgPSBuZXcgVGFibGVSZW5kZXJlckNlbGxDb2xvclNldHRpbmdzKFxuICAgICAgICAgICAgJyNiOGU1ZTMnLFxuICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgIG51bGwsXG4gICAgICAgICksXG4gICAgKSB7fVxufVxuXG5jbGFzcyBDZWxsQ29sb3JzIHtcbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgcHVibGljIGZpbGxlZDogc3RyaW5nfG51bGwsXG4gICAgICAgIHB1YmxpYyBlbXB0eTogc3RyaW5nfG51bGwsXG4gICAgKSB7fVxufVxuXG5leHBvcnQgY2xhc3MgVGFibGVSZW5kZXJlciB7XG4gICAgcHJpdmF0ZSBjZWxsc0h0bWxFbGVtZW50c01hcDogSFRNTEVsZW1lbnRbXVtdID0gW107XG4gICAgcHJpdmF0ZSB0YWJsZTogSFRNTEVsZW1lbnR8dW5kZWZpbmVkO1xuICAgIHByaXZhdGUgc2NvcmVEaXNwbGF5OiBIVE1MRWxlbWVudHx1bmRlZmluZWQ7XG5cbiAgICBjb25zdHJ1Y3RvciAoXG4gICAgICAgIHByaXZhdGUgcmVuZGVyU2V0dGluZ3M6IFRhYmxlUmVuZGVyZXJTZXR0aW5ncyxcbiAgICAgICAgcHJpdmF0ZSBjb21tYW5kQnVzOiBDb21tYW5kQnVzLFxuICAgICAgICBwcml2YXRlIGV2ZW50QnVzOiBFdmVudEJ1cyxcbiAgICApIHtcbiAgICAgICAgY29tbWFuZEJ1cy5hZGRIYW5kbGVyKENvbW1hbmRUeXBlLkluaXRHYW1lLCB0aGlzLmluaXRIYW5kbGVyLmJpbmQodGhpcykpO1xuICAgICAgICBjb21tYW5kQnVzLmFkZEhhbmRsZXIoQ29tbWFuZFR5cGUuUmVuZGVyLCB0aGlzLnJlbmRlckNvbW1hbmRIYW5kbGVyLmJpbmQodGhpcykpO1xuICAgIH1cblxuICAgIHByaXZhdGUgaW5pdEhhbmRsZXIoY29tbWFuZDogSW5pdEdhbWVDb21tYW5kKTogdm9pZCB7XG4gICAgICAgIHRoaXMudGFibGUgPSBUYWJsZVJlbmRlcmVyLmNyZWF0ZUh0bWxFbGVtZW50KCc8ZGl2IHN0eWxlPVwiZmxvYXQ6IGxlZnQ7IGRpc3BsYXk6IHRhYmxlOyBib3JkZXItY29sbGFwc2U6IGNvbGxhcHNlXCI+PC9kaXY+Jyk7XG4gICAgICAgIHRoaXMuY2VsbHNIdG1sRWxlbWVudHNNYXAgPSBbXTtcbiAgICAgICAgZm9yIChsZXQgeSA9IDA7IHkgPCBjb21tYW5kLmdhbWVEYXRhLnNldHRpbmdzLmZpZWxkSGVpZ2h0OyB5KyspIHtcbiAgICAgICAgICAgIGxldCByb3cgPSBUYWJsZVJlbmRlcmVyLmNyZWF0ZUh0bWxFbGVtZW50KCc8ZGl2IHN0eWxlPVwiZGlzcGxheTogdGFibGUtcm93XCI+PC9kaXY+Jyk7XG4gICAgICAgICAgICB0aGlzLmNlbGxzSHRtbEVsZW1lbnRzTWFwW3ldID0gW107XG4gICAgICAgICAgICBmb3IgKGxldCB4ID0gMDsgeCA8IGNvbW1hbmQuZ2FtZURhdGEuc2V0dGluZ3MuZmllbGRXaWR0aDsgeCsrKSB7XG4gICAgICAgICAgICAgICAgbGV0IGNlbGwgPSBUYWJsZVJlbmRlcmVyLmNyZWF0ZUh0bWxFbGVtZW50KCc8ZGl2IHN0eWxlPVwiZGlzcGxheTogdGFibGUtY2VsbDsgYm9yZGVyOiAxcHggc29saWQgI2NjYzsgd2lkdGg6IDIwcHg7IGhlaWdodDogMjBweFwiPjwvZGl2PicpO1xuICAgICAgICAgICAgICAgIHRoaXMuY2VsbHNIdG1sRWxlbWVudHNNYXBbeV1beF0gPSBjZWxsO1xuICAgICAgICAgICAgICAgIHJvdy5hcHBlbmRDaGlsZChjZWxsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMudGFibGUuYXBwZW5kQ2hpbGQocm93KTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnJlbmRlclNldHRpbmdzLmNvbnRhaW5lckVsZW1lbnQuaW5uZXJIVE1MID0gJyc7XG4gICAgICAgIHRoaXMucmVuZGVyU2V0dGluZ3MuY29udGFpbmVyRWxlbWVudC5hcHBlbmRDaGlsZCh0aGlzLnRhYmxlKTtcblxuICAgICAgICB0aGlzLnNjb3JlRGlzcGxheSA9IFRhYmxlUmVuZGVyZXIuY3JlYXRlSHRtbEVsZW1lbnQoXG4gICAgICAgICAgICBgPGRpdiBzdHlsZT1cImZsb2F0OiBsZWZ0OyBmb250LWZhbWlseTogJ0hlbHZldGljYSBOZXVlJywgc2Fucy1zZXJpZjsgZm9udC1zaXplOiAyMHB4OyBtYXJnaW4tbGVmdDogMTVweDtcIj5cbiAgICAgICAgICAgICAgICBMZXZlbDogPHNwYW4gaWQ9XCJsZXZlbFwiPjwvc3Bhbj48YnI+XG4gICAgICAgICAgICAgICAgU2NvcmU6IDxzcGFuIGlkPVwic2NvcmVcIj48L3NwYW4+PGJyPlxuICAgICAgICAgICAgICAgIENvbWJvOiA8c3BhbiBpZD1cImNvbWJvXCI+PC9zcGFuPjxicj5cbiAgICAgICAgICAgICAgICBGaWd1cmVzIGZhbGxlbjogPHNwYW4gaWQ9XCJmaWd1cmVzX2ZhbGxlblwiPjwvc3Bhbj48YnI+XG4gICAgICAgICAgICAgICAgTGluZXMgc3F1YXNoZWQ6IDxzcGFuIGlkPVwibGluZXNfc3F1YXNoZWRcIj48L3NwYW4+PGJyPlxuICAgICAgICAgICAgPC9kaXY+YCk7XG4gICAgICAgIHRoaXMucmVuZGVyU2V0dGluZ3MuY29udGFpbmVyRWxlbWVudC5hcHBlbmRDaGlsZCh0aGlzLnNjb3JlRGlzcGxheSk7XG5cbiAgICAgICAgdGhpcy5yZW5kZXJTZXR0aW5ncy5jb250YWluZXJFbGVtZW50LmFwcGVuZENoaWxkKFRhYmxlUmVuZGVyZXIuY3JlYXRlSHRtbEVsZW1lbnQoJzxkaXYgc3R5bGU9XCJjbGVhcjogYm90aFwiPjwvZGl2PicpKTtcblxuICAgICAgICB0aGlzLmV2ZW50QnVzLm9uKEV2ZW50VHlwZS5GYWxsaW5nVGlja1Byb2Nlc3NlZCwgdGhpcy5vbkZhbGxUaWNrUHJvY2Vzc2VkLmJpbmQodGhpcykpO1xuICAgICAgICB0aGlzLmV2ZW50QnVzLm9uKEV2ZW50VHlwZS5HYW1lT3ZlciwgdGhpcy5vbkdhbWVPdmVyLmJpbmQodGhpcykpO1xuICAgICAgICB0aGlzLmV2ZW50QnVzLm9uKEV2ZW50VHlwZS5GaWd1cmVzTW92ZWQsIHRoaXMub25GaWd1cmVzTW92ZWQuYmluZCh0aGlzKSk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBvbkZpZ3VyZXNNb3ZlZChjb21tYW5kOiBGYWxsVGlja1Byb2Nlc3NlZEV2ZW50KTogdm9pZCB7XG4gICAgICAgIHRoaXMucmVuZGVyU3RhdGUoY29tbWFuZC5nYW1lRGF0YSk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBvbkZhbGxUaWNrUHJvY2Vzc2VkKGNvbW1hbmQ6IEZhbGxUaWNrUHJvY2Vzc2VkRXZlbnQpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5yZW5kZXJTdGF0ZShjb21tYW5kLmdhbWVEYXRhKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIG9uR2FtZU92ZXIoY29tbWFuZDogR2FtZU92ZXJFdmVudCk6IHZvaWQge1xuICAgICAgICB0aGlzLnJlbmRlclN0YXRlKGNvbW1hbmQuZ2FtZURhdGEpO1xuICAgIH1cblxuICAgIHByaXZhdGUgcmVuZGVyQ29tbWFuZEhhbmRsZXIoY29tbWFuZDogUmVuZGVyQ29tbWFuZCk6IHZvaWQge1xuICAgICAgICB0aGlzLnJlbmRlclN0YXRlKGNvbW1hbmQuZ2FtZURhdGEpO1xuICAgIH1cblxuICAgIHByaXZhdGUgcmVuZGVyU3RhdGUoZ2FtZURhdGE6IEdhbWVEYXRhKTogdm9pZCB7XG4gICAgICAgIHRoaXMucmVwYWludE1hdHJpeENlbGxzKGdhbWVEYXRhLm1hdHJpeCwgbmV3IENvb3JkaW5hdGUoMCwgMCksIGdhbWVEYXRhKTtcbiAgICAgICAgaWYgKHRoaXMucmVuZGVyU2V0dGluZ3MucmVuZGVyUHJvamVjdGlvbkZpZ3VyZXMpIHtcbiAgICAgICAgICAgIHRoaXMucmVuZGVyRmFsbGluZ0ZpZ3VyZXNQcm9qZWN0aW9uKGdhbWVEYXRhKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnJlbmRlckZhbGxpbmdGaWd1cmVzKGdhbWVEYXRhKTtcbiAgICAgICAgdGhpcy5yZW5kZXJTdGF0cyhnYW1lRGF0YSk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSByZW5kZXJGYWxsaW5nRmlndXJlcyhnYW1lRGF0YTogR2FtZURhdGEpOiB2b2lkIHtcbiAgICAgICAgZ2FtZURhdGEuZmFsbGluZ0ZpZ3VyZXMuZm9yRWFjaChmYWxsaW5nRmlndXJlID0+IHtcbiAgICAgICAgICAgIHRoaXMucmVwYWludEZhbGxpbmdGaWd1cmVzQ2VsbHMoZmFsbGluZ0ZpZ3VyZSwgZ2FtZURhdGEpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBwcml2YXRlIHJlbmRlckZhbGxpbmdGaWd1cmVzUHJvamVjdGlvbihnYW1lRGF0YTogR2FtZURhdGEpOiB2b2lkIHtcbiAgICAgICAgZ2FtZURhdGEuZmFsbGluZ0ZpZ3VyZXMuZm9yRWFjaChmYWxsaW5nRmlndXJlID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGZpZ3VyZU1hdHJpeCA9IGZhbGxpbmdGaWd1cmUuZmlndXJlLmdldFR1cm4oZmFsbGluZ0ZpZ3VyZS50dXJuU3RhdGUpO1xuICAgICAgICAgICAgY29uc3QgcHJvamVjdGlvbkZpZ3VyZVggPSBmYWxsaW5nRmlndXJlLnBvc2l0aW9uLng7XG4gICAgICAgICAgICBsZXQgcHJvamVjdGlvbkZpZ3VyZVkgPSBmYWxsaW5nRmlndXJlLnBvc2l0aW9uLnk7XG4gICAgICAgICAgICB3aGlsZShGaWd1cmVQbGFjaW5nQ2hlY2tlci5jYW5GaWd1cmVCZVBsYWNlZChmaWd1cmVNYXRyaXgsIG5ldyBDb29yZGluYXRlKHByb2plY3Rpb25GaWd1cmVYLCBwcm9qZWN0aW9uRmlndXJlWSArIDEpLCBnYW1lRGF0YS5tYXRyaXgpKSB7XG4gICAgICAgICAgICAgICAgcHJvamVjdGlvbkZpZ3VyZVkrKztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMucmVwYWludFByb2plY3Rpb25GaWd1cmVzQ2VsbHMoXG4gICAgICAgICAgICAgICAgZmlndXJlTWF0cml4LFxuICAgICAgICAgICAgICAgIG5ldyBDb29yZGluYXRlKHByb2plY3Rpb25GaWd1cmVYLCBwcm9qZWN0aW9uRmlndXJlWSksXG4gICAgICAgICAgICAgICAgZ2FtZURhdGFcbiAgICAgICAgICAgICk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHByaXZhdGUgcmVwYWludE1hdHJpeENlbGxzKG1hdHJpeDogYm9vbGVhbltdW10sIGluZGVudDogQ29vcmRpbmF0ZSwgZ2FtZURhdGE6IEdhbWVEYXRhKTogdm9pZCB7XG4gICAgICAgIGxldCBjb2xvcnM6IENlbGxDb2xvcnM7XG4gICAgICAgIGlmIChnYW1lRGF0YS5pc0dhbWVPdmVyKSB7XG4gICAgICAgICAgICBjb2xvcnMgPSBuZXcgQ2VsbENvbG9ycyhcbiAgICAgICAgICAgICAgICB0aGlzLnJlbmRlclNldHRpbmdzLm1hdHJpeENlbGxDb2xvcnMuZmlsbGVkR2FtZU92ZXIsXG4gICAgICAgICAgICAgICAgdGhpcy5yZW5kZXJTZXR0aW5ncy5tYXRyaXhDZWxsQ29sb3JzLmVtcHR5LFxuICAgICAgICAgICAgKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbG9ycyA9IG5ldyBDZWxsQ29sb3JzKFxuICAgICAgICAgICAgICAgIHRoaXMucmVuZGVyU2V0dGluZ3MubWF0cml4Q2VsbENvbG9ycy5maWxsZWQsXG4gICAgICAgICAgICAgICAgdGhpcy5yZW5kZXJTZXR0aW5ncy5tYXRyaXhDZWxsQ29sb3JzLmVtcHR5LFxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnJlcGFpbnRDZWxscyhtYXRyaXgsIGluZGVudCwgY29sb3JzKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIHJlcGFpbnRGYWxsaW5nRmlndXJlc0NlbGxzKGZhbGxpbmdGaWd1cmU6IEZhbGxpbmdGaWd1cmUsIGdhbWVEYXRhOiBHYW1lRGF0YSk6IHZvaWQge1xuICAgICAgICBsZXQgY29sb3JzOiBDZWxsQ29sb3JzO1xuICAgICAgICBpZiAoZ2FtZURhdGEuaXNHYW1lT3Zlcikge1xuICAgICAgICAgICAgY29sb3JzID0gbmV3IENlbGxDb2xvcnMoXG4gICAgICAgICAgICAgICAgdGhpcy5yZW5kZXJTZXR0aW5ncy5mYWxsaW5nRmlndXJlQ2VsbENvbG9ycy5maWxsZWRHYW1lT3ZlcixcbiAgICAgICAgICAgICAgICB0aGlzLnJlbmRlclNldHRpbmdzLmZhbGxpbmdGaWd1cmVDZWxsQ29sb3JzLmVtcHR5LFxuICAgICAgICAgICAgKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbG9ycyA9IG5ldyBDZWxsQ29sb3JzKFxuICAgICAgICAgICAgICAgIGZhbGxpbmdGaWd1cmUuY29sb3IgfHwgdGhpcy5yZW5kZXJTZXR0aW5ncy5mYWxsaW5nRmlndXJlQ2VsbENvbG9ycy5maWxsZWQsXG4gICAgICAgICAgICAgICAgdGhpcy5yZW5kZXJTZXR0aW5ncy5mYWxsaW5nRmlndXJlQ2VsbENvbG9ycy5lbXB0eSxcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5yZXBhaW50Q2VsbHMoXG4gICAgICAgICAgICBmYWxsaW5nRmlndXJlLmZpZ3VyZS5nZXRUdXJuKGZhbGxpbmdGaWd1cmUudHVyblN0YXRlKSxcbiAgICAgICAgICAgIGZhbGxpbmdGaWd1cmUucG9zaXRpb24sXG4gICAgICAgICAgICBjb2xvcnNcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIHJlcGFpbnRQcm9qZWN0aW9uRmlndXJlc0NlbGxzKG1hdHJpeDogYm9vbGVhbltdW10sIGluZGVudDogQ29vcmRpbmF0ZSwgZ2FtZURhdGE6IEdhbWVEYXRhKTogdm9pZCB7XG4gICAgICAgIGxldCBjb2xvcnM6IENlbGxDb2xvcnM7XG4gICAgICAgIGlmIChnYW1lRGF0YS5pc0dhbWVPdmVyKSB7XG4gICAgICAgICAgICBjb2xvcnMgPSBuZXcgQ2VsbENvbG9ycyhcbiAgICAgICAgICAgICAgICB0aGlzLnJlbmRlclNldHRpbmdzLnByb2plY3Rpb25GaWd1cmVDZWxsQ29sb3JzLmZpbGxlZEdhbWVPdmVyLFxuICAgICAgICAgICAgICAgIHRoaXMucmVuZGVyU2V0dGluZ3MucHJvamVjdGlvbkZpZ3VyZUNlbGxDb2xvcnMuZW1wdHksXG4gICAgICAgICAgICApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29sb3JzID0gbmV3IENlbGxDb2xvcnMoXG4gICAgICAgICAgICAgICAgdGhpcy5yZW5kZXJTZXR0aW5ncy5wcm9qZWN0aW9uRmlndXJlQ2VsbENvbG9ycy5maWxsZWQsXG4gICAgICAgICAgICAgICAgdGhpcy5yZW5kZXJTZXR0aW5ncy5wcm9qZWN0aW9uRmlndXJlQ2VsbENvbG9ycy5lbXB0eSxcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5yZXBhaW50Q2VsbHMobWF0cml4LCBpbmRlbnQsIGNvbG9ycyk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSByZXBhaW50Q2VsbHMobWF0cml4OiBib29sZWFuW11bXSwgaW5kZW50OiBDb29yZGluYXRlLCBjZWxsQ29sb3JzOiBDZWxsQ29sb3JzKTogdm9pZCB7XG4gICAgICAgIG1hdHJpeC5mb3JFYWNoKChyb3csIHkpID0+IHtcbiAgICAgICAgICAgIHJvdy5mb3JFYWNoKCh2YWx1ZSwgeCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IHJlYWxZID0geSArIGluZGVudC55O1xuICAgICAgICAgICAgICAgIGNvbnN0IHJlYWxYID0geCArIGluZGVudC54O1xuICAgICAgICAgICAgICAgIGlmIChyZWFsWSBpbiB0aGlzLmNlbGxzSHRtbEVsZW1lbnRzTWFwXG4gICAgICAgICAgICAgICAgICAgICYmIHJlYWxYIGluIHRoaXMuY2VsbHNIdG1sRWxlbWVudHNNYXBbcmVhbFldXG4gICAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGNvbG9yID0gdmFsdWUgPyBjZWxsQ29sb3JzLmZpbGxlZCA6IGNlbGxDb2xvcnMuZW1wdHk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChjb2xvciAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jZWxsc0h0bWxFbGVtZW50c01hcFtyZWFsWV1bcmVhbFhdLnN0eWxlLmJhY2tncm91bmQgPSBjb2xvcjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBwcml2YXRlIHJlbmRlclN0YXRzKGdhbWVEYXRhOiBHYW1lRGF0YSk6IHZvaWQge1xuICAgICAgICBjb25zdCBsZXZlbFNwYW4gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbGV2ZWwnKTtcbiAgICAgICAgY29uc3Qgc2NvcmVTcGFuID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3Njb3JlJyk7XG4gICAgICAgIGNvbnN0IGNvbWJvU3BhbiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdjb21ibycpO1xuICAgICAgICBjb25zdCBmaWd1cmVzRmFsbGVuID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2ZpZ3VyZXNfZmFsbGVuJyk7XG4gICAgICAgIGNvbnN0IGxpbmVzU3F1YXNoZWQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbGluZXNfc3F1YXNoZWQnKTtcbiAgICAgICAgaWYgKGxldmVsU3BhbiAhPT0gbnVsbCkge1xuICAgICAgICAgICAgbGV2ZWxTcGFuLmlubmVySFRNTCA9IGdhbWVEYXRhLmxldmVsLnRvU3RyaW5nKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHNjb3JlU3BhbiAhPT0gbnVsbCkge1xuICAgICAgICAgICAgc2NvcmVTcGFuLmlubmVySFRNTCA9IGdhbWVEYXRhLnNjb3JlLnRvU3RyaW5nKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNvbWJvU3BhbiAhPT0gbnVsbCkge1xuICAgICAgICAgICAgY29tYm9TcGFuLmlubmVySFRNTCA9IGdhbWVEYXRhLmNvbWJvLnRvU3RyaW5nKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGZpZ3VyZXNGYWxsZW4gIT09IG51bGwpIHtcbiAgICAgICAgICAgIGZpZ3VyZXNGYWxsZW4uaW5uZXJIVE1MID0gZ2FtZURhdGEuc3RhdHMuZmlndXJlc0ZhbGxlbi50b1N0cmluZygpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChsaW5lc1NxdWFzaGVkICE9PSBudWxsKSB7XG4gICAgICAgICAgICBsaW5lc1NxdWFzaGVkLmlubmVySFRNTCA9IGdhbWVEYXRhLnN0YXRzLmxpbmVzU3F1YXNoZWQudG9TdHJpbmcoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgc3RhdGljIGNyZWF0ZUh0bWxFbGVtZW50KGh0bWw6IHN0cmluZyk6IEhUTUxFbGVtZW50IHtcbiAgICAgICAgbGV0IGNvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICBjb250YWluZXIuaW5uZXJIVE1MID0gaHRtbDtcbiAgICAgICAgaWYgKGNvbnRhaW5lci5jaGlsZHJlbi5sZW5ndGggPiAxIHx8IGNvbnRhaW5lci5maXJzdEVsZW1lbnRDaGlsZCA9PT0gbnVsbCkge1xuICAgICAgICAgICAgdGhyb3cgJ1RoZSBIVE1MIG11c3QgY29udGFpbiBvbmx5IG9uZSBjaGlsZCc7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCEoY29udGFpbmVyLmZpcnN0RWxlbWVudENoaWxkIGluc3RhbmNlb2YgSFRNTEVsZW1lbnQpKSB7XG4gICAgICAgICAgICB0aHJvdyAnU29tZXRoaW5nIHdlbnQgd3Jvbmcgd2hpbGUgdHJ5aW5nIHRvIGdldCBIVE1MRWxlbWVudCBjaGlsZCBmcm9tIGRpdic7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGNvbnRhaW5lci5maXJzdEVsZW1lbnRDaGlsZDtcbiAgICB9XG59XG4iLCJpbXBvcnQge0Nvb3JkaW5hdGUsIEZhbGxpbmdGaWd1cmUsIEdhbWVEYXRhfSBmcm9tIFwiLi4vQ29tbW9uXCI7XG5pbXBvcnQge0Ryb3BGaWd1cmVzQ29tbWFuZCwgQ29tbWFuZEJ1cywgQ29tbWFuZFR5cGUsIEdhbWVPdmVyQ29tbWFuZCwgRmlndXJlc0ZhbGxUaWNrQ29tbWFuZH0gZnJvbSBcIi4uL0NvbW1hbmRCdXMvQ29tbWFuZEJ1c1wiO1xuaW1wb3J0IHtFdmVudEJ1cywgRmFsbFRpY2tQcm9jZXNzZWRFdmVudH0gZnJvbSBcIi4uL0V2ZW50QnVzL0V2ZW50QnVzXCI7XG5pbXBvcnQge0ZpZ3VyZVBsYWNpbmdDaGVja2VyfSBmcm9tIFwiLi4vVXRpbHMvRmlndXJlUGxhY2luZ0NoZWNrZXJcIjtcblxuY2xhc3MgRmFsbGluZ1Jlc3VsdCB7XG4gICAgcHVibGljIHRyYW5zZmVycmVkRmlndXJlczogRmFsbGluZ0ZpZ3VyZVtdID0gW107XG4gICAgcHVibGljIGlzR2FtZU92ZXI6IGJvb2xlYW4gPSBmYWxzZTtcbn1cblxuZXhwb3J0IGNsYXNzIFJlZ3VsYXJGYWxsaW5nRmlndXJlc1Byb2Nlc3NvciB7XG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIHByaXZhdGUgY29tbWFuZEJ1czogQ29tbWFuZEJ1cyxcbiAgICAgICAgcHJpdmF0ZSBldmVudEJ1czogRXZlbnRCdXMsXG4gICAgKSB7XG4gICAgICAgIHRoaXMuY29tbWFuZEJ1cy5hZGRIYW5kbGVyKENvbW1hbmRUeXBlLkZpZ3VyZXNGYWxsVGljaywgdGhpcy5wcm9jZXNzRmlndXJlc0ZhbGxUaWNrQ29tbWFuZC5iaW5kKHRoaXMpKTtcbiAgICAgICAgdGhpcy5jb21tYW5kQnVzLmFkZEhhbmRsZXIoQ29tbWFuZFR5cGUuRmlndXJlc0ZhbGxEb3duLCB0aGlzLnByb2Nlc3NEcm9wRmlndXJlc0NvbW1hbmQuYmluZCh0aGlzKSk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBwcm9jZXNzRmlndXJlc0ZhbGxUaWNrQ29tbWFuZChjb21tYW5kOiBGaWd1cmVzRmFsbFRpY2tDb21tYW5kKSB7XG4gICAgICAgIGNvbnN0IGZhbGxpbmdSZXN1bHQgPSB0aGlzLmZhbGxGaWd1cmVzRm9yT25lQ2VsbChjb21tYW5kLmdhbWVEYXRhKTtcbiAgICAgICAgbGV0IHNxdWFzaGVkTGluZXMgPSB0aGlzLnNxdWFzaExpbmVzKGNvbW1hbmQuZ2FtZURhdGEubWF0cml4KTtcbiAgICAgICAgaWYgKGZhbGxpbmdSZXN1bHQuaXNHYW1lT3Zlcikge1xuICAgICAgICAgICAgdGhpcy5jb21tYW5kQnVzLnJ1bihuZXcgR2FtZU92ZXJDb21tYW5kKGNvbW1hbmQuZ2FtZURhdGEpKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmV2ZW50QnVzLmZpcmUobmV3IEZhbGxUaWNrUHJvY2Vzc2VkRXZlbnQoXG4gICAgICAgICAgICBjb21tYW5kLmdhbWVEYXRhLFxuICAgICAgICAgICAgZmFsbGluZ1Jlc3VsdC50cmFuc2ZlcnJlZEZpZ3VyZXMsXG4gICAgICAgICAgICBzcXVhc2hlZExpbmVzLFxuICAgICAgICAgICAgMFxuICAgICAgICApKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIHByb2Nlc3NEcm9wRmlndXJlc0NvbW1hbmQoY29tbWFuZDogRHJvcEZpZ3VyZXNDb21tYW5kKTogdm9pZCB7XG4gICAgICAgIGxldCBmYWxsaW5nUmVzdWx0ID0gbmV3IEZhbGxpbmdSZXN1bHQoKTtcbiAgICAgICAgbGV0IGRyb3BwZWRMaW5lcyA9IDA7XG4gICAgICAgIHdoaWxlIChjb21tYW5kLmdhbWVEYXRhLmZhbGxpbmdGaWd1cmVzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIGNvbnN0IG9uZUNlbGxGYWxsaW5nUmVzdWx0ID0gdGhpcy5mYWxsRmlndXJlc0Zvck9uZUNlbGwoY29tbWFuZC5nYW1lRGF0YSk7XG4gICAgICAgICAgICBmYWxsaW5nUmVzdWx0LnRyYW5zZmVycmVkRmlndXJlcy5wdXNoKC4uLm9uZUNlbGxGYWxsaW5nUmVzdWx0LnRyYW5zZmVycmVkRmlndXJlcyk7XG4gICAgICAgICAgICBmYWxsaW5nUmVzdWx0LmlzR2FtZU92ZXIgPSBmYWxsaW5nUmVzdWx0LmlzR2FtZU92ZXIgfHwgb25lQ2VsbEZhbGxpbmdSZXN1bHQuaXNHYW1lT3ZlcjtcbiAgICAgICAgICAgIGRyb3BwZWRMaW5lcysrO1xuICAgICAgICB9XG4gICAgICAgIGxldCBzcXVhc2hlZExpbmVzID0gdGhpcy5zcXVhc2hMaW5lcyhjb21tYW5kLmdhbWVEYXRhLm1hdHJpeCk7XG4gICAgICAgIGlmIChmYWxsaW5nUmVzdWx0LmlzR2FtZU92ZXIpIHtcbiAgICAgICAgICAgIHRoaXMuY29tbWFuZEJ1cy5ydW4obmV3IEdhbWVPdmVyQ29tbWFuZChjb21tYW5kLmdhbWVEYXRhKSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5ldmVudEJ1cy5maXJlKG5ldyBGYWxsVGlja1Byb2Nlc3NlZEV2ZW50KFxuICAgICAgICAgICAgY29tbWFuZC5nYW1lRGF0YSxcbiAgICAgICAgICAgIGZhbGxpbmdSZXN1bHQudHJhbnNmZXJyZWRGaWd1cmVzLFxuICAgICAgICAgICAgc3F1YXNoZWRMaW5lcyxcbiAgICAgICAgICAgIGRyb3BwZWRMaW5lcyAtIDEsXG4gICAgICAgICkpO1xuICAgIH1cblxuICAgIHByaXZhdGUgZmFsbEZpZ3VyZXNGb3JPbmVDZWxsKGdhbWVEYXRhOiBHYW1lRGF0YSk6IEZhbGxpbmdSZXN1bHQge1xuICAgICAgICBsZXQgZmFsbGluZ1Jlc3VsdCA9IG5ldyBGYWxsaW5nUmVzdWx0KCk7XG4gICAgICAgIGdhbWVEYXRhLmZhbGxpbmdGaWd1cmVzLmZvckVhY2goKGZhbGxpbmdGaWd1cmUsIGluZGV4KSA9PiB7XG4gICAgICAgICAgICBpZiAodGhpcy5maWd1cmVDYW5GYWxsKGdhbWVEYXRhLm1hdHJpeCwgZmFsbGluZ0ZpZ3VyZSkpIHtcbiAgICAgICAgICAgICAgICBmYWxsaW5nRmlndXJlLnBvc2l0aW9uLnkrKztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgbGV0IGZpZ3VyZUdhbWVPdmVyUmVzdWx0ID0gdGhpcy50cmFuc2ZlckZpZ3VyZVRvTWF0cml4KFxuICAgICAgICAgICAgICAgICAgICBnYW1lRGF0YS5tYXRyaXgsXG4gICAgICAgICAgICAgICAgICAgIGZhbGxpbmdGaWd1cmVcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIGZhbGxpbmdSZXN1bHQudHJhbnNmZXJyZWRGaWd1cmVzLnB1c2goLi4uZ2FtZURhdGEuZmFsbGluZ0ZpZ3VyZXMuc3BsaWNlKGluZGV4LCAxKSk7XG4gICAgICAgICAgICAgICAgZmFsbGluZ1Jlc3VsdC5pc0dhbWVPdmVyID0gZmFsbGluZ1Jlc3VsdC5pc0dhbWVPdmVyIHx8IGZpZ3VyZUdhbWVPdmVyUmVzdWx0O1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIGZhbGxpbmdSZXN1bHQ7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBmaWd1cmVDYW5GYWxsKG1hdHJpeDogYm9vbGVhbltdW10sIGZhbGxpbmdGaWd1cmU6IEZhbGxpbmdGaWd1cmUpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIEZpZ3VyZVBsYWNpbmdDaGVja2VyLmNhbkZpZ3VyZUJlUGxhY2VkKFxuICAgICAgICAgICAgZmFsbGluZ0ZpZ3VyZS5maWd1cmUuZ2V0VHVybihmYWxsaW5nRmlndXJlLnR1cm5TdGF0ZSksXG4gICAgICAgICAgICBuZXcgQ29vcmRpbmF0ZShmYWxsaW5nRmlndXJlLnBvc2l0aW9uLngsIGZhbGxpbmdGaWd1cmUucG9zaXRpb24ueSArIDEpLFxuICAgICAgICAgICAgbWF0cml4XG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSB0cmFuc2ZlckZpZ3VyZVRvTWF0cml4KG1hdHJpeDogYm9vbGVhbltdW10sIGZhbGxpbmdGaWd1cmU6IEZhbGxpbmdGaWd1cmUpOiBib29sZWFuIHtcbiAgICAgICAgbGV0IGlzR2FtZU92ZXIgPSBmYWxzZTtcbiAgICAgICAgZmFsbGluZ0ZpZ3VyZS5maWd1cmUuZ2V0VHVybihmYWxsaW5nRmlndXJlLnR1cm5TdGF0ZSlcbiAgICAgICAgICAgIC5mb3JFYWNoKChyb3csIGZpZ3VyZUNlbGxZKSA9PiB7XG4gICAgICAgICAgICAgICAgcm93LmZvckVhY2goKGNlbGxWYWx1ZSwgZmlndXJlQ2VsbFgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFjZWxsVmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBsZXQgbWF0cml4WCA9IGZhbGxpbmdGaWd1cmUucG9zaXRpb24ueCArIGZpZ3VyZUNlbGxYO1xuICAgICAgICAgICAgICAgICAgICBsZXQgbWF0cml4WSA9IGZhbGxpbmdGaWd1cmUucG9zaXRpb24ueSArIGZpZ3VyZUNlbGxZO1xuICAgICAgICAgICAgICAgICAgICBpZiAobWF0cml4WSBpbiBtYXRyaXhcbiAgICAgICAgICAgICAgICAgICAgICAgICYmIG1hdHJpeFggaW4gbWF0cml4W21hdHJpeFldXG4gICAgICAgICAgICAgICAgICAgICAgICAmJiAhbWF0cml4W21hdHJpeFldW21hdHJpeFhdXG4gICAgICAgICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbWF0cml4W21hdHJpeFldW21hdHJpeFhdID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlzR2FtZU92ZXIgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIGlzR2FtZU92ZXI7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBzcXVhc2hMaW5lcyhtYXRyaXg6IGJvb2xlYW5bXVtdKTogbnVtYmVyW10ge1xuICAgICAgICBsZXQgbGluZXNUb1NxdWFzaDogbnVtYmVyW10gPSBbXTtcbiAgICAgICAgbWF0cml4LmZvckVhY2goKHJvdywgeSkgPT4ge1xuICAgICAgICAgICAgbGV0IGNhbkJlU3F1YXNoZWQgPSByb3cuZXZlcnkoY2VsbCA9PiBjZWxsKTtcbiAgICAgICAgICAgIGlmIChjYW5CZVNxdWFzaGVkKSB7XG4gICAgICAgICAgICAgICAgbGluZXNUb1NxdWFzaC5wdXNoKHkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LCAwKTtcbiAgICAgICAgbGluZXNUb1NxdWFzaC5mb3JFYWNoKHkgPT4ge1xuICAgICAgICAgICAgbWF0cml4LnNwbGljZSh5LCAxKTtcbiAgICAgICAgICAgIG1hdHJpeC51bnNoaWZ0KG5ldyBBcnJheShtYXRyaXhbMF0ubGVuZ3RoKS5maWxsKGZhbHNlKSk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gbGluZXNUb1NxdWFzaDtcbiAgICB9XG59XG4iLCJleHBvcnQgY2xhc3MgRW51bUhlbHBlciB7XG4gICAgcHVibGljIHN0YXRpYyBUb0FycmF5KHZhbDogYW55KTogdHlwZW9mIHZhbFtdIHtcbiAgICAgICAgcmV0dXJuIE9iamVjdC5rZXlzKHZhbClcbiAgICAgICAgICAgIC5tYXAobiA9PiBOdW1iZXIucGFyc2VJbnQobikpXG4gICAgICAgICAgICAuZmlsdGVyKG4gPT4gIU51bWJlci5pc05hTihuKSkgYXMgdW5rbm93biBhcyB0eXBlb2YgdmFsW107XG4gICAgfVxuXG4gICAgcHVibGljIHN0YXRpYyBHZXRSYW5kb20odmFsOiBhbnkpOiB0eXBlb2YgdmFsIHtcbiAgICAgICAgY29uc3QgdmFsdWVzID0gRW51bUhlbHBlci5Ub0FycmF5KHZhbCk7XG4gICAgICAgIGNvbnN0IHJhbmRvbUluZGV4ID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogdmFsdWVzLmxlbmd0aCk7XG4gICAgICAgIHJldHVybiB2YWx1ZXNbcmFuZG9tSW5kZXhdO1xuICAgIH1cbn1cbiIsImltcG9ydCB7RXZlbnRCdXMsIEV2ZW50VHlwZSwgRmFsbFRpY2tQcm9jZXNzZWRFdmVudCwgRmlndXJlc1NwYXduZWRFdmVudH0gZnJvbSBcIi4uL0V2ZW50QnVzL0V2ZW50QnVzXCI7XG5pbXBvcnQge0ZpZ3VyZVR1cm5TdGF0ZX0gZnJvbSBcIi4uL0ZpZ3VyZXNcIjtcbmltcG9ydCB7Q29vcmRpbmF0ZSwgRmFsbGluZ0ZpZ3VyZSwgR2FtZURhdGF9IGZyb20gXCIuLi9Db21tb25cIjtcbmltcG9ydCB7Q29tbWFuZEJ1cywgQ29tbWFuZFR5cGUsIEluaXRHYW1lQ29tbWFuZH0gZnJvbSBcIi4uL0NvbW1hbmRCdXMvQ29tbWFuZEJ1c1wiO1xuaW1wb3J0IHtFbnVtSGVscGVyfSBmcm9tIFwiLi4vVXRpbHMvRW51bUhlbHBlclwiO1xuXG5leHBvcnQgY2xhc3MgQWx3YXlzT25lRmlndXJlU3Bhd25lciB7XG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIHByaXZhdGUgZXZlbnRCdXM6IEV2ZW50QnVzLFxuICAgICAgICBwcml2YXRlIGNvbW1hbmRCdXM6IENvbW1hbmRCdXMsXG4gICAgKSB7XG4gICAgICAgIHRoaXMuY29tbWFuZEJ1cy5hZGRIYW5kbGVyKENvbW1hbmRUeXBlLkluaXRHYW1lLCB0aGlzLmluaXRIYW5kbGVyLmJpbmQodGhpcykpO1xuICAgIH1cblxuICAgIHByaXZhdGUgaW5pdEhhbmRsZXIoZXZlbnQ6IEluaXRHYW1lQ29tbWFuZCk6IHZvaWQge1xuICAgICAgICB0aGlzLmV2ZW50QnVzLm9uKFxuICAgICAgICAgICAgRXZlbnRUeXBlLkZhbGxpbmdUaWNrUHJvY2Vzc2VkLFxuICAgICAgICAgICAgdGhpcy5wcm9jZXNzT25GYWxsVGljay5iaW5kKHRoaXMpLFxuICAgICAgICApO1xuICAgIH1cblxuICAgIHByaXZhdGUgcHJvY2Vzc09uRmFsbFRpY2soZXZlbnQ6IEZhbGxUaWNrUHJvY2Vzc2VkRXZlbnQpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5hZGRGaWd1cmUoZXZlbnQuZ2FtZURhdGEpO1xuICAgIH1cblxuICAgIHByaXZhdGUgYWRkRmlndXJlKGdhbWVEYXRhOiBHYW1lRGF0YSk6IHZvaWQge1xuICAgICAgICBpZiAoZ2FtZURhdGEuZmFsbGluZ0ZpZ3VyZXMubGVuZ3RoID4gMCB8fCBnYW1lRGF0YS5pc0dhbWVPdmVyKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBmaWd1cmVJbmRleCA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIGdhbWVEYXRhLnNldHRpbmdzLmZpZ3VyZXMubGVuZ3RoKTtcbiAgICAgICAgY29uc3QgZmlndXJlID0gZ2FtZURhdGEuc2V0dGluZ3MuZmlndXJlc1tmaWd1cmVJbmRleF07XG4gICAgICAgIGNvbnN0IHR1cm5TdGF0ZSA9IEVudW1IZWxwZXIuR2V0UmFuZG9tKEZpZ3VyZVR1cm5TdGF0ZSk7XG4gICAgICAgIGNvbnN0IGZpZ3VyZU1hdHJpeCA9IGZpZ3VyZS5nZXRUdXJuKHR1cm5TdGF0ZSk7XG4gICAgICAgIGNvbnN0IGZpZ3VyZVdpZHRoID0gTWF0aC5tYXgoLi4uZmlndXJlTWF0cml4Lm1hcChyb3cgPT4gcm93Lmxlbmd0aCkpO1xuICAgICAgICBjb25zdCBjb29yZGluYXRlID0gbmV3IENvb3JkaW5hdGUoXG4gICAgICAgICAgICBNYXRoLmNlaWwoZ2FtZURhdGEuc2V0dGluZ3MuZmllbGRXaWR0aCAvIDIgLSBmaWd1cmVXaWR0aCAvIDIpIC0gMSxcbiAgICAgICAgICAgIC1maWd1cmVNYXRyaXgubGVuZ3RoLFxuICAgICAgICApO1xuICAgICAgICBjb25zdCBmYWxsaW5nRmlndXJlID0gbmV3IEZhbGxpbmdGaWd1cmUoXG4gICAgICAgICAgICBmaWd1cmUsXG4gICAgICAgICAgICBjb29yZGluYXRlLFxuICAgICAgICAgICAgdHVyblN0YXRlXG4gICAgICAgICk7XG4gICAgICAgIGdhbWVEYXRhLmZhbGxpbmdGaWd1cmVzLnB1c2goZmFsbGluZ0ZpZ3VyZSk7XG4gICAgICAgIHRoaXMuZXZlbnRCdXMuZmlyZShuZXcgRmlndXJlc1NwYXduZWRFdmVudChnYW1lRGF0YSwgW2ZhbGxpbmdGaWd1cmVdKSk7XG4gICAgfVxufVxuIiwiaW1wb3J0IHtDb21tYW5kQnVzLCBDb21tYW5kVHlwZSwgTW92ZUxlZnRDb21tYW5kLCBNb3ZlUmlnaHRDb21tYW5kLCBUdXJuQ2xvY2t3aXNlQ29tbWFuZCwgTW92ZURvd25Db21tYW5kLCBGaWd1cmVzRmFsbFRpY2tDb21tYW5kfSBmcm9tIFwiLi4vQ29tbWFuZEJ1cy9Db21tYW5kQnVzXCI7XG5pbXBvcnQge0ZpZ3VyZVR1cm5TdGF0ZX0gZnJvbSBcIi4uL0ZpZ3VyZXNcIjtcbmltcG9ydCB7RXZlbnRCdXMsIEZpZ3VyZXNNb3ZlZEV2ZW50fSBmcm9tIFwiLi4vRXZlbnRCdXMvRXZlbnRCdXNcIjtcbmltcG9ydCB7Q29vcmRpbmF0ZSwgRmFsbGluZ0ZpZ3VyZX0gZnJvbSBcIi4uL0NvbW1vblwiO1xuaW1wb3J0IHtGaWd1cmVQbGFjaW5nQ2hlY2tlcn0gZnJvbSBcIi4uL1V0aWxzL0ZpZ3VyZVBsYWNpbmdDaGVja2VyXCI7XG5pbXBvcnQge0VudW1IZWxwZXJ9IGZyb20gXCIuLi9VdGlscy9FbnVtSGVscGVyXCI7XG5cbmV4cG9ydCBjbGFzcyBNb3ZpbmdIYW5kbGVyIHtcbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgcHJpdmF0ZSBjb21tYW5kQnVzOiBDb21tYW5kQnVzLFxuICAgICAgICBwcml2YXRlIGV2ZW50QnVzOiBFdmVudEJ1cyxcbiAgICApIHtcbiAgICAgICAgdGhpcy5jb21tYW5kQnVzLmFkZEhhbmRsZXIoQ29tbWFuZFR5cGUuTW92ZUxlZnQsIHRoaXMucHJvY2Vzc01vdmVMZWZ0Q29tbWFuZC5iaW5kKHRoaXMpKTtcbiAgICAgICAgdGhpcy5jb21tYW5kQnVzLmFkZEhhbmRsZXIoQ29tbWFuZFR5cGUuTW92ZVJpZ2h0LCB0aGlzLnByb2Nlc3NNb3ZlUmlnaHRDb21tYW5kLmJpbmQodGhpcykpO1xuICAgICAgICB0aGlzLmNvbW1hbmRCdXMuYWRkSGFuZGxlcihDb21tYW5kVHlwZS5Nb3ZlRG93biwgdGhpcy5wcm9jZXNzTW92ZURvd25Db21tYW5kLmJpbmQodGhpcykpO1xuICAgICAgICB0aGlzLmNvbW1hbmRCdXMuYWRkSGFuZGxlcihDb21tYW5kVHlwZS5UdXJuQ2xvY2t3aXNlLCB0aGlzLnByb2Nlc3NUdXJuQ2xvY2t3aXNlQ29tbWFuZC5iaW5kKHRoaXMpKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIHByb2Nlc3NNb3ZlTGVmdENvbW1hbmQoY29tbWFuZDogTW92ZUxlZnRDb21tYW5kKTogdm9pZCB7XG4gICAgICAgIGNvbW1hbmQuZ2FtZURhdGEuZmFsbGluZ0ZpZ3VyZXMuZm9yRWFjaChmaWd1cmUgPT4ge1xuICAgICAgICAgICAgY29uc3QgY2FuQmVNb3ZlZExlZnQgPSBGaWd1cmVQbGFjaW5nQ2hlY2tlci5jYW5GaWd1cmVCZVBsYWNlZChcbiAgICAgICAgICAgICAgICBmaWd1cmUuZmlndXJlLmdldFR1cm4oZmlndXJlLnR1cm5TdGF0ZSksXG4gICAgICAgICAgICAgICAgbmV3IENvb3JkaW5hdGUoZmlndXJlLnBvc2l0aW9uLnggLSAxLCBmaWd1cmUucG9zaXRpb24ueSksXG4gICAgICAgICAgICAgICAgY29tbWFuZC5nYW1lRGF0YS5tYXRyaXhcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBpZiAoY2FuQmVNb3ZlZExlZnQpIHtcbiAgICAgICAgICAgICAgICBmaWd1cmUucG9zaXRpb24ueC0tO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5ldmVudEJ1cy5maXJlKG5ldyBGaWd1cmVzTW92ZWRFdmVudChjb21tYW5kLmdhbWVEYXRhKSk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBwcm9jZXNzTW92ZVJpZ2h0Q29tbWFuZChjb21tYW5kOiBNb3ZlUmlnaHRDb21tYW5kKTogdm9pZCB7XG4gICAgICAgIGNvbW1hbmQuZ2FtZURhdGEuZmFsbGluZ0ZpZ3VyZXMuZm9yRWFjaChmaWd1cmUgPT4ge1xuICAgICAgICAgICAgY29uc3QgY2FuQmVNb3ZlZFJpZ2h0ID0gRmlndXJlUGxhY2luZ0NoZWNrZXIuY2FuRmlndXJlQmVQbGFjZWQoXG4gICAgICAgICAgICAgICAgZmlndXJlLmZpZ3VyZS5nZXRUdXJuKGZpZ3VyZS50dXJuU3RhdGUpLFxuICAgICAgICAgICAgICAgIG5ldyBDb29yZGluYXRlKGZpZ3VyZS5wb3NpdGlvbi54ICsgMSwgZmlndXJlLnBvc2l0aW9uLnkpLFxuICAgICAgICAgICAgICAgIGNvbW1hbmQuZ2FtZURhdGEubWF0cml4XG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgaWYgKGNhbkJlTW92ZWRSaWdodCkge1xuICAgICAgICAgICAgICAgIGZpZ3VyZS5wb3NpdGlvbi54Kys7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmV2ZW50QnVzLmZpcmUobmV3IEZpZ3VyZXNNb3ZlZEV2ZW50KGNvbW1hbmQuZ2FtZURhdGEpKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIHByb2Nlc3NUdXJuQ2xvY2t3aXNlQ29tbWFuZChjb21tYW5kOiBUdXJuQ2xvY2t3aXNlQ29tbWFuZCk6IHZvaWQge1xuICAgICAgICBjb25zdCBhbGxUdXJuU3RhdGVzID0gRW51bUhlbHBlci5Ub0FycmF5KEZpZ3VyZVR1cm5TdGF0ZSk7XG4gICAgICAgIGNvbW1hbmQuZ2FtZURhdGEuZmFsbGluZ0ZpZ3VyZXMuZm9yRWFjaChmaWd1cmUgPT4ge1xuICAgICAgICAgICAgbGV0IG5leHRUdXJuU3RhdGUgPSBmaWd1cmUudHVyblN0YXRlICsgMTtcbiAgICAgICAgICAgIGlmICghKG5leHRUdXJuU3RhdGUgaW4gYWxsVHVyblN0YXRlcykpIHtcbiAgICAgICAgICAgICAgICBuZXh0VHVyblN0YXRlID0gYWxsVHVyblN0YXRlc1swXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IGNhbkJlVHVybmVkID0gRmlndXJlUGxhY2luZ0NoZWNrZXIuY2FuRmlndXJlQmVQbGFjZWQoXG4gICAgICAgICAgICAgICAgZmlndXJlLmZpZ3VyZS5nZXRUdXJuKG5leHRUdXJuU3RhdGUpLFxuICAgICAgICAgICAgICAgIGZpZ3VyZS5wb3NpdGlvbixcbiAgICAgICAgICAgICAgICBjb21tYW5kLmdhbWVEYXRhLm1hdHJpeFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIGlmIChjYW5CZVR1cm5lZCkge1xuICAgICAgICAgICAgICAgIGZpZ3VyZS50dXJuU3RhdGUgPSBuZXh0VHVyblN0YXRlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5ldmVudEJ1cy5maXJlKG5ldyBGaWd1cmVzTW92ZWRFdmVudChjb21tYW5kLmdhbWVEYXRhKSk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBwcm9jZXNzTW92ZURvd25Db21tYW5kKGNvbW1hbmQ6IE1vdmVEb3duQ29tbWFuZCk6IHZvaWQge1xuICAgICAgICB0aGlzLmNvbW1hbmRCdXMucnVuKG5ldyBGaWd1cmVzRmFsbFRpY2tDb21tYW5kKGNvbW1hbmQuZ2FtZURhdGEpKTtcbiAgICB9XG59XG4iLCJpbXBvcnQge0NvbW1hbmRCdXMsIENvbW1hbmRUeXBlLCBEcm9wRmlndXJlc0NvbW1hbmQsIEluaXRHYW1lQ29tbWFuZCwgTW92ZUxlZnRDb21tYW5kLCBNb3ZlUmlnaHRDb21tYW5kLCBUdXJuQ2xvY2t3aXNlQ29tbWFuZCwgTW92ZURvd25Db21tYW5kfSBmcm9tIFwiLi4vQ29tbWFuZEJ1cy9Db21tYW5kQnVzXCI7XG5pbXBvcnQge0dhbWVEYXRhfSBmcm9tIFwiLi4vQ29tbW9uXCI7XG5cbmV4cG9ydCBjbGFzcyBNb3ZpbmdDb250cm9sbGVyIHtcbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgcHJpdmF0ZSBjb21tYW5kQnVzOiBDb21tYW5kQnVzXG4gICAgKSB7XG4gICAgICAgIHRoaXMuY29tbWFuZEJ1cy5hZGRIYW5kbGVyKENvbW1hbmRUeXBlLkluaXRHYW1lLCB0aGlzLnByb2Nlc3NJbml0R2FtZUNvbW1hbmQuYmluZCh0aGlzKSk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBwcm9jZXNzSW5pdEdhbWVDb21tYW5kKGNvbW1hbmQ6IEluaXRHYW1lQ29tbWFuZCkge1xuICAgICAgICB3aW5kb3cub25rZXlkb3duID0gZXZlbnQgPT4ge1xuICAgICAgICAgICAgaWYgKGV2ZW50LmNvZGUgPT09ICdBcnJvd0xlZnQnKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5jb21tYW5kQnVzLnJ1bihuZXcgTW92ZUxlZnRDb21tYW5kKGNvbW1hbmQuZ2FtZURhdGEpKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoZXZlbnQuY29kZSA9PT0gJ0Fycm93UmlnaHQnKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5jb21tYW5kQnVzLnJ1bihuZXcgTW92ZVJpZ2h0Q29tbWFuZChjb21tYW5kLmdhbWVEYXRhKSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGV2ZW50LmNvZGUgPT09ICdBcnJvd1VwJykge1xuICAgICAgICAgICAgICAgIHRoaXMuY29tbWFuZEJ1cy5ydW4obmV3IFR1cm5DbG9ja3dpc2VDb21tYW5kKGNvbW1hbmQuZ2FtZURhdGEpKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoZXZlbnQuY29kZSA9PT0gJ0Fycm93RG93bicpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmNvbW1hbmRCdXMucnVuKG5ldyBNb3ZlRG93bkNvbW1hbmQoY29tbWFuZC5nYW1lRGF0YSkpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChldmVudC5jb2RlID09PSAnQXJyb3dEb3duJykge1xuICAgICAgICAgICAgICAgIHRoaXMuY29tbWFuZEJ1cy5ydW4obmV3IE1vdmVEb3duQ29tbWFuZChjb21tYW5kLmdhbWVEYXRhKSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGV2ZW50LmNvZGUgPT09ICdTcGFjZScpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmNvbW1hbmRCdXMucnVuKG5ldyBEcm9wRmlndXJlc0NvbW1hbmQoY29tbWFuZC5nYW1lRGF0YSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgIH1cbn1cbiIsImltcG9ydCB7RXZlbnRCdXMsIEV2ZW50VHlwZSwgRmFsbFRpY2tQcm9jZXNzZWRFdmVudH0gZnJvbSBcIi4uL0V2ZW50QnVzL0V2ZW50QnVzXCI7XG5pbXBvcnQge0NvbW1hbmRCdXMsIENvbW1hbmRUeXBlLCBJbml0R2FtZUNvbW1hbmR9IGZyb20gXCIuLi9Db21tYW5kQnVzL0NvbW1hbmRCdXNcIjtcblxuZXhwb3J0IGNsYXNzIEZhbGxUaWNrU2NvcmVDb3VudGVyIHtcbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgcHJpdmF0ZSBjb21tYW5kQnVzOiBDb21tYW5kQnVzLFxuICAgICAgICBwcml2YXRlIGV2ZW50QnVzOiBFdmVudEJ1cyxcbiAgICAgICAgcHJpdmF0ZSBzcXVhc2hlZFJvd3NSZXdhcmRUaHJlc2hvbGRzTWFwOiBNYXA8bnVtYmVyLCBudW1iZXI+ID0gbmV3IE1hcChbXG4gICAgICAgICAgICBbMSwgMTAwXSxcbiAgICAgICAgICAgIFsyLCAzMDBdLFxuICAgICAgICAgICAgWzMsIDUwMF0sXG4gICAgICAgICAgICBbNCwgODAwXSxcbiAgICAgICAgXSksXG4gICAgICAgIHByaXZhdGUgcmV3YXJkT25Db21ibyA9IDUwLFxuICAgICkge1xuICAgICAgICBjb21tYW5kQnVzLmFkZEhhbmRsZXIoQ29tbWFuZFR5cGUuSW5pdEdhbWUsIHRoaXMuaW5pdEdhbWVIYW5kbGVyLmJpbmQodGhpcykpO1xuICAgIH1cblxuICAgIHByaXZhdGUgaW5pdEdhbWVIYW5kbGVyKGNvbW1hbmQ6IEluaXRHYW1lQ29tbWFuZCkge1xuICAgICAgICB0aGlzLmV2ZW50QnVzLm9uKEV2ZW50VHlwZS5GYWxsaW5nVGlja1Byb2Nlc3NlZCwgdGhpcy5vbkZhbGxpbmdUaWNrUHJvY2Vzc2VkLmJpbmQodGhpcykpO1xuICAgIH1cblxuICAgIHByaXZhdGUgb25GYWxsaW5nVGlja1Byb2Nlc3NlZChldmVudDogRmFsbFRpY2tQcm9jZXNzZWRFdmVudCkge1xuICAgICAgICBpZiAoZXZlbnQuc3F1YXNoZWRMaW5lcy5sZW5ndGggPCAwKSB7XG4gICAgICAgICAgICByZXR1cm5cbiAgICAgICAgfVxuICAgICAgICBsZXQgcHJldmlvdXNUaHJlc2hvbGRSZXdhcmQgPSAwO1xuICAgICAgICB0aGlzLnNxdWFzaGVkUm93c1Jld2FyZFRocmVzaG9sZHNNYXAuZm9yRWFjaCgocmV3YXJkLCByb3dzU3F1YXNoZWRUaHJlc2hvbGQpID0+IHtcbiAgICAgICAgICAgIGlmIChyb3dzU3F1YXNoZWRUaHJlc2hvbGQgPiBldmVudC5zcXVhc2hlZExpbmVzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHByZXZpb3VzVGhyZXNob2xkUmV3YXJkID0gcmV3YXJkO1xuICAgICAgICB9KTtcbiAgICAgICAgZXZlbnQuZ2FtZURhdGEuc2NvcmUgKz1cbiAgICAgICAgICAgIHByZXZpb3VzVGhyZXNob2xkUmV3YXJkICogZXZlbnQuZ2FtZURhdGEubGV2ZWxcbiAgICAgICAgICAgICsgdGhpcy5yZXdhcmRPbkNvbWJvICogTWF0aC5tYXgoMCwgZXZlbnQuZ2FtZURhdGEuY29tYm8gLSAxKSAqIGV2ZW50LmdhbWVEYXRhLmxldmVsXG4gICAgICAgICAgICArIGV2ZW50LmRyb3BwZWRMaW5lcyAqIDIgKiBldmVudC5nYW1lRGF0YS5sZXZlbDtcbiAgICB9XG59XG4iLCJpbXBvcnQge0V2ZW50QnVzLCBFdmVudFR5cGUsIEZhbGxUaWNrUHJvY2Vzc2VkRXZlbnR9IGZyb20gXCIuLi9FdmVudEJ1cy9FdmVudEJ1c1wiO1xuaW1wb3J0IHtDb21tYW5kQnVzLCBDb21tYW5kVHlwZSwgSW5pdEdhbWVDb21tYW5kfSBmcm9tIFwiLi4vQ29tbWFuZEJ1cy9Db21tYW5kQnVzXCI7XG5cbmV4cG9ydCBjbGFzcyBTcXVhc2hlZFJvd3NDb3VudGVyQmFzZWRMZXZlbENvdW50ZXIge1xuICAgIHByaXZhdGUgc3F1YXNoZWRSb3dzQ291bnRlciA9IDA7XG5cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgcHJpdmF0ZSBldmVudEJ1czogRXZlbnRCdXMsXG4gICAgICAgIHByaXZhdGUgY29tbWFuZEJ1czogQ29tbWFuZEJ1cyxcbiAgICAgICAgcHJpdmF0ZSBsZXZlbEluY3JlYXNlT25TcXVhc2hlZFJvd3NOdW1iZXI6IG51bWJlcixcbiAgICAgICAgcHJpdmF0ZSBtYXhMZXZlbHM6IG51bWJlcixcbiAgICApIHtcbiAgICAgICAgdGhpcy5jb21tYW5kQnVzLmFkZEhhbmRsZXIoQ29tbWFuZFR5cGUuSW5pdEdhbWUsIHRoaXMucHJvY2Vzc0luaXRHYW1lQ29tbWFuZC5iaW5kKHRoaXMpKVxuICAgIH1cblxuICAgIHByaXZhdGUgcHJvY2Vzc0luaXRHYW1lQ29tbWFuZChjb21tYW5kOiBJbml0R2FtZUNvbW1hbmQpIHtcbiAgICAgICAgdGhpcy5ldmVudEJ1cy5vbihFdmVudFR5cGUuRmFsbGluZ1RpY2tQcm9jZXNzZWQsIHRoaXMub25GYWxsVGlja1Byb2Nlc3NlZC5iaW5kKHRoaXMpKVxuICAgIH1cblxuICAgIHByaXZhdGUgb25GYWxsVGlja1Byb2Nlc3NlZChldmVudDogRmFsbFRpY2tQcm9jZXNzZWRFdmVudCkge1xuICAgICAgICBpZiAoZXZlbnQuc3F1YXNoZWRMaW5lcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnNxdWFzaGVkUm93c0NvdW50ZXIrKztcbiAgICAgICAgaWYgKHRoaXMuc3F1YXNoZWRSb3dzQ291bnRlciA+PSB0aGlzLmxldmVsSW5jcmVhc2VPblNxdWFzaGVkUm93c051bWJlcikge1xuICAgICAgICAgICAgdGhpcy5zcXVhc2hlZFJvd3NDb3VudGVyID0gMDtcbiAgICAgICAgICAgIGV2ZW50LmdhbWVEYXRhLmxldmVsID0gTWF0aC5taW4odGhpcy5tYXhMZXZlbHMsIGV2ZW50LmdhbWVEYXRhLmxldmVsICsgMSk7XG4gICAgICAgIH1cbiAgICB9XG59XG4iLCJpbXBvcnQge0V2ZW50QnVzLCBFdmVudFR5cGUsIEZhbGxUaWNrUHJvY2Vzc2VkRXZlbnR9IGZyb20gXCIuLi9FdmVudEJ1cy9FdmVudEJ1c1wiO1xuaW1wb3J0IHtDb21tYW5kQnVzLCBDb21tYW5kVHlwZSwgSW5pdEdhbWVDb21tYW5kfSBmcm9tIFwiLi4vQ29tbWFuZEJ1cy9Db21tYW5kQnVzXCI7XG5cbmV4cG9ydCBjbGFzcyBDb21ib0NvdW50ZXIge1xuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBwdWJsaWMgY29tbWFuZEJ1czogQ29tbWFuZEJ1cyxcbiAgICAgICAgcHVibGljIGV2ZW50QnVzOiBFdmVudEJ1cyxcbiAgICApIHtcbiAgICAgICAgY29tbWFuZEJ1cy5hZGRIYW5kbGVyKENvbW1hbmRUeXBlLkluaXRHYW1lLCB0aGlzLmluaXRHYW1lSGFuZGxlci5iaW5kKHRoaXMpKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGluaXRHYW1lSGFuZGxlcihjb21tYW5kOiBJbml0R2FtZUNvbW1hbmQpIHtcbiAgICAgICAgdGhpcy5ldmVudEJ1cy5vbihFdmVudFR5cGUuRmFsbGluZ1RpY2tQcm9jZXNzZWQsIHRoaXMub25GYWxsVGlja1Byb2Nlc3NlZC5iaW5kKHRoaXMpKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIG9uRmFsbFRpY2tQcm9jZXNzZWQoZXZlbnQ6IEZhbGxUaWNrUHJvY2Vzc2VkRXZlbnQpIHtcbiAgICAgICAgaWYgKGV2ZW50LnRyYW5zZmVycmVkVG9NYXRyaXhGaWd1cmVzLmxlbmd0aCA8PSAwKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGV2ZW50LnNxdWFzaGVkTGluZXMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgZXZlbnQuZ2FtZURhdGEuY29tYm8gKz0gMTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGV2ZW50LmdhbWVEYXRhLmNvbWJvID0gMDtcbiAgICAgICAgfVxuICAgIH1cbn1cbiIsImltcG9ydCB7VGltaW5nc0hhbmRsZXJ9IGZyb20gXCIuL1RpbWluZ3NIYW5kbGVyXCI7XG5pbXBvcnQge0dhbWVEYXRhfSBmcm9tIFwiLi4vQ29tbW9uXCI7XG5cbmV4cG9ydCBjbGFzcyBDb25zdFRpbWluZ3NIYW5kbGVyIGltcGxlbWVudHMgVGltaW5nc0hhbmRsZXIge1xuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBwdWJsaWMgZGVsYXlNczogbnVtYmVyLFxuICAgICkge31cblxuICAgIGdldERlbGF5Rm9yTmV4dFRpY2tNcyhnYW1lRGF0YTogR2FtZURhdGEpOiBudW1iZXIge1xuICAgICAgICByZXR1cm4gdGhpcy5kZWxheU1zO1xuICAgIH1cbn1cbiIsImltcG9ydCB7Q29tbWFuZEJ1cywgQ29tbWFuZFR5cGUsIEluaXRHYW1lQ29tbWFuZH0gZnJvbSBcIi4uL0NvbW1hbmRCdXMvQ29tbWFuZEJ1c1wiO1xuaW1wb3J0IHtFdmVudEJ1cywgRXZlbnRUeXBlLCBGYWxsVGlja1Byb2Nlc3NlZEV2ZW50fSBmcm9tIFwiLi4vRXZlbnRCdXMvRXZlbnRCdXNcIjtcblxuZXhwb3J0IGNsYXNzIFN0YXRzQ291bnRlciB7XG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIHByaXZhdGUgY29tbWFuZEJ1czogQ29tbWFuZEJ1cyxcbiAgICAgICAgcHJpdmF0ZSBldmVudEJ1czogRXZlbnRCdXMsXG4gICAgKSB7XG4gICAgICAgIGNvbW1hbmRCdXMuYWRkSGFuZGxlcihDb21tYW5kVHlwZS5Jbml0R2FtZSwgdGhpcy5pbml0R2FtZUhhbmRsZXIuYmluZCh0aGlzKSk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBpbml0R2FtZUhhbmRsZXIoY29tbWFuZDogSW5pdEdhbWVDb21tYW5kKSB7XG4gICAgICAgIHRoaXMuZXZlbnRCdXMub24oRXZlbnRUeXBlLkZhbGxpbmdUaWNrUHJvY2Vzc2VkLCB0aGlzLm9uRmFsbGluZ1RpY2tQcm9jZXNzZWQuYmluZCh0aGlzKSk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBvbkZhbGxpbmdUaWNrUHJvY2Vzc2VkKGV2ZW50OiBGYWxsVGlja1Byb2Nlc3NlZEV2ZW50KSB7XG4gICAgICAgIGV2ZW50LmdhbWVEYXRhLnN0YXRzLmZpZ3VyZXNGYWxsZW4gKz0gZXZlbnQudHJhbnNmZXJyZWRUb01hdHJpeEZpZ3VyZXMubGVuZ3RoO1xuICAgICAgICBldmVudC5nYW1lRGF0YS5zdGF0cy5saW5lc1NxdWFzaGVkICs9IGV2ZW50LnNxdWFzaGVkTGluZXMubGVuZ3RoO1xuICAgIH1cbn1cbiIsImltcG9ydCB7R2FtZUNvbnRyb2xsZXJ9IGZyb20gJy4vR2FtZUNvbnRyb2xsZXInXG5pbXBvcnQge1RhYmxlUmVuZGVyZXIsIFRhYmxlUmVuZGVyZXJTZXR0aW5nc30gZnJvbSAnLi9SZW5kZXJlci9UYWJsZVJlbmRlcmVyJ1xuaW1wb3J0IHtSZWd1bGFyRmFsbGluZ0ZpZ3VyZXNQcm9jZXNzb3J9IGZyb20gXCIuL0ZhbGxpbmdGaWd1cmVzUHJvY2Vzc29yL1JlZ3VsYXJGYWxsaW5nRmlndXJlc1Byb2Nlc3NvclwiO1xuaW1wb3J0IHtBbHdheXNPbmVGaWd1cmVTcGF3bmVyfSBmcm9tIFwiLi9GaWd1cmVzU3Bhd25lci9BbHdheXNPbmVGaWd1cmVTcGF3bmVyXCI7XG5pbXBvcnQge0V2ZW50QnVzfSBmcm9tIFwiLi9FdmVudEJ1cy9FdmVudEJ1c1wiO1xuaW1wb3J0IHtDb21tYW5kQnVzLCBJbml0R2FtZUNvbW1hbmQsIFBhdXNlR2FtZUNvbW1hbmQsIFJlc3VtZUdhbWVDb21tYW5kfSBmcm9tIFwiLi9Db21tYW5kQnVzL0NvbW1hbmRCdXNcIjtcbmltcG9ydCB7TW92aW5nSGFuZGxlcn0gZnJvbSBcIi4vTW92aW5nSGFuZGxlci9Nb3ZpbmdIYW5kbGVyXCI7XG5pbXBvcnQge01vdmluZ0NvbnRyb2xsZXJ9IGZyb20gXCIuL01vdmluZ0NvbnRyb2xsZXIvTW92aW5nQ29udHJvbGxlclwiO1xuaW1wb3J0IHtMZXZlbEJhc2VkVGltaW5nc0hhbmRsZXJ9IGZyb20gXCIuL1RpbWluZ3NIYW5kbGVyL0xldmVsQmFzZWRUaW1pbmdzSGFuZGxlclwiO1xuaW1wb3J0IHtGYWxsVGlja1Njb3JlQ291bnRlcn0gZnJvbSBcIi4vU2NvcmVDb3VudGVyL0ZhbGxUaWNrU2NvcmVDb3VudGVyXCI7XG5pbXBvcnQge1NxdWFzaGVkUm93c0NvdW50ZXJCYXNlZExldmVsQ291bnRlcn0gZnJvbSBcIi4vTGV2ZWxDb3VudGVyL1NxdWFzaGVkUm93c0NvdW50ZXJCYXNlZExldmVsQ291bnRlclwiO1xuaW1wb3J0IHtHYW1lRGF0YX0gZnJvbSBcIi4vQ29tbW9uXCI7XG5pbXBvcnQge0NvbWJvQ291bnRlcn0gZnJvbSBcIi4vQ29tYm9Db3VudGVyL0NvbWJvQ291bnRlclwiO1xuaW1wb3J0IHtDb25zdFRpbWluZ3NIYW5kbGVyfSBmcm9tIFwiLi9UaW1pbmdzSGFuZGxlci9Db25zdFRpbWluZ3NIYW5kbGVyXCI7XG5pbXBvcnQge1N0YXRzQ291bnRlcn0gZnJvbSBcIi4vU3RhdHNDb3VudGVyL1N0YXRzQ291bnRlclwiO1xuXG5leHBvcnQgY2xhc3MgVGV0cmlzRmFjYWRlIHtcbiAgICBwdWJsaWMgY29uc3RydWN0b3IoXG4gICAgICAgIHByaXZhdGUgZXZlbnRCdXMgPSBuZXcgRXZlbnRCdXMoKSxcbiAgICAgICAgcHJpdmF0ZSBjb21tYW5kQnVzID0gbmV3IENvbW1hbmRCdXMoKSxcbiAgICAgICAgcHJpdmF0ZSBnYW1lQ29udHJvbGxlciA9IG5ldyBHYW1lQ29udHJvbGxlcihcbiAgICAgICAgICAgIC8vIG5ldyBMZXZlbEJhc2VkVGltaW5nc0hhbmRsZXIoMjAwMCksXG4gICAgICAgICAgICBuZXcgQ29uc3RUaW1pbmdzSGFuZGxlcigyMDAwKSxcbiAgICAgICAgICAgIGV2ZW50QnVzLFxuICAgICAgICAgICAgY29tbWFuZEJ1cyxcbiAgICAgICAgKSxcbiAgICAgICAgcHJpdmF0ZSBtb3ZpbmdIYW5kbGVyID0gbmV3IE1vdmluZ0hhbmRsZXIoXG4gICAgICAgICAgICBjb21tYW5kQnVzLFxuICAgICAgICAgICAgZXZlbnRCdXMsXG4gICAgICAgICksXG4gICAgICAgIHByaXZhdGUgbW92aW5nQ29udHJvbGxlciA9IG5ldyBNb3ZpbmdDb250cm9sbGVyKFxuICAgICAgICAgICAgY29tbWFuZEJ1cyxcbiAgICAgICAgKSxcbiAgICAgICAgcHJpdmF0ZSBmYWxsaW5nRmlndXJlc1Byb2Nlc3NvciA9IG5ldyBSZWd1bGFyRmFsbGluZ0ZpZ3VyZXNQcm9jZXNzb3IoXG4gICAgICAgICAgICBjb21tYW5kQnVzLFxuICAgICAgICAgICAgZXZlbnRCdXNcbiAgICAgICAgKSxcbiAgICAgICAgcHJpdmF0ZSBmaWd1cmVzU3Bhd25lciA9IG5ldyBBbHdheXNPbmVGaWd1cmVTcGF3bmVyKFxuICAgICAgICAgICAgZXZlbnRCdXMsXG4gICAgICAgICAgICBjb21tYW5kQnVzLFxuICAgICAgICApLFxuICAgICAgICBwcml2YXRlIGxldmVsQ291bnRlciA9IG5ldyBTcXVhc2hlZFJvd3NDb3VudGVyQmFzZWRMZXZlbENvdW50ZXIoXG4gICAgICAgICAgICBldmVudEJ1cyxcbiAgICAgICAgICAgIGNvbW1hbmRCdXMsXG4gICAgICAgICAgICA4LFxuICAgICAgICAgICAgMTUsXG4gICAgICAgICksXG4gICAgICAgIHByaXZhdGUgY29tYm9Db3VudGVyID0gbmV3IENvbWJvQ291bnRlcihcbiAgICAgICAgICAgIGNvbW1hbmRCdXMsXG4gICAgICAgICAgICBldmVudEJ1cyxcbiAgICAgICAgKSxcbiAgICAgICAgcHJpdmF0ZSBzY29yZUNvdW50ZXIgPSBuZXcgRmFsbFRpY2tTY29yZUNvdW50ZXIoXG4gICAgICAgICAgICBjb21tYW5kQnVzLFxuICAgICAgICAgICAgZXZlbnRCdXMsXG4gICAgICAgICksXG4gICAgICAgIHByaXZhdGUgc3RhdHNDb3VudGVyID0gbmV3IFN0YXRzQ291bnRlcihcbiAgICAgICAgICAgIGNvbW1hbmRCdXMsXG4gICAgICAgICAgICBldmVudEJ1cyxcbiAgICAgICAgKSxcbiAgICAgICAgcHJpdmF0ZSB0YWJsZVJlbmRlcmVyID0gbmV3IFRhYmxlUmVuZGVyZXIoXG4gICAgICAgICAgICBuZXcgVGFibGVSZW5kZXJlclNldHRpbmdzKFxuICAgICAgICAgICAgICAgIGRvY3VtZW50LmJvZHksXG4gICAgICAgICAgICApLFxuICAgICAgICAgICAgY29tbWFuZEJ1cyxcbiAgICAgICAgICAgIGV2ZW50QnVzXG4gICAgICAgICksXG4gICAgICAgIHB1YmxpYyBnYW1lRGF0YSA9IEdhbWVEYXRhLm1ha2VTaW1wbGUoKSxcbiAgICApIHt9XG5cbiAgICBwdWJsaWMgc3RhcnQoZ2FtZURhdGE/OiBHYW1lRGF0YSkge1xuICAgICAgICBnYW1lRGF0YSA9IGdhbWVEYXRhIHx8IEdhbWVEYXRhLm1ha2VTaW1wbGUoKTtcbiAgICAgICAgdGhpcy5jb21tYW5kQnVzLnJ1bihuZXcgSW5pdEdhbWVDb21tYW5kKGdhbWVEYXRhKSk7XG4gICAgICAgIHRoaXMuY29tbWFuZEJ1cy5ydW4obmV3IFJlc3VtZUdhbWVDb21tYW5kKGdhbWVEYXRhKSk7XG4gICAgfVxuXG4gICAgcHVibGljIHJlc3VtZSgpIHtcbiAgICAgICAgdGhpcy5jb21tYW5kQnVzLnJ1bihuZXcgUmVzdW1lR2FtZUNvbW1hbmQodGhpcy5nYW1lRGF0YSkpO1xuICAgIH1cblxuICAgIHB1YmxpYyBwYXVzZSgpIHtcbiAgICAgICAgdGhpcy5jb21tYW5kQnVzLnJ1bihuZXcgUGF1c2VHYW1lQ29tbWFuZCh0aGlzLmdhbWVEYXRhKSk7XG4gICAgfVxufVxuIiwiaW1wb3J0IHtGYWxsaW5nRmlndXJlfSBmcm9tIFwiLi4vVGV0cmlzL0NvbW1vblwiO1xuaW1wb3J0IHtGaWd1cmVUdXJuU3RhdGV9IGZyb20gXCIuLi9UZXRyaXMvRmlndXJlc1wiO1xuXG5leHBvcnQgaW50ZXJmYWNlIEZpZ3VyZVBsYWNpbmdTdGVwIHt9XG5cbmV4cG9ydCBjbGFzcyBUdXJuUGxhY2luZ1N0ZXAgaW1wbGVtZW50cyBGaWd1cmVQbGFjaW5nU3RlcHtcbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgcHVibGljIHRhcmdldDogRmlndXJlVHVyblN0YXRlXG4gICAgKSB7fVxufVxuXG5leHBvcnQgY2xhc3MgTW92ZVhQbGFjaW5nU3RlcCBpbXBsZW1lbnRzIEZpZ3VyZVBsYWNpbmdTdGVwe1xuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBwdWJsaWMgdGFyZ2V0OiBudW1iZXJcbiAgICApIHt9XG59XG5cbmV4cG9ydCBjbGFzcyBNb3ZlWVBsYWNpbmdTdGVwIGltcGxlbWVudHMgRmlndXJlUGxhY2luZ1N0ZXB7XG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIHB1YmxpYyB0YXJnZXQ6IG51bWJlclxuICAgICkge31cbn1cblxuZXhwb3J0IGNsYXNzIERyb3BQbGFjaW5nU3RlcCBpbXBsZW1lbnRzIEZpZ3VyZVBsYWNpbmdTdGVwe31cblxuZXhwb3J0IGNsYXNzIEZpZ3VyZVBsYWNpbmdSZXN1bHQge1xuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBwdWJsaWMgZmlndXJlc1RhcmdldFN0YXRlczogTWFwPEZhbGxpbmdGaWd1cmUsIEZhbGxpbmdGaWd1cmU+LFxuICAgICAgICBwdWJsaWMgcGxhY2luZ1N0ZXBzOiBGaWd1cmVQbGFjaW5nU3RlcFtdLFxuICAgICkge31cbn1cbiIsImltcG9ydCB7Q29vcmRpbmF0ZSwgRmFsbGluZ0ZpZ3VyZSwgR2FtZURhdGF9IGZyb20gXCIuLi9UZXRyaXMvQ29tbW9uXCI7XG5pbXBvcnQge0VudW1IZWxwZXJ9IGZyb20gXCIuLi9UZXRyaXMvVXRpbHMvRW51bUhlbHBlclwiO1xuaW1wb3J0IHtGaWd1cmVUdXJuU3RhdGV9IGZyb20gXCIuLi9UZXRyaXMvRmlndXJlc1wiO1xuaW1wb3J0IHtGaWd1cmVQbGFjaW5nQ2hlY2tlcn0gZnJvbSBcIi4uL1RldHJpcy9VdGlscy9GaWd1cmVQbGFjaW5nQ2hlY2tlclwiO1xuaW1wb3J0IHtDb21tYW5kQnVzLCBSZW5kZXJDb21tYW5kfSBmcm9tIFwiLi4vVGV0cmlzL0NvbW1hbmRCdXMvQ29tbWFuZEJ1c1wiO1xuaW1wb3J0IHtTY29yZUNhbGN1bGF0b3J9IGZyb20gXCIuL1Njb3JlQ2FsY3VsYXRvclwiO1xuaW1wb3J0IHtEcm9wUGxhY2luZ1N0ZXAsIEZpZ3VyZVBsYWNpbmdSZXN1bHQsIEZpZ3VyZVBsYWNpbmdTdGVwLCBNb3ZlWFBsYWNpbmdTdGVwLCBUdXJuUGxhY2luZ1N0ZXB9IGZyb20gXCIuL0NvbW1vblwiO1xuXG5jbGFzcyBQbGFjZVJlc29sdmluZ0Vycm9yIGV4dGVuZHMgRXJyb3Ige1xufVxuXG5jbGFzcyBHYW1lU3RhdGVOb3RTdXBwb3J0ZWRFcnJvciBleHRlbmRzIFBsYWNlUmVzb2x2aW5nRXJyb3Ige1xufVxuXG5leHBvcnQgY2xhc3MgRmlndXJlUGxhY2luZ1Jlc29sdmVyIHtcbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgcHJpdmF0ZSBjb21tYW5kQnVzOiBDb21tYW5kQnVzLFxuICAgICAgICBwcml2YXRlIHNjb3JlQ2FsY3VsYXRvcjogU2NvcmVDYWxjdWxhdG9yLFxuICAgICkge31cblxuICAgIHB1YmxpYyByZXNvbHZlKGdhbWVEYXRhOiBHYW1lRGF0YSk6IEZpZ3VyZVBsYWNpbmdSZXN1bHR8dW5kZWZpbmVkIHtcbiAgICAgICAgaWYgKGdhbWVEYXRhLmZhbGxpbmdGaWd1cmVzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmIChnYW1lRGF0YS5mYWxsaW5nRmlndXJlcy5sZW5ndGggIT09IDEpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBHYW1lU3RhdGVOb3RTdXBwb3J0ZWRFcnJvcigpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IG9yaWdpbmFsRmlndXJlID0gZ2FtZURhdGEuZmFsbGluZ0ZpZ3VyZXNbMF07XG5cbiAgICAgICAgbGV0IG1heFNjb3JlID0gLUluZmluaXR5O1xuICAgICAgICBsZXQgdGhlQmVzdFJlc3VsdCA9IG5ldyBGaWd1cmVQbGFjaW5nUmVzdWx0KG5ldyBNYXAoKSwgW10pO1xuXG4gICAgICAgIHRoaXMucHJvY2Vzc1N0YXRlcyhnYW1lRGF0YSwgKGltYWdpbmFibGVGaWd1cmU6IEZhbGxpbmdGaWd1cmUsIHNjb3JlOiBudW1iZXIsIHBsYWNpbmdEaXJlY3Rpb25zOiBGaWd1cmVQbGFjaW5nU3RlcFtdKSA9PiB7XG4gICAgICAgICAgICBpZiAoc2NvcmUgPiBtYXhTY29yZSkge1xuICAgICAgICAgICAgICAgIG1heFNjb3JlID0gc2NvcmU7XG4gICAgICAgICAgICAgICAgdGhlQmVzdFJlc3VsdCA9IG5ldyBGaWd1cmVQbGFjaW5nUmVzdWx0KFxuICAgICAgICAgICAgICAgICAgICBuZXcgTWFwKFtbb3JpZ2luYWxGaWd1cmUsIGltYWdpbmFibGVGaWd1cmVdXSksXG4gICAgICAgICAgICAgICAgICAgIHBsYWNpbmdEaXJlY3Rpb25zXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSlcblxuICAgICAgICBsZXQgZGVidWdNb2RlID0gJ2RlYnVnTW9kZScgaW4gd2luZG93ICYmIHdpbmRvdy5kZWJ1Z01vZGU7XG4gICAgICAgIGxldCBpbWFnaW5hYmxlRmlndXJlID0gdGhlQmVzdFJlc3VsdC5maWd1cmVzVGFyZ2V0U3RhdGVzLmdldChvcmlnaW5hbEZpZ3VyZSk7XG4gICAgICAgIGlmIChkZWJ1Z01vZGUgJiYgaW1hZ2luYWJsZUZpZ3VyZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBsZXQgZmFrZUdhbWVEYXRhID0gc3RydWN0dXJlZENsb25lKGdhbWVEYXRhKTtcbiAgICAgICAgICAgIGltYWdpbmFibGVGaWd1cmUuY29sb3IgPSAnI2YwMCc7XG4gICAgICAgICAgICBmYWtlR2FtZURhdGEuZmFsbGluZ0ZpZ3VyZXMgPSBbaW1hZ2luYWJsZUZpZ3VyZV07XG4gICAgICAgICAgICB0aGlzLmNvbW1hbmRCdXMucnVuKG5ldyBSZW5kZXJDb21tYW5kKGZha2VHYW1lRGF0YSkpO1xuXG4gICAgICAgICAgICB0aGlzLnByb2Nlc3NTdGF0ZXMoZ2FtZURhdGEsIHVuZGVmaW5lZCwgKGltYWdpbmFibGVGaWd1cmU6IEZhbGxpbmdGaWd1cmUpID0+IHtcbiAgICAgICAgICAgICAgICBpbWFnaW5hYmxlRmlndXJlLmNvbG9yID0gJyMwMGYnO1xuICAgICAgICAgICAgICAgIGZha2VHYW1lRGF0YS5mYWxsaW5nRmlndXJlcyA9IFtpbWFnaW5hYmxlRmlndXJlXTtcbiAgICAgICAgICAgICAgICB0aGlzLmNvbW1hbmRCdXMucnVuKG5ldyBSZW5kZXJDb21tYW5kKGZha2VHYW1lRGF0YSkpO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGVCZXN0UmVzdWx0O1xuICAgIH1cblxuICAgIHByaXZhdGUgcHJvY2Vzc1N0YXRlcyhcbiAgICAgICAgZ2FtZURhdGE6IEdhbWVEYXRhLFxuICAgICAgICBvbkFmdGVyU2NvcmVDYWxjdWxhdGVzPzogKGltYWdpbmFibGVGaWd1cmU6IEZhbGxpbmdGaWd1cmUsIHNjb3JlOiBudW1iZXIsIHBsYWNpbmdEaXJlY3Rpb25zOiBGaWd1cmVQbGFjaW5nU3RlcFtdKSA9PiB2b2lkLFxuICAgICAgICBvbkJlZm9yZVNjb3JlQ2FsY3VsYXRlcz86IChpbWFnaW5hYmxlRmlndXJlOiBGYWxsaW5nRmlndXJlKSA9PiB2b2lkLFxuICAgICkge1xuICAgICAgICBjb25zdCBvcmlnaW5hbEZpZ3VyZSA9IGdhbWVEYXRhLmZhbGxpbmdGaWd1cmVzWzBdO1xuXG4gICAgICAgIGxldCBlbnVtcyA9IEVudW1IZWxwZXIuVG9BcnJheShGaWd1cmVUdXJuU3RhdGUpO1xuICAgICAgICB3aGlsZSAoZW51bXNbMF0gIT09IG9yaWdpbmFsRmlndXJlLnR1cm5TdGF0ZSkge1xuICAgICAgICAgICAgZW51bXMudW5zaGlmdChlbnVtcy5wb3AoKSk7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IG1hdHJpY2VzOiBNYXA8RmlndXJlVHVyblN0YXRlLCBib29sZWFuW11bXT4gPSBuZXcgTWFwKCk7XG4gICAgICAgIGxldCBzdHJpbmd5TWF0cmljZXM6IFNldDxzdHJpbmc+ID0gbmV3IFNldCgpO1xuICAgICAgICBlbnVtcy5mb3JFYWNoKHR1cm5TdGF0ZSA9PiB7XG4gICAgICAgICAgICBsZXQgZmlndXJlTWF0cml4ID0gb3JpZ2luYWxGaWd1cmUuZmlndXJlLmdldFR1cm4odHVyblN0YXRlKTtcbiAgICAgICAgICAgIGxldCBzdHJpbmd5RmlndXJlTWF0cml4ID0gZmlndXJlTWF0cml4Lm1hcChyb3cgPT4gcm93Lm1hcCh2YWwgPT4gdmFsID8gXCIxXCIgOiBcIjBcIikuam9pbigpKS5qb2luKFwiXFxuXCIpO1xuICAgICAgICAgICAgaWYgKCFzdHJpbmd5TWF0cmljZXMuaGFzKHN0cmluZ3lGaWd1cmVNYXRyaXgpKSB7XG4gICAgICAgICAgICAgICAgc3RyaW5neU1hdHJpY2VzLmFkZChzdHJpbmd5RmlndXJlTWF0cml4KTtcbiAgICAgICAgICAgICAgICBtYXRyaWNlcy5zZXQodHVyblN0YXRlLCBmaWd1cmVNYXRyaXgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICBtYXRyaWNlcy5mb3JFYWNoKChmaWd1cmVNYXRyaXgsIHR1cm5TdGF0ZSkgPT4ge1xuICAgICAgICAgICAgZm9yIChsZXQgeCA9IDA7IHggPCBnYW1lRGF0YS5zZXR0aW5ncy5maWVsZFdpZHRoIC0gZmlndXJlTWF0cml4WzBdLmxlbmd0aCArIDE7IHgrKykge1xuICAgICAgICAgICAgICAgIGxldCBbeSwgaW1hZ2luYWJsZU1hdHJpeF0gPSB0aGlzLmltYWdpbmVGaWd1cmVEcm9wKGdhbWVEYXRhLm1hdHJpeCwgZmlndXJlTWF0cml4LCB4KTtcbiAgICAgICAgICAgICAgICBsZXQgY29vcmRpbmF0ZSA9IG5ldyBDb29yZGluYXRlKHgsIHkpO1xuICAgICAgICAgICAgICAgIGxldCBzcXVhc2hlZExpbmVzQ291bnQgPSB0aGlzLnNxdWFzaExpbmVzKGltYWdpbmFibGVNYXRyaXgpO1xuICAgICAgICAgICAgICAgIGxldCBpbWFnaW5hYmxlRmlndXJlID0gbmV3IEZhbGxpbmdGaWd1cmUob3JpZ2luYWxGaWd1cmUuZmlndXJlLCBjb29yZGluYXRlLCB0dXJuU3RhdGUpO1xuICAgICAgICAgICAgICAgIGlmIChvbkJlZm9yZVNjb3JlQ2FsY3VsYXRlcykge1xuICAgICAgICAgICAgICAgICAgICBvbkJlZm9yZVNjb3JlQ2FsY3VsYXRlcyhpbWFnaW5hYmxlRmlndXJlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgbGV0IHNjb3JlID0gdGhpcy5zY29yZUNhbGN1bGF0b3IuY2FsY3VsYXRlU2NvcmUoZ2FtZURhdGEsIGltYWdpbmFibGVNYXRyaXgsIHNxdWFzaGVkTGluZXNDb3VudCk7XG4gICAgICAgICAgICAgICAgbGV0IGRpcmVjdGlvbnMgPSB0aGlzLm1ha2VTaW1wbGVQbGFjaW5nU3RlcHMob3JpZ2luYWxGaWd1cmUsIGltYWdpbmFibGVGaWd1cmUpO1xuICAgICAgICAgICAgICAgIGlmIChvbkFmdGVyU2NvcmVDYWxjdWxhdGVzKSB7XG4gICAgICAgICAgICAgICAgICAgIG9uQWZ0ZXJTY29yZUNhbGN1bGF0ZXMoaW1hZ2luYWJsZUZpZ3VyZSwgc2NvcmUsIGRpcmVjdGlvbnMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgY29uc3Qgb3BlbkhvbGVzID0gdGhpcy5jb2xsZWN0T3BlbkhvbGVzKGdhbWVEYXRhLm1hdHJpeCk7XG4gICAgICAgIG9wZW5Ib2xlcy5mb3JFYWNoKChbdG9wTGVmdENvb3JkaW5hdGUsIGJvdHRvbVJpZ2h0Q29vcmRpbmF0ZV06IFtDb29yZGluYXRlLCBDb29yZGluYXRlXSkgPT4ge1xuICAgICAgICAgICAgbWF0cmljZXMuZm9yRWFjaCgoZmlndXJlTWF0cml4LCB0dXJuU3RhdGUpID0+IHtcbiAgICAgICAgICAgICAgICBmb3IgKGxldCB5ID0gTWF0aC5taW4odG9wTGVmdENvb3JkaW5hdGUueSAtIGZpZ3VyZU1hdHJpeC5sZW5ndGgsIDApOyB5Kys7IHkgPD0gYm90dG9tUmlnaHRDb29yZGluYXRlLnkpIHtcbiAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgeCA9IE1hdGgubWluKHRvcExlZnRDb29yZGluYXRlLnggLSBmaWd1cmVNYXRyaXhbMF0ubGVuZ3RoLCAwKTsgeCsrOyB4IDw9IGJvdHRvbVJpZ2h0Q29vcmRpbmF0ZS54KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgY29vcmRpbmF0ZSA9IG5ldyBDb29yZGluYXRlKHgsIHkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKEZpZ3VyZVBsYWNpbmdDaGVja2VyLmNhbkZpZ3VyZUJlUGxhY2VkKGZpZ3VyZU1hdHJpeCwgY29vcmRpbmF0ZSwgZ2FtZURhdGEubWF0cml4KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBpbWFnaW5hYmxlRmlndXJlID0gbmV3IEZhbGxpbmdGaWd1cmUob3JpZ2luYWxGaWd1cmUuZmlndXJlLCBjb29yZGluYXRlLCB0dXJuU3RhdGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBkaXJlY3Rpb25zID0gdGhpcy5tYWtlUHVzaEluUGxhY2luZ1N0ZXBzKGdhbWVEYXRhLCBvcmlnaW5hbEZpZ3VyZSwgaW1hZ2luYWJsZUZpZ3VyZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRpcmVjdGlvbnMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgaW1hZ2luYWJsZU1hdHJpeCA9IHRoaXMuaW1hZ2luZUZpZ3VyZVBsYWNpbmcoZ2FtZURhdGEubWF0cml4LCBmaWd1cmVNYXRyaXgsIGNvb3JkaW5hdGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgc3F1YXNoZWRMaW5lc0NvdW50ID0gdGhpcy5zcXVhc2hMaW5lcyhpbWFnaW5hYmxlTWF0cml4KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9uQmVmb3JlU2NvcmVDYWxjdWxhdGVzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkJlZm9yZVNjb3JlQ2FsY3VsYXRlcyhpbWFnaW5hYmxlRmlndXJlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgc2NvcmUgPSB0aGlzLnNjb3JlQ2FsY3VsYXRvci5jYWxjdWxhdGVTY29yZShnYW1lRGF0YSwgaW1hZ2luYWJsZU1hdHJpeCwgc3F1YXNoZWRMaW5lc0NvdW50KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9uQWZ0ZXJTY29yZUNhbGN1bGF0ZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uQWZ0ZXJTY29yZUNhbGN1bGF0ZXMoaW1hZ2luYWJsZUZpZ3VyZSwgc2NvcmUsIGRpcmVjdGlvbnMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHByaXZhdGUgc3F1YXNoTGluZXMobWF0cml4OiBib29sZWFuW11bXSk6IG51bWJlciB7XG4gICAgICAgIGxldCBsaW5lc1RvU3F1YXNoOiBudW1iZXJbXSA9IFtdO1xuICAgICAgICBtYXRyaXguZm9yRWFjaCgocm93LCB5KSA9PiB7XG4gICAgICAgICAgICBsZXQgY2FuQmVTcXVhc2hlZCA9IHJvdy5ldmVyeShjZWxsID0+IGNlbGwpO1xuICAgICAgICAgICAgaWYgKGNhbkJlU3F1YXNoZWQpIHtcbiAgICAgICAgICAgICAgICBsaW5lc1RvU3F1YXNoLnB1c2goeSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIDApO1xuICAgICAgICBsaW5lc1RvU3F1YXNoLmZvckVhY2goeSA9PiB7XG4gICAgICAgICAgICBtYXRyaXguc3BsaWNlKHksIDEpO1xuICAgICAgICAgICAgbWF0cml4LnVuc2hpZnQobmV3IEFycmF5KG1hdHJpeFswXS5sZW5ndGgpLmZpbGwoZmFsc2UpKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBsaW5lc1RvU3F1YXNoLmxlbmd0aDtcbiAgICB9XG5cbiAgICBwcml2YXRlIGltYWdpbmVGaWd1cmVEcm9wKGdhbWVNYXRyaXg6IGJvb2xlYW5bXVtdLCBmaWd1cmVNYXRyaXg6IGJvb2xlYW5bXVtdLCB0YXJnZXRYOiBudW1iZXIpOiBbbnVtYmVyLCBib29sZWFuW11bXV0ge1xuICAgICAgICBsZXQgdGFyZ2V0WSA9IC1maWd1cmVNYXRyaXgubGVuZ3RoO1xuICAgICAgICB3aGlsZSAoRmlndXJlUGxhY2luZ0NoZWNrZXIuY2FuRmlndXJlQmVQbGFjZWQoZmlndXJlTWF0cml4LCBuZXcgQ29vcmRpbmF0ZSh0YXJnZXRYLCB0YXJnZXRZICsgMSksIGdhbWVNYXRyaXgpKSB7XG4gICAgICAgICAgICB0YXJnZXRZKys7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgIHRhcmdldFksXG4gICAgICAgICAgICB0aGlzLmltYWdpbmVGaWd1cmVQbGFjaW5nKGdhbWVNYXRyaXgsIGZpZ3VyZU1hdHJpeCwgbmV3IENvb3JkaW5hdGUodGFyZ2V0WCwgdGFyZ2V0WSkpLFxuICAgICAgICBdO1xuICAgIH1cblxuICAgIHByaXZhdGUgaW1hZ2luZUZpZ3VyZVBsYWNpbmcoZ2FtZU1hdHJpeDogYm9vbGVhbltdW10sIGZpZ3VyZU1hdHJpeDogYm9vbGVhbltdW10sIHRhcmdldENvb3JkaW5hdGU6IENvb3JkaW5hdGUpOiBib29sZWFuW11bXSB7XG4gICAgICAgIGxldCBpbWFnaW5hYmxlTWF0cml4OiBib29sZWFuW11bXSA9IHN0cnVjdHVyZWRDbG9uZShnYW1lTWF0cml4KTtcbiAgICAgICAgZmlndXJlTWF0cml4LmZvckVhY2goKHJvdywgZmlndXJlWSkgPT4ge1xuICAgICAgICAgICAgcm93LmZvckVhY2goKHZhbCwgZmlndXJlWCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IHJlYWxZID0gdGFyZ2V0Q29vcmRpbmF0ZS55ICsgZmlndXJlWTtcbiAgICAgICAgICAgICAgICBjb25zdCByZWFsWCA9IHRhcmdldENvb3JkaW5hdGUueCArIGZpZ3VyZVg7XG4gICAgICAgICAgICAgICAgaWYgKHJlYWxZIGluIGltYWdpbmFibGVNYXRyaXhcbiAgICAgICAgICAgICAgICAgICAgJiYgcmVhbFggaW4gaW1hZ2luYWJsZU1hdHJpeFtyZWFsWV1cbiAgICAgICAgICAgICAgICAgICAgJiYgdmFsXG4gICAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgICAgIGltYWdpbmFibGVNYXRyaXhbcmVhbFldW3JlYWxYXSA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSlcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBpbWFnaW5hYmxlTWF0cml4O1xuICAgIH1cblxuICAgIHByaXZhdGUgY29sbGVjdE9wZW5Ib2xlcyhtYXRyaXg6IGJvb2xlYW5bXVtdKTogW0Nvb3JkaW5hdGUsIENvb3JkaW5hdGVdW10ge1xuICAgICAgICByZXR1cm4gW107XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBtYWtlUHVzaEluUGxhY2luZ1N0ZXBzKGdhbWVEYXRhOiBHYW1lRGF0YSwgb3JpZ2luYWxGaWd1cmU6IEZhbGxpbmdGaWd1cmUsIGltYWdpbmFibGVGaWd1cmU6IEZhbGxpbmdGaWd1cmUpOiBGaWd1cmVQbGFjaW5nU3RlcFtdfHVuZGVmaW5lZCB7XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBtYWtlU2ltcGxlUGxhY2luZ1N0ZXBzKG9yaWdpbmFsRmlndXJlOiBGYWxsaW5nRmlndXJlLCBpbWFnaW5hYmxlRmlndXJlOiBGYWxsaW5nRmlndXJlKTogRmlndXJlUGxhY2luZ1N0ZXBbXSB7XG4gICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICBuZXcgVHVyblBsYWNpbmdTdGVwKGltYWdpbmFibGVGaWd1cmUudHVyblN0YXRlKSxcbiAgICAgICAgICAgIG5ldyBNb3ZlWFBsYWNpbmdTdGVwKGltYWdpbmFibGVGaWd1cmUucG9zaXRpb24ueCksXG4gICAgICAgICAgICBuZXcgRHJvcFBsYWNpbmdTdGVwKCksXG4gICAgICAgIF07XG4gICAgfVxufVxuIiwiaW1wb3J0IHtUaW1pbmdzSGFuZGxlcn0gZnJvbSBcIi4vVGltaW5nc0hhbmRsZXJcIjtcbmltcG9ydCB7R2FtZURhdGF9IGZyb20gXCIuLi9Db21tb25cIjtcblxuZXhwb3J0IGNsYXNzIExldmVsQmFzZWRUaW1pbmdzSGFuZGxlciBpbXBsZW1lbnRzIFRpbWluZ3NIYW5kbGVyIHtcbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgcHJpdmF0ZSBpbml0aWFsRGVsYXlNczogbnVtYmVyLFxuICAgICAgICBwcml2YXRlIGJhc2U6IG51bWJlciA9IDAuOCxcbiAgICApIHt9XG5cbiAgICBnZXREZWxheUZvck5leHRUaWNrTXMoZ2FtZURhdGE6IEdhbWVEYXRhKTogbnVtYmVyIHtcbiAgICAgICAgcmV0dXJuIE1hdGgucG93KHRoaXMuYmFzZSAtIChnYW1lRGF0YS5sZXZlbCAtIDEpICogMC4wMDcsIGdhbWVEYXRhLmxldmVsIC0gMSkgKiB0aGlzLmluaXRpYWxEZWxheU1zO1xuICAgIH1cbn1cbiIsImltcG9ydCB7R2FtZURhdGF9IGZyb20gXCIuLi9UZXRyaXMvQ29tbW9uXCI7XG5pbXBvcnQge0NvbW1hbmRCdXMsIERyb3BGaWd1cmVzQ29tbWFuZCwgTW92ZURvd25Db21tYW5kLCBNb3ZlTGVmdENvbW1hbmQsIE1vdmVSaWdodENvbW1hbmQsIFR1cm5DbG9ja3dpc2VDb21tYW5kfSBmcm9tIFwiLi4vVGV0cmlzL0NvbW1hbmRCdXMvQ29tbWFuZEJ1c1wiO1xuaW1wb3J0IHtMZXZlbEJhc2VkVGltaW5nc0hhbmRsZXJ9IGZyb20gXCIuLi9UZXRyaXMvVGltaW5nc0hhbmRsZXIvTGV2ZWxCYXNlZFRpbWluZ3NIYW5kbGVyXCI7XG5pbXBvcnQge0Ryb3BQbGFjaW5nU3RlcCwgRmlndXJlUGxhY2luZ1Jlc3VsdCwgRmlndXJlUGxhY2luZ1N0ZXAsIE1vdmVYUGxhY2luZ1N0ZXAsIE1vdmVZUGxhY2luZ1N0ZXAsIFR1cm5QbGFjaW5nU3RlcH0gZnJvbSBcIi4vQ29tbW9uXCI7XG5cbmNsYXNzIFBsYWNpbmdFcnJvciBleHRlbmRzIEVycm9yIHt9XG5jbGFzcyBHYW1lU3RhdGVOb3RTdXBwb3J0ZWRFcnJvciBleHRlbmRzIFBsYWNpbmdFcnJvciB7fVxuY2xhc3MgSW5jb25zaXN0ZW50VGFyZ2V0U3RhdGVFcnJvciBleHRlbmRzIFBsYWNpbmdFcnJvciB7fVxuY2xhc3MgTm90U3VwcG9ydGVkRGlyZWN0aW9uU3RlcEVycm9yIGV4dGVuZHMgUGxhY2luZ0Vycm9yIHt9XG5cbmV4cG9ydCBjbGFzcyBGaWd1cmVQbGFjaW5nUGVyZm9ybWVyIHtcbiAgICBwcml2YXRlIG5leHRNb3ZlVGltZW91dElkOiBSZXR1cm5UeXBlPHR5cGVvZiBzZXRUaW1lb3V0PiA9IHNldFRpbWVvdXQoKCkgPT4ge30pO1xuICAgIHByaXZhdGUgdGFyZ2V0U3RhdGU/OiBGaWd1cmVQbGFjaW5nUmVzdWx0O1xuICAgIHByaXZhdGUgZ2FtZURhdGE6IEdhbWVEYXRhID0gR2FtZURhdGEubWFrZVNpbXBsZSgpO1xuXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIHByaXZhdGUgY29tbWFuZEJ1czogQ29tbWFuZEJ1cyxcbiAgICAgICAgcHJpdmF0ZSB0aW1pbmdzSGFuZGxlciA9IG5ldyBMZXZlbEJhc2VkVGltaW5nc0hhbmRsZXIoMTAwLCAwLjkpLFxuICAgICkge31cblxuICAgIHB1YmxpYyBwbGFjZShnYW1lRGF0YTogR2FtZURhdGEsIHRhcmdldFN0YXRlPzogRmlndXJlUGxhY2luZ1Jlc3VsdCkge1xuICAgICAgICB0aGlzLmdhbWVEYXRhID0gZ2FtZURhdGE7XG4gICAgICAgIHRoaXMudGFyZ2V0U3RhdGUgPSB0YXJnZXRTdGF0ZTtcbiAgICAgICAgY2xlYXJUaW1lb3V0KHRoaXMubmV4dE1vdmVUaW1lb3V0SWQpO1xuICAgICAgICB0aGlzLm5leHRNb3ZlVGltZW91dElkID0gc2V0VGltZW91dChcbiAgICAgICAgICAgIHRoaXMucHJvY2Vzc1RpY2suYmluZCh0aGlzKSxcbiAgICAgICAgICAgIHRoaXMudGltaW5nc0hhbmRsZXIuZ2V0RGVsYXlGb3JOZXh0VGlja01zKHRoaXMuZ2FtZURhdGEpLFxuICAgICAgICApO1xuICAgIH1cblxuICAgIHByaXZhdGUgcHJvY2Vzc1RpY2soKSB7XG4gICAgICAgIGlmICh0aGlzLmdhbWVEYXRhLmZhbGxpbmdGaWd1cmVzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmdhbWVEYXRhLmZhbGxpbmdGaWd1cmVzLmxlbmd0aCAhPT0gMSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEdhbWVTdGF0ZU5vdFN1cHBvcnRlZEVycm9yKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMudGFyZ2V0U3RhdGUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IG9yaWdpbmFsRmlndXJlID0gdGhpcy5nYW1lRGF0YS5mYWxsaW5nRmlndXJlc1swXTtcbiAgICAgICAgY29uc3QgdGFyZ2V0RmlndXJlID0gdGhpcy50YXJnZXRTdGF0ZS5maWd1cmVzVGFyZ2V0U3RhdGVzLmdldChvcmlnaW5hbEZpZ3VyZSk7XG4gICAgICAgIGlmICghdGFyZ2V0RmlndXJlKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAob3JpZ2luYWxGaWd1cmUuZmlndXJlICE9PSB0YXJnZXRGaWd1cmUuZmlndXJlKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgSW5jb25zaXN0ZW50VGFyZ2V0U3RhdGVFcnJvcihcIkJvdGggb2YgdGhlIG9yaWdpbmFsIGFuZCB0aGUgdGFyZ2V0IGZhbGxpbmcgZmlndXJlcyBtdXN0IGhhdmUgdGhlIHNhbWUgZmlndXJlIGluIGl0LlwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBhbGxTdGVwc1Bhc3NlZCA9IHRoaXMudGFyZ2V0U3RhdGUucGxhY2luZ1N0ZXBzLmV2ZXJ5KHN0ZXAgPT4ge1xuICAgICAgICAgICAgaWYgKHN0ZXAgaW5zdGFuY2VvZiBUdXJuUGxhY2luZ1N0ZXApIHtcbiAgICAgICAgICAgICAgICBpZiAob3JpZ2luYWxGaWd1cmUudHVyblN0YXRlICE9PSBzdGVwLnRhcmdldCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbW1hbmRCdXMucnVuKG5ldyBUdXJuQ2xvY2t3aXNlQ29tbWFuZCh0aGlzLmdhbWVEYXRhKSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHN0ZXAgaW5zdGFuY2VvZiBNb3ZlWFBsYWNpbmdTdGVwKSB7XG4gICAgICAgICAgICAgICAgaWYgKG9yaWdpbmFsRmlndXJlLnBvc2l0aW9uLnggIT09IHN0ZXAudGFyZ2V0KSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChvcmlnaW5hbEZpZ3VyZS5wb3NpdGlvbi54ID4gc3RlcC50YXJnZXQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY29tbWFuZEJ1cy5ydW4obmV3IE1vdmVMZWZ0Q29tbWFuZCh0aGlzLmdhbWVEYXRhKSk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbW1hbmRCdXMucnVuKG5ldyBNb3ZlUmlnaHRDb21tYW5kKHRoaXMuZ2FtZURhdGEpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChzdGVwIGluc3RhbmNlb2YgTW92ZVlQbGFjaW5nU3RlcCkge1xuICAgICAgICAgICAgICAgIGlmIChvcmlnaW5hbEZpZ3VyZS5wb3NpdGlvbi55IDwgc3RlcC50YXJnZXQpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jb21tYW5kQnVzLnJ1bihuZXcgTW92ZURvd25Db21tYW5kKHRoaXMuZ2FtZURhdGEpKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoc3RlcCBpbnN0YW5jZW9mIERyb3BQbGFjaW5nU3RlcCkge1xuICAgICAgICAgICAgICAgIHRoaXMuY29tbWFuZEJ1cy5ydW4obmV3IERyb3BGaWd1cmVzQ29tbWFuZCh0aGlzLmdhbWVEYXRhKSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBOb3RTdXBwb3J0ZWREaXJlY3Rpb25TdGVwRXJyb3IoXCJVbmtub3duIHN0ZXAgXCIgKyBzdGVwLmNvbnN0cnVjdG9yLm5hbWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICBpZiAoIWFsbFN0ZXBzUGFzc2VkKSB7XG4gICAgICAgICAgICAvLyB0aGlzLnByb2Nlc3NUaWNrKCk7XG4gICAgICAgICAgICB0aGlzLm5leHRNb3ZlVGltZW91dElkID0gc2V0VGltZW91dChcbiAgICAgICAgICAgICAgICB0aGlzLnByb2Nlc3NUaWNrLmJpbmQodGhpcyksXG4gICAgICAgICAgICAgICAgLy8gMCxcbiAgICAgICAgICAgICAgICB0aGlzLnRpbWluZ3NIYW5kbGVyLmdldERlbGF5Rm9yTmV4dFRpY2tNcyh0aGlzLmdhbWVEYXRhKSxcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICB9XG59XG4iLCJpbXBvcnQge0dhbWVEYXRhfSBmcm9tIFwiLi4vVGV0cmlzL0NvbW1vblwiO1xuXG5leHBvcnQgY2xhc3MgU2NvcmVDYWxjdWxhdG9yIHtcbiAgICBwdWJsaWMgY2FsY3VsYXRlU2NvcmUoZ2FtZURhdGE6IEdhbWVEYXRhLCBtYXRyaXg6IGJvb2xlYW5bXVtdLCBzcXVhc2hlZExpbmVzQ291bnQ6IG51bWJlcik6IG51bWJlciB7XG4gICAgICAgIGNvbnN0IGZpZWxkSGVpZ2h0ID0gZ2FtZURhdGEuc2V0dGluZ3MuZmllbGRIZWlnaHQ7XG4gICAgICAgIGNvbnN0IGZpZWxkV2lkdGggPSBnYW1lRGF0YS5zZXR0aW5ncy5maWVsZFdpZHRoO1xuICAgICAgICBjb25zdCBzcXVhc2hlZExpbmVzU2NvcmUgPSBzcXVhc2hlZExpbmVzQ291bnQgKiA1O1xuXG4gICAgICAgIGNvbnN0IG9yaWdpbmFsSG9sZXNDb3VudCA9IHRoaXMuY2FsY3VsYXRlSG9sZXMoZ2FtZURhdGEubWF0cml4KTtcbiAgICAgICAgY29uc3QgW2hvbGVzQ291bnQsIGhvbGVzQ292ZXJlZEhlaWdodF0gPSB0aGlzLmNhbGN1bGF0ZUhvbGVzQW5kQ292ZXJlZEhlaWdodChtYXRyaXgsIGdhbWVEYXRhLm1hdHJpeCk7XG4gICAgICAgIGNvbnN0IGhvbGVzQ291bnREZWNyZWFzZSA9IG9yaWdpbmFsSG9sZXNDb3VudCAtIGhvbGVzQ291bnQ7XG4gICAgICAgIGxldCBob2xlc1Njb3JlOiBudW1iZXI7XG4gICAgICAgIGlmIChob2xlc0NvdmVyZWRIZWlnaHQgPT09IDAgfHwgaG9sZXNDb3VudCA9PT0gMCkge1xuICAgICAgICAgICAgaG9sZXNTY29yZSA9IChob2xlc0NvdW50RGVjcmVhc2UgPiAwID8gaG9sZXNDb3VudERlY3JlYXNlICogMTUwIDogaG9sZXNDb3VudERlY3JlYXNlICogNzApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaG9sZXNTY29yZSA9IChob2xlc0NvdW50RGVjcmVhc2UgPiAwID8gaG9sZXNDb3VudERlY3JlYXNlICogMTUwIDogaG9sZXNDb3VudERlY3JlYXNlICogNzApXG4gICAgICAgICAgICAgICAgLSBob2xlc0NvdmVyZWRIZWlnaHQgKiBNYXRoLnBvdyhob2xlc0NvdmVyZWRIZWlnaHQsIGhvbGVzQ292ZXJlZEhlaWdodCAvIChmaWVsZEhlaWdodCAqIGhvbGVzQ291bnQpKSAqIDU7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBoZWlnaHQgPSB0aGlzLmNhbGN1bGF0ZUhlaWdodChtYXRyaXgpO1xuICAgICAgICBjb25zdCBoZWlnaHRTY29yZSA9IC1oZWlnaHQgKiBNYXRoLnBvdyhoZWlnaHQsIGhlaWdodCAvIGZpZWxkSGVpZ2h0KSAqIDM7XG5cbiAgICAgICAgY29uc3QgW2ZpbGxhYmxlQ2VsbHNDb3VudCwgZmlsbGFibGVIZWlnaHRdID0gdGhpcy5jYWxjdWxhdGVGaWxsYWJsZVNwYWNlKG1hdHJpeCwgZmllbGRXaWR0aCk7XG4gICAgICAgIGxldCBmaWxsYWJsZUNlbGxzU2NvcmUgPSAwO1xuICAgICAgICBpZiAoZmlsbGFibGVIZWlnaHQgPiA1KSB7XG4gICAgICAgICAgICBmaWxsYWJsZUNlbGxzU2NvcmUgPSAtZmlsbGFibGVDZWxsc0NvdW50ICogTWF0aC5wb3coZmlsbGFibGVDZWxsc0NvdW50LCBmaWxsYWJsZUNlbGxzQ291bnQgLyAoZmllbGRIZWlnaHQgKiBmaWVsZFdpZHRoKSk7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBbdHVubmVsc1N1bUhlaWdodCwgdHVubmVsc0NvdW50XSA9IHRoaXMuY2FsY3VsYXRlVHVubmVsc0V4Y2VwdFVuY292ZXJlZChtYXRyaXgsIGdhbWVEYXRhLm1hdHJpeCk7XG4gICAgICAgIGxldCB0dW5uZWxzU2NvcmU6IG51bWJlcjtcbiAgICAgICAgaWYgKHR1bm5lbHNDb3VudCA9PT0gMCkge1xuICAgICAgICAgICAgdHVubmVsc1Njb3JlID0gMDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHR1bm5lbHNTY29yZSA9IC10dW5uZWxzQ291bnQgKiA3MFxuICAgICAgICAgICAgICAgIC0gdHVubmVsc1N1bUhlaWdodCAqIE1hdGgucG93KHR1bm5lbHNTdW1IZWlnaHQsIHR1bm5lbHNTdW1IZWlnaHQgLyAoZmllbGRIZWlnaHQgKiB0dW5uZWxzQ291bnQpKSAqIDc7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBzY29yZSA9IGhvbGVzU2NvcmUgKyBzcXVhc2hlZExpbmVzU2NvcmUgKyBoZWlnaHRTY29yZSArIHR1bm5lbHNTY29yZSArIGZpbGxhYmxlQ2VsbHNTY29yZTtcbiAgICAgICAgaWYgKGlzTmFOKHNjb3JlKSkge1xuICAgICAgICAgICAgY29uc29sZS5sb2cobWF0cml4LCBob2xlc1Njb3JlLCBzcXVhc2hlZExpbmVzU2NvcmUsIGhlaWdodFNjb3JlLCB0dW5uZWxzU2NvcmUsIGZpbGxhYmxlQ2VsbHNTY29yZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHNjb3JlO1xuICAgIH1cblxuICAgIHByaXZhdGUgY2FsY3VsYXRlSG9sZXMoaW1hZ2luYWJsZU1hdHJpeDogYm9vbGVhbltdW10pOiBudW1iZXIge1xuICAgICAgICBsZXQgY292ZXJlZENvbHVtbnMgPSBuZXcgU2V0PG51bWJlcj47XG4gICAgICAgIGxldCBob2xlc0NvdW50ID0gMDtcbiAgICAgICAgaW1hZ2luYWJsZU1hdHJpeC5mb3JFYWNoKChyb3csIHkpID0+IHtcbiAgICAgICAgICAgIHJvdy5mb3JFYWNoKCh2YWwsIHgpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAodmFsKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvdmVyZWRDb2x1bW5zLmFkZCh4KTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGNvdmVyZWRDb2x1bW5zLmhhcyh4KSkge1xuICAgICAgICAgICAgICAgICAgICBob2xlc0NvdW50Kys7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gaG9sZXNDb3VudDtcbiAgICB9XG5cbiAgICBwcml2YXRlIGNhbGN1bGF0ZUhvbGVzQW5kQ292ZXJlZEhlaWdodChpbWFnaW5hYmxlTWF0cml4OiBib29sZWFuW11bXSwgcmVhbE1hdHJpeDogYm9vbGVhbltdW10pOiBbbnVtYmVyLCBudW1iZXJdIHtcbiAgICAgICAgY29uc3QgW29yaWdpbmFsVGhlSGlnaGVzdEhvbGVZLCBvcmlnaW5hbFRoZUhpZ2hlc3RIb2xlQ292ZXJlZFldID0gdGhpcy5jYWxjdWxhdGVUaGVIaWdoZXN0SG9sZUNvdmVyZWRZKHJlYWxNYXRyaXgpO1xuICAgICAgICBsZXQgY292ZXJlZENvbHVtbnNZcyA9IG5ldyBNYXA8bnVtYmVyLCBudW1iZXI+O1xuICAgICAgICBsZXQgaG9sZXNDb3ZlcmVkSGVpZ2h0c1N1bSA9IDA7XG4gICAgICAgIGxldCBob2xlc0NvdW50ID0gMDtcbiAgICAgICAgaW1hZ2luYWJsZU1hdHJpeC5mb3JFYWNoKChyb3csIHkpID0+IHtcbiAgICAgICAgICAgIHJvdy5mb3JFYWNoKCh2YWwsIHgpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAodmFsICYmICFjb3ZlcmVkQ29sdW1uc1lzLmhhcyh4KSkge1xuICAgICAgICAgICAgICAgICAgICBjb3ZlcmVkQ29sdW1uc1lzLnNldCh4LCB5KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgbGV0IGNvdmVyZWRZID0gY292ZXJlZENvbHVtbnNZcy5nZXQoeCk7XG4gICAgICAgICAgICAgICAgaWYgKGNvdmVyZWRZICE9PSB1bmRlZmluZWQgJiYgIXZhbCkge1xuICAgICAgICAgICAgICAgICAgICBob2xlc0NvdW50Kys7XG4gICAgICAgICAgICAgICAgICAgIGlmIChvcmlnaW5hbFRoZUhpZ2hlc3RIb2xlWSAhPT0gdW5kZWZpbmVkICYmIG9yaWdpbmFsVGhlSGlnaGVzdEhvbGVDb3ZlcmVkWSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoeSA8IG9yaWdpbmFsVGhlSGlnaGVzdEhvbGVZKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaG9sZXNDb3ZlcmVkSGVpZ2h0c1N1bSArPSB5IC0gY292ZXJlZFk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGNvdmVyZWRZIDwgb3JpZ2luYWxUaGVIaWdoZXN0SG9sZUNvdmVyZWRZKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaG9sZXNDb3ZlcmVkSGVpZ2h0c1N1bSArPSBvcmlnaW5hbFRoZUhpZ2hlc3RIb2xlQ292ZXJlZFkgLSBjb3ZlcmVkWTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIFtob2xlc0NvdW50LCBob2xlc0NvdmVyZWRIZWlnaHRzU3VtXTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGNhbGN1bGF0ZVRoZUhpZ2hlc3RIb2xlQ292ZXJlZFkobWF0cml4OiBib29sZWFuW11bXSk6IFtudW1iZXJ8dW5kZWZpbmVkLCBudW1iZXJ8dW5kZWZpbmVkXSB7XG4gICAgICAgIGxldCB0aGVIaWdoZXN0SG9sZUNvdmVyZWRZID0gdW5kZWZpbmVkO1xuICAgICAgICBsZXQgdGhlSGlnaGVzdEhvbGVZID0gdW5kZWZpbmVkO1xuICAgICAgICBsZXQgY292ZXJlZENvbHVtbnNZcyA9IG5ldyBNYXA8bnVtYmVyLCBudW1iZXI+O1xuICAgICAgICBtYXRyaXguc29tZSgocm93LCB5KSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gcm93LnNvbWUoKHZhbCwgeCkgPT4ge1xuICAgICAgICAgICAgICAgIGlmICh2YWwgJiYgIWNvdmVyZWRDb2x1bW5zWXMuaGFzKHgpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvdmVyZWRDb2x1bW5zWXMuc2V0KHgsIHkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBsZXQgY292ZXJlZFkgPSBjb3ZlcmVkQ29sdW1uc1lzLmdldCh4KTtcbiAgICAgICAgICAgICAgICBpZiAoY292ZXJlZFkgIT09IHVuZGVmaW5lZCAmJiAhdmFsKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoZUhpZ2hlc3RIb2xlWSA9IHk7XG4gICAgICAgICAgICAgICAgICAgIHRoZUhpZ2hlc3RIb2xlQ292ZXJlZFkgPSBjb3ZlcmVkWTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIFt0aGVIaWdoZXN0SG9sZVksIHRoZUhpZ2hlc3RIb2xlQ292ZXJlZFldO1xuICAgIH1cblxuICAgIHByaXZhdGUgY2FsY3VsYXRlSGVpZ2h0KG1hdHJpeDogYm9vbGVhbltdW10pOiBudW1iZXIge1xuICAgICAgICBsZXQgbG93ZXN0RW1wdHlZID0gLTE7XG4gICAgICAgIG1hdHJpeC5ldmVyeSgocm93LCB5KSA9PiB7XG4gICAgICAgICAgICBpZiAocm93LmV2ZXJ5KHZhbCA9PiAhdmFsKSkge1xuICAgICAgICAgICAgICAgIGxvd2VzdEVtcHR5WSA9IHk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBtYXRyaXgubGVuZ3RoIC0gbG93ZXN0RW1wdHlZIC0gMTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGNhbGN1bGF0ZVR1bm5lbHNFeGNlcHRVbmNvdmVyZWQoaW1hZ2luYWJsZU1hdHJpeDogYm9vbGVhbltdW10sIHJlYWxNYXRyaXg6IGJvb2xlYW5bXVtdKTogW251bWJlciwgbnVtYmVyXSB7XG4gICAgICAgIGxldCByZWFsQ292ZXJlZENvbHVtbnMgPSBuZXcgU2V0PG51bWJlcj4oKTtcbiAgICAgICAgcmVhbE1hdHJpeC5ldmVyeSgocm93KSA9PiB7XG4gICAgICAgICAgICByb3cuZm9yRWFjaCgodmFsLCB4KSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKHZhbCkge1xuICAgICAgICAgICAgICAgICAgICByZWFsQ292ZXJlZENvbHVtbnMuYWRkKHgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcblxuICAgICAgICBsZXQgaW1hZ2luYWJsZUNvdmVyZWRDb2x1bW5zID0gbmV3IFNldDxudW1iZXI+KCk7XG4gICAgICAgIGxldCB0dW5uZWxzID0gbmV3IE1hcDxudW1iZXIsIG51bWJlcj47XG4gICAgICAgIGNvbnN0IGZpZWxkV2lkdGggPSBpbWFnaW5hYmxlTWF0cml4WzBdLmxlbmd0aDtcbiAgICAgICAgaW1hZ2luYWJsZU1hdHJpeC5ldmVyeSgocm93LCB5KSA9PiB7XG4gICAgICAgICAgICByb3cuZm9yRWFjaCgodmFsLCB4KSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKHZhbCkge1xuICAgICAgICAgICAgICAgICAgICBpbWFnaW5hYmxlQ292ZXJlZENvbHVtbnMuYWRkKHgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcm93LmZvckVhY2goKHZhbCwgeCkgPT4ge1xuICAgICAgICAgICAgICAgIGlmICghdmFsXG4gICAgICAgICAgICAgICAgICAgICYmICFpbWFnaW5hYmxlQ292ZXJlZENvbHVtbnMuaGFzKHgpXG4gICAgICAgICAgICAgICAgICAgICYmICFyZWFsQ292ZXJlZENvbHVtbnMuaGFzKHgpXG4gICAgICAgICAgICAgICAgICAgICYmICh4ID09PSAwIHx8IGltYWdpbmFibGVDb3ZlcmVkQ29sdW1ucy5oYXMoeCAtIDEpKVxuICAgICAgICAgICAgICAgICAgICAmJiAoeCA9PT0gZmllbGRXaWR0aCAtIDEgfHwgaW1hZ2luYWJsZUNvdmVyZWRDb2x1bW5zLmhhcyh4ICsgMSkpXG4gICAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgICAgIHR1bm5lbHMuc2V0KHgsICh0dW5uZWxzLmdldCh4KSB8fCAwKSArIDEpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIGltYWdpbmFibGVDb3ZlcmVkQ29sdW1ucy5zaXplIDwgZmllbGRXaWR0aDtcbiAgICAgICAgfSk7XG4gICAgICAgIGxldCB0dW5uZWxzU3VtSGVpZ2h0ID0gMDtcbiAgICAgICAgbGV0IHR1bm5lbHNDb3VudCA9IDA7XG4gICAgICAgIHR1bm5lbHMuZm9yRWFjaChoZWlnaHQgPT4ge1xuICAgICAgICAgICAgaWYgKGhlaWdodCA+PSAzKSB7XG4gICAgICAgICAgICAgICAgdHVubmVsc1N1bUhlaWdodCArPSBoZWlnaHQ7XG4gICAgICAgICAgICAgICAgdHVubmVsc0NvdW50Kys7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gW3R1bm5lbHNTdW1IZWlnaHQsIHR1bm5lbHNDb3VudF07XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBjYWxjdWxhdGVGaWxsYWJsZVNwYWNlKG1hdHJpeDogYm9vbGVhbltdW10sIGZpZWxkV2lkdGg6IG51bWJlcik6IFtudW1iZXIsIG51bWJlcl0ge1xuICAgICAgICBsZXQgY292ZXJlZENvbHVtbnMgPSBuZXcgU2V0PG51bWJlcj4oKTtcbiAgICAgICAgbGV0IGZpbGxhYmxlQ2VsbHNDb3VudCA9IDA7XG4gICAgICAgIGxldCBmaWxsYWJsZUhlaWdodCA9IDA7XG4gICAgICAgIG1hdHJpeC5ldmVyeShyb3cgPT4ge1xuICAgICAgICAgICAgcm93LmZvckVhY2goKHZhbCwgeCkgPT4ge1xuICAgICAgICAgICAgICAgIGlmICh2YWwpIHtcbiAgICAgICAgICAgICAgICAgICAgY292ZXJlZENvbHVtbnMuYWRkKHgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcm93LmZvckVhY2goKHZhbCwgeCkgPT4ge1xuICAgICAgICAgICAgICAgIGlmICghdmFsICYmIGNvdmVyZWRDb2x1bW5zLnNpemUgPiAwICYmICFjb3ZlcmVkQ29sdW1ucy5oYXMoeCkpIHtcbiAgICAgICAgICAgICAgICAgICAgZmlsbGFibGVDZWxsc0NvdW50Kys7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBpZiAoY292ZXJlZENvbHVtbnMuc2l6ZSA8IGZpZWxkV2lkdGgpIHtcbiAgICAgICAgICAgICAgICBpZiAoY292ZXJlZENvbHVtbnMuc2l6ZSA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgZmlsbGFibGVIZWlnaHQrKztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gW2ZpbGxhYmxlQ2VsbHNDb3VudCwgZmlsbGFibGVIZWlnaHRdO1xuICAgIH1cbn1cbiIsImltcG9ydCB7RXZlbnRCdXMsIEV2ZW50VHlwZSwgRmlndXJlc1NwYXduZWRFdmVudH0gZnJvbSBcIi4uL1RldHJpcy9FdmVudEJ1cy9FdmVudEJ1c1wiO1xuaW1wb3J0IHtDb21tYW5kQnVzLCBDb21tYW5kVHlwZSwgSW5pdEdhbWVDb21tYW5kfSBmcm9tIFwiLi4vVGV0cmlzL0NvbW1hbmRCdXMvQ29tbWFuZEJ1c1wiO1xuaW1wb3J0IHtGaWd1cmVQbGFjaW5nUmVzb2x2ZXJ9IGZyb20gXCIuL0ZpZ3VyZVBsYWNpbmdSZXNvbHZlclwiO1xuaW1wb3J0IHtGaWd1cmVQbGFjaW5nUGVyZm9ybWVyfSBmcm9tIFwiLi9GaWd1cmVQbGFjaW5nUGVyZm9ybWVyXCI7XG5pbXBvcnQge1Njb3JlQ2FsY3VsYXRvcn0gZnJvbSBcIi4vU2NvcmVDYWxjdWxhdG9yXCI7XG5cbmV4cG9ydCBjbGFzcyBUZXRyaXNTb2x2ZXIge1xuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBwcml2YXRlIGV2ZW50QnVzOiBFdmVudEJ1cyxcbiAgICAgICAgcHJpdmF0ZSBjb21tYW5kQnVzOiBDb21tYW5kQnVzLFxuICAgICAgICBwcml2YXRlIGZhbGxpbmdGaWd1cmVQbGFjaW5nUmVzb2x2ZXIgPSBuZXcgRmlndXJlUGxhY2luZ1Jlc29sdmVyKFxuICAgICAgICAgICAgY29tbWFuZEJ1cyxcbiAgICAgICAgICAgIG5ldyBTY29yZUNhbGN1bGF0b3IoKSxcbiAgICAgICAgKSxcbiAgICAgICAgcHJpdmF0ZSBmYWxsaW5nRmlndXJlc1BsYWNlciA9IG5ldyBGaWd1cmVQbGFjaW5nUGVyZm9ybWVyKGNvbW1hbmRCdXMpLFxuICAgICkge1xuICAgICAgICB0aGlzLmNvbW1hbmRCdXMuYWRkSGFuZGxlcihDb21tYW5kVHlwZS5Jbml0R2FtZSwgdGhpcy5pbml0R2FtZUhhbmRsZXIuYmluZCh0aGlzKSk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBpbml0R2FtZUhhbmRsZXIoY29tbWFuZDogSW5pdEdhbWVDb21tYW5kKSB7XG4gICAgICAgIHRoaXMuZXZlbnRCdXMub24oRXZlbnRUeXBlLkZpZ3VyZXNTcGF3bmVkLCB0aGlzLm9uRmlndXJlc1NwYXduZWQuYmluZCh0aGlzKSk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBvbkZpZ3VyZXNTcGF3bmVkKGV2ZW50OiBGaWd1cmVzU3Bhd25lZEV2ZW50KSB7XG4gICAgICAgIGNvbnN0IHRhcmdldEZhbGxpbmdGaWd1cmVzU3RhdGVzID0gdGhpcy5mYWxsaW5nRmlndXJlUGxhY2luZ1Jlc29sdmVyLnJlc29sdmUoZXZlbnQuZ2FtZURhdGEpO1xuICAgICAgICB0aGlzLmZhbGxpbmdGaWd1cmVzUGxhY2VyLnBsYWNlKGV2ZW50LmdhbWVEYXRhLCB0YXJnZXRGYWxsaW5nRmlndXJlc1N0YXRlcyk7XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgVGV0cmlzRmFjYWRlIH0gZnJvbSAnLi9UZXRyaXMvVGV0cmlzRmFjYWRlJ1xuaW1wb3J0IHtFdmVudEJ1c30gZnJvbSBcIi4vVGV0cmlzL0V2ZW50QnVzL0V2ZW50QnVzXCI7XG5pbXBvcnQge0NvbW1hbmRCdXN9IGZyb20gXCIuL1RldHJpcy9Db21tYW5kQnVzL0NvbW1hbmRCdXNcIjtcbmltcG9ydCB7VGV0cmlzU29sdmVyfSBmcm9tIFwiLi9UZXRyaXNTb2x2ZXIvVGV0cmlzU29sdmVyXCI7XG5cbmRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ0RPTUNvbnRlbnRMb2FkZWQnLCAoKSA9PiB7XG4gICAgY29uc3QgZXZlbnRCdXMgPSBuZXcgRXZlbnRCdXMoKTtcbiAgICBjb25zdCBjb21tYW5kQnVzID0gbmV3IENvbW1hbmRCdXMoKTtcbiAgICBsZXQgdGV0cmlzID0gbmV3IFRldHJpc0ZhY2FkZShldmVudEJ1cywgY29tbWFuZEJ1cyk7XG4gICAgbGV0IHNvbHZlciA9IG5ldyBUZXRyaXNTb2x2ZXIoZXZlbnRCdXMsIGNvbW1hbmRCdXMpO1xuXG4gICAgdGV0cmlzLnN0YXJ0KCk7XG59KVxuIl0sIm5hbWVzIjpbIkV2ZW50VHlwZSIsIkNvbW1hbmRUeXBlIiwiZ2FtZURhdGEiLCJ0cmFuc2ZlcnJlZFRvTWF0cml4RmlndXJlcyIsInNxdWFzaGVkTGluZXMiLCJkcm9wcGVkTGluZXMiLCJnZXRFdmVudFR5cGUiLCJGYWxsaW5nVGlja1Byb2Nlc3NlZCIsIkdhbWVPdmVyIiwiRmlndXJlc01vdmVkIiwibmV3RmlndXJlcyIsIkZpZ3VyZXNTcGF3bmVkIiwiaGFuZGxlcnMiLCJNYXAiLCJvbiIsImV2ZW50IiwiaGFuZGxlciIsInVuaXF1ZSIsInRoaXMiLCJnZXQiLCJzb21lIiwiYm91bmRIYW5kbGVyIiwicHVzaCIsInNldCIsIm9mZiIsImluZGV4IiwiaW5kZXhPZiIsInNwbGljZSIsImZpcmUiLCJldmVudFBheWxvYWQiLCJmb3JFYWNoIiwiRmlndXJlVHVyblN0YXRlIiwiZ2V0Q29tbWFuZFR5cGUiLCJJbml0R2FtZSIsIlJlc3VtZUdhbWUiLCJQYXVzZUdhbWUiLCJGaWd1cmVzRmFsbFRpY2siLCJSZW5kZXIiLCJNb3ZlTGVmdCIsIk1vdmVSaWdodCIsIlR1cm5DbG9ja3dpc2UiLCJNb3ZlRG93biIsIkZpZ3VyZXNGYWxsRG93biIsImFkZEhhbmRsZXIiLCJyZW1vdmVIYW5kbGVyIiwicnVuIiwicGF5bG9hZCIsImdldE5vcm1hbGl6ZWRGaWd1cmUiLCJmaWd1cmUiLCJnZXRGaWd1cmUiLCJ0aGVMb25nZXN0Um93U2l6ZSIsInJlZHVjZSIsInByZXZpb3VzIiwiY3VycmVudCIsIk1hdGgiLCJtYXgiLCJsZW5ndGgiLCJtYXAiLCJyb3ciLCJvcmlnaW5hbExlbmd0aCIsImZpbGwiLCJnZXRGaXJzdFR1cm4iLCJnZXRTZWNvbmRUdXJuIiwib3JpZ2luYWxGaWd1cmUiLCJ0dXJuZWRGaWd1cmUiLCJvcmlnaW5hbEZpZ3VyZUhlaWdodCIsIm9yaWdpbmFsRmlndXJlV2lkdGgiLCJ4IiwiQXJyYXkiLCJ5IiwiZ2V0VGhpcmRUdXJuIiwicmV2ZXJzZSIsImdldEZvcnRoVHVybiIsImdldFR1cm4iLCJmaWd1cmVUdXJuU3RhdGUiLCJPbmUiLCJUd28iLCJUaHJlZSIsIkZvdXIiLCJzcGxpdCIsIml0ZW0iLCJTaW1wbHlSb3RhdGFibGVGaWd1cmUiLCJwb3NpdGlvbiIsInR1cm5TdGF0ZSIsImNvbG9yIiwiZmllbGRXaWR0aCIsImZpZWxkSGVpZ2h0IiwiZmlndXJlcyIsImZpZ3VyZXNGYWxsZW4iLCJsaW5lc1NxdWFzaGVkIiwiaXNJbml0aWFsaXplZCIsImlzR2FtZU92ZXIiLCJmYWxsaW5nRmlndXJlcyIsIm1hdHJpeCIsIm5leHRUaWNrVGltZW91dElkIiwic2V0dGluZ3MiLCJsZXZlbCIsInNjb3JlIiwiY29tYm8iLCJzdGF0cyIsInNldFRpbWVvdXQiLCJTdGF0cyIsIm1ha2VTaW1wbGUiLCJ3aWR0aCIsImhlaWdodCIsIkdhbWVEYXRhIiwiXyIsIkdhbWVTZXR0aW5ncyIsIlRGaWd1cmUiLCJSaWdodExGaWd1cmUiLCJMZWZ0TEZpZ3VyZSIsIlNxdWFyZUZpZ3VyZSIsIlN0aWNrRmlndXJlIiwiTFpGaWd1cmUiLCJSWkZpZ3VyZSIsInRpbWluZ3NIYW5kbGVyIiwiZXZlbnRCdXMiLCJjb21tYW5kQnVzIiwiaW5pdEdhbWVIYW5kbGVyIiwiYmluZCIsInJlc3VtZUdhbWVIYW5kbGVyIiwicGF1c2VHYW1lSGFuZGxlciIsImdhbWVPdmVySGFuZGxlciIsImNvbW1hbmQiLCJvbkZhbGxUaWNrUHJvY2Vzc2VkIiwiSW5pdEdhbWVDb21tYW5kIiwiZmFsbFRpY2siLCJjbGVhclRpbWVvdXQiLCJSZW5kZXJDb21tYW5kIiwiR2FtZU92ZXJFdmVudCIsIkZpZ3VyZXNGYWxsVGlja0NvbW1hbmQiLCJnZXREZWxheUZvck5leHRUaWNrTXMiLCJjYW5GaWd1cmVCZVBsYWNlZCIsInRhcmdldEZpZ3VyZU1hdHJpeCIsInRhcmdldFBvc2l0aW9uIiwiZXZlcnkiLCJ2YWx1ZSIsInJlYWxZIiwicmVhbFgiLCJmaWxsZWQiLCJmaWxsZWRHYW1lT3ZlciIsImVtcHR5IiwiY29udGFpbmVyRWxlbWVudCIsInJlbmRlclByb2plY3Rpb25GaWd1cmVzIiwibWF0cml4Q2VsbENvbG9ycyIsImZhbGxpbmdGaWd1cmVDZWxsQ29sb3JzIiwicHJvamVjdGlvbkZpZ3VyZUNlbGxDb2xvcnMiLCJUYWJsZVJlbmRlcmVyQ2VsbENvbG9yU2V0dGluZ3MiLCJyZW5kZXJTZXR0aW5ncyIsImNlbGxzSHRtbEVsZW1lbnRzTWFwIiwiaW5pdEhhbmRsZXIiLCJyZW5kZXJDb21tYW5kSGFuZGxlciIsInRhYmxlIiwiVGFibGVSZW5kZXJlciIsImNyZWF0ZUh0bWxFbGVtZW50IiwiY2VsbCIsImFwcGVuZENoaWxkIiwiaW5uZXJIVE1MIiwic2NvcmVEaXNwbGF5Iiwib25HYW1lT3ZlciIsIm9uRmlndXJlc01vdmVkIiwicmVuZGVyU3RhdGUiLCJyZXBhaW50TWF0cml4Q2VsbHMiLCJDb29yZGluYXRlIiwicmVuZGVyRmFsbGluZ0ZpZ3VyZXNQcm9qZWN0aW9uIiwicmVuZGVyRmFsbGluZ0ZpZ3VyZXMiLCJyZW5kZXJTdGF0cyIsImZhbGxpbmdGaWd1cmUiLCJyZXBhaW50RmFsbGluZ0ZpZ3VyZXNDZWxscyIsImZpZ3VyZU1hdHJpeCIsInByb2plY3Rpb25GaWd1cmVYIiwicHJvamVjdGlvbkZpZ3VyZVkiLCJGaWd1cmVQbGFjaW5nQ2hlY2tlciIsInJlcGFpbnRQcm9qZWN0aW9uRmlndXJlc0NlbGxzIiwiaW5kZW50IiwiY29sb3JzIiwiQ2VsbENvbG9ycyIsInJlcGFpbnRDZWxscyIsImNlbGxDb2xvcnMiLCJzdHlsZSIsImJhY2tncm91bmQiLCJsZXZlbFNwYW4iLCJkb2N1bWVudCIsImdldEVsZW1lbnRCeUlkIiwic2NvcmVTcGFuIiwiY29tYm9TcGFuIiwidG9TdHJpbmciLCJodG1sIiwiY29udGFpbmVyIiwiY3JlYXRlRWxlbWVudCIsImNoaWxkcmVuIiwiZmlyc3RFbGVtZW50Q2hpbGQiLCJIVE1MRWxlbWVudCIsInRyYW5zZmVycmVkRmlndXJlcyIsInByb2Nlc3NGaWd1cmVzRmFsbFRpY2tDb21tYW5kIiwicHJvY2Vzc0Ryb3BGaWd1cmVzQ29tbWFuZCIsImZhbGxpbmdSZXN1bHQiLCJmYWxsRmlndXJlc0Zvck9uZUNlbGwiLCJzcXVhc2hMaW5lcyIsIkdhbWVPdmVyQ29tbWFuZCIsIkZhbGxUaWNrUHJvY2Vzc2VkRXZlbnQiLCJGYWxsaW5nUmVzdWx0Iiwib25lQ2VsbEZhbGxpbmdSZXN1bHQiLCJmaWd1cmVDYW5GYWxsIiwiZmlndXJlR2FtZU92ZXJSZXN1bHQiLCJ0cmFuc2ZlckZpZ3VyZVRvTWF0cml4IiwiZmlndXJlQ2VsbFkiLCJjZWxsVmFsdWUiLCJmaWd1cmVDZWxsWCIsIm1hdHJpeFgiLCJtYXRyaXhZIiwibGluZXNUb1NxdWFzaCIsInVuc2hpZnQiLCJUb0FycmF5IiwidmFsIiwiT2JqZWN0Iiwia2V5cyIsIm4iLCJOdW1iZXIiLCJwYXJzZUludCIsImZpbHRlciIsImlzTmFOIiwiR2V0UmFuZG9tIiwidmFsdWVzIiwiRW51bUhlbHBlciIsImZsb29yIiwicmFuZG9tIiwicHJvY2Vzc09uRmFsbFRpY2siLCJhZGRGaWd1cmUiLCJmaWd1cmVJbmRleCIsImZpZ3VyZVdpZHRoIiwiY29vcmRpbmF0ZSIsImNlaWwiLCJGYWxsaW5nRmlndXJlIiwiRmlndXJlc1NwYXduZWRFdmVudCIsInByb2Nlc3NNb3ZlTGVmdENvbW1hbmQiLCJwcm9jZXNzTW92ZVJpZ2h0Q29tbWFuZCIsInByb2Nlc3NNb3ZlRG93bkNvbW1hbmQiLCJwcm9jZXNzVHVybkNsb2Nrd2lzZUNvbW1hbmQiLCJGaWd1cmVzTW92ZWRFdmVudCIsImFsbFR1cm5TdGF0ZXMiLCJuZXh0VHVyblN0YXRlIiwicHJvY2Vzc0luaXRHYW1lQ29tbWFuZCIsIndpbmRvdyIsIm9ua2V5ZG93biIsImNvZGUiLCJNb3ZlTGVmdENvbW1hbmQiLCJNb3ZlUmlnaHRDb21tYW5kIiwiVHVybkNsb2Nrd2lzZUNvbW1hbmQiLCJNb3ZlRG93bkNvbW1hbmQiLCJEcm9wRmlndXJlc0NvbW1hbmQiLCJzcXVhc2hlZFJvd3NSZXdhcmRUaHJlc2hvbGRzTWFwIiwicmV3YXJkT25Db21ibyIsIm9uRmFsbGluZ1RpY2tQcm9jZXNzZWQiLCJwcmV2aW91c1RocmVzaG9sZFJld2FyZCIsInJld2FyZCIsInJvd3NTcXVhc2hlZFRocmVzaG9sZCIsImxldmVsSW5jcmVhc2VPblNxdWFzaGVkUm93c051bWJlciIsIm1heExldmVscyIsInNxdWFzaGVkUm93c0NvdW50ZXIiLCJtaW4iLCJkZWxheU1zIiwiZ2FtZUNvbnRyb2xsZXIiLCJtb3ZpbmdIYW5kbGVyIiwibW92aW5nQ29udHJvbGxlciIsImZhbGxpbmdGaWd1cmVzUHJvY2Vzc29yIiwiZmlndXJlc1NwYXduZXIiLCJsZXZlbENvdW50ZXIiLCJjb21ib0NvdW50ZXIiLCJzY29yZUNvdW50ZXIiLCJzdGF0c0NvdW50ZXIiLCJ0YWJsZVJlbmRlcmVyIiwiRXZlbnRCdXMiLCJDb21tYW5kQnVzIiwiR2FtZUNvbnRyb2xsZXIiLCJDb25zdFRpbWluZ3NIYW5kbGVyIiwiTW92aW5nSGFuZGxlciIsIk1vdmluZ0NvbnRyb2xsZXIiLCJSZWd1bGFyRmFsbGluZ0ZpZ3VyZXNQcm9jZXNzb3IiLCJBbHdheXNPbmVGaWd1cmVTcGF3bmVyIiwiU3F1YXNoZWRSb3dzQ291bnRlckJhc2VkTGV2ZWxDb3VudGVyIiwiQ29tYm9Db3VudGVyIiwiRmFsbFRpY2tTY29yZUNvdW50ZXIiLCJTdGF0c0NvdW50ZXIiLCJUYWJsZVJlbmRlcmVyU2V0dGluZ3MiLCJib2R5Iiwic3RhcnQiLCJSZXN1bWVHYW1lQ29tbWFuZCIsInJlc3VtZSIsInBhdXNlIiwiUGF1c2VHYW1lQ29tbWFuZCIsInRhcmdldCIsImZpZ3VyZXNUYXJnZXRTdGF0ZXMiLCJwbGFjaW5nU3RlcHMiLCJFcnJvciIsInNjb3JlQ2FsY3VsYXRvciIsInJlc29sdmUiLCJHYW1lU3RhdGVOb3RTdXBwb3J0ZWRFcnJvciIsIm1heFNjb3JlIiwidGhlQmVzdFJlc3VsdCIsIkZpZ3VyZVBsYWNpbmdSZXN1bHQiLCJwcm9jZXNzU3RhdGVzIiwiaW1hZ2luYWJsZUZpZ3VyZSIsInBsYWNpbmdEaXJlY3Rpb25zIiwiZGVidWdNb2RlIiwidW5kZWZpbmVkIiwic3RydWN0dXJlZENsb25lIiwib25BZnRlclNjb3JlQ2FsY3VsYXRlcyIsIm9uQmVmb3JlU2NvcmVDYWxjdWxhdGVzIiwiZW51bXMiLCJwb3AiLCJtYXRyaWNlcyIsInN0cmluZ3lNYXRyaWNlcyIsIlNldCIsInN0cmluZ3lGaWd1cmVNYXRyaXgiLCJqb2luIiwiaGFzIiwiYWRkIiwiaW1hZ2luZUZpZ3VyZURyb3AiLCJpbWFnaW5hYmxlTWF0cml4Iiwic3F1YXNoZWRMaW5lc0NvdW50IiwiY2FsY3VsYXRlU2NvcmUiLCJkaXJlY3Rpb25zIiwibWFrZVNpbXBsZVBsYWNpbmdTdGVwcyIsImNvbGxlY3RPcGVuSG9sZXMiLCJ0b3BMZWZ0Q29vcmRpbmF0ZSIsImJvdHRvbVJpZ2h0Q29vcmRpbmF0ZSIsIm1ha2VQdXNoSW5QbGFjaW5nU3RlcHMiLCJpbWFnaW5lRmlndXJlUGxhY2luZyIsImdhbWVNYXRyaXgiLCJ0YXJnZXRYIiwidGFyZ2V0WSIsInRhcmdldENvb3JkaW5hdGUiLCJmaWd1cmVZIiwiZmlndXJlWCIsIlR1cm5QbGFjaW5nU3RlcCIsIk1vdmVYUGxhY2luZ1N0ZXAiLCJEcm9wUGxhY2luZ1N0ZXAiLCJpbml0aWFsRGVsYXlNcyIsImJhc2UiLCJwb3ciLCJQbGFjaW5nRXJyb3IiLCJMZXZlbEJhc2VkVGltaW5nc0hhbmRsZXIiLCJuZXh0TW92ZVRpbWVvdXRJZCIsInBsYWNlIiwidGFyZ2V0U3RhdGUiLCJwcm9jZXNzVGljayIsInRhcmdldEZpZ3VyZSIsIkluY29uc2lzdGVudFRhcmdldFN0YXRlRXJyb3IiLCJzdGVwIiwiTW92ZVlQbGFjaW5nU3RlcCIsIk5vdFN1cHBvcnRlZERpcmVjdGlvblN0ZXBFcnJvciIsImNvbnN0cnVjdG9yIiwibmFtZSIsImhvbGVzU2NvcmUiLCJzcXVhc2hlZExpbmVzU2NvcmUiLCJvcmlnaW5hbEhvbGVzQ291bnQiLCJjYWxjdWxhdGVIb2xlcyIsImNhbGN1bGF0ZUhvbGVzQW5kQ292ZXJlZEhlaWdodCIsImhvbGVzQ291bnQiLCJob2xlc0NvdmVyZWRIZWlnaHQiLCJob2xlc0NvdW50RGVjcmVhc2UiLCJjYWxjdWxhdGVIZWlnaHQiLCJoZWlnaHRTY29yZSIsImNhbGN1bGF0ZUZpbGxhYmxlU3BhY2UiLCJmaWxsYWJsZUNlbGxzQ291bnQiLCJmaWxsYWJsZUNlbGxzU2NvcmUiLCJ0dW5uZWxzU2NvcmUiLCJjYWxjdWxhdGVUdW5uZWxzRXhjZXB0VW5jb3ZlcmVkIiwidHVubmVsc1N1bUhlaWdodCIsInR1bm5lbHNDb3VudCIsImNvbnNvbGUiLCJsb2ciLCJjb3ZlcmVkQ29sdW1ucyIsInJlYWxNYXRyaXgiLCJjYWxjdWxhdGVUaGVIaWdoZXN0SG9sZUNvdmVyZWRZIiwib3JpZ2luYWxUaGVIaWdoZXN0SG9sZVkiLCJvcmlnaW5hbFRoZUhpZ2hlc3RIb2xlQ292ZXJlZFkiLCJjb3ZlcmVkQ29sdW1uc1lzIiwiaG9sZXNDb3ZlcmVkSGVpZ2h0c1N1bSIsImNvdmVyZWRZIiwidGhlSGlnaGVzdEhvbGVDb3ZlcmVkWSIsInRoZUhpZ2hlc3RIb2xlWSIsImxvd2VzdEVtcHR5WSIsInJlYWxDb3ZlcmVkQ29sdW1ucyIsImltYWdpbmFibGVDb3ZlcmVkQ29sdW1ucyIsInR1bm5lbHMiLCJzaXplIiwiZmlsbGFibGVIZWlnaHQiLCJmYWxsaW5nRmlndXJlUGxhY2luZ1Jlc29sdmVyIiwiZmFsbGluZ0ZpZ3VyZXNQbGFjZXIiLCJGaWd1cmVQbGFjaW5nUmVzb2x2ZXIiLCJTY29yZUNhbGN1bGF0b3IiLCJGaWd1cmVQbGFjaW5nUGVyZm9ybWVyIiwib25GaWd1cmVzU3Bhd25lZCIsInRhcmdldEZhbGxpbmdGaWd1cmVzU3RhdGVzIiwiYWRkRXZlbnRMaXN0ZW5lciIsInRldHJpcyIsIlRldHJpc0ZhY2FkZSIsIlRldHJpc1NvbHZlciJdLCJzb3VyY2VSb290IjoiIn0=