(()=>{"use strict";var t;!function(t){t[t.FallingTickProcessed=0]="FallingTickProcessed",t[t.GameOver=1]="GameOver",t[t.FiguresMoved=2]="FiguresMoved",t[t.LevelUp=3]="LevelUp",t[t.FiguresSpawned=4]="FiguresSpawned"}(t||(t={}));var e,n=function(){function e(t,e,n,i){this.gameData=t,this.transferredToMatrixFigures=e,this.squashedLines=n,this.droppedLines=i}return e.prototype.getEventType=function(){return t.FallingTickProcessed},e}(),i=function(){function e(t){this.gameData=t}return e.prototype.getEventType=function(){return t.GameOver},e}(),r=function(){function e(t){this.gameData=t}return e.prototype.getEventType=function(){return t.FiguresMoved},e}(),o=function(){function e(t,e){this.gameData=t,this.newFigures=e}return e.prototype.getEventType=function(){return t.FiguresSpawned},e}(),a=function(){function t(){this.handlers=new Map}return t.prototype.on=function(t,e,n){void 0===n&&(n=!0);var i=this.handlers.get(t)||[];n&&i.some((function(t){return t===e}))||(i.push(e),this.handlers.set(t,i))},t.prototype.off=function(t,e){var n=this.handlers.get(t)||[],i=n.indexOf(e);i>0&&n.splice(i,1),this.handlers.set(t,n)},t.prototype.fire=function(t){(this.handlers.get(t.getEventType())||[]).forEach((function(e){e(t)}))},t}();!function(t){t[t.InitGame=0]="InitGame",t[t.ResumeGame=1]="ResumeGame",t[t.PauseGame=2]="PauseGame",t[t.FiguresFallTick=3]="FiguresFallTick",t[t.GameOver=4]="GameOver",t[t.Render=5]="Render",t[t.MoveLeft=6]="MoveLeft",t[t.MoveRight=7]="MoveRight",t[t.TurnClockwise=8]="TurnClockwise",t[t.MoveDown=9]="MoveDown",t[t.FiguresFallDown=10]="FiguresFallDown"}(e||(e={}));var s,u,l=function(){function t(t){this.gameData=t}return t.prototype.getCommandType=function(){return e.InitGame},t}(),c=function(){function t(t){this.gameData=t}return t.prototype.getCommandType=function(){return e.ResumeGame},t}(),h=function(){function t(t){this.gameData=t}return t.prototype.getCommandType=function(){return e.PauseGame},t}(),m=function(){function t(t){this.gameData=t}return t.prototype.getCommandType=function(){return e.FiguresFallTick},t}(),f=function(){function t(t){this.gameData=t}return t.prototype.getCommandType=function(){return e.GameOver},t}(),d=function(){function t(t){this.gameData=t}return t.prototype.getCommandType=function(){return e.Render},t}(),p=function(){function t(t){this.gameData=t}return t.prototype.getCommandType=function(){return e.MoveLeft},t}(),g=function(){function t(t){this.gameData=t}return t.prototype.getCommandType=function(){return e.MoveRight},t}(),v=function(){function t(t){this.gameData=t}return t.prototype.getCommandType=function(){return e.TurnClockwise},t}(),y=function(){function t(t){this.gameData=t}return t.prototype.getCommandType=function(){return e.MoveDown},t}(),w=function(){function t(t){this.gameData=t}return t.prototype.getCommandType=function(){return e.FiguresFallDown},t}(),F=function(){function t(){this.handlers=new Map}return t.prototype.addHandler=function(t,e,n){void 0===n&&(n=!0);var i=this.handlers.get(t)||[];n&&i.some((function(t){return t===e}))||(i.push(e),this.handlers.set(t,i))},t.prototype.removeHandler=function(t,e){var n=this.handlers.get(t)||[],i=n.indexOf(e);i>0&&n.splice(i,1),this.handlers.set(t,n)},t.prototype.run=function(t){(this.handlers.get(t.getCommandType())||[]).forEach((function(e){e(t)}))},t}(),T=(s=function(t,e){return s=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},s(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function n(){this.constructor=t}s(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});!function(t){t[t.One=0]="One",t[t.Two=1]="Two",t[t.Three=2]="Three",t[t.Four=3]="Four"}(u||(u={}));var D=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return T(e,t),e.prototype.getNormalizedFigure=function(){var t=this.getFigure(),e=t.reduce((function(t,e){return Math.max(t,e.length)}),0);return t.map((function(t){var n=t.length;return t.length=e,t.fill(!1,n-1,e-1)}))},e.prototype.getFirstTurn=function(){return this.getNormalizedFigure()},e.prototype.getSecondTurn=function(){for(var t=this.getNormalizedFigure(),e=[],n=t.length,i=t[0].length,r=0;r<i;r++){e[r]=new Array(n).fill(!1);for(var o=0;o<n;o++)e[r][n-o-1]=t[o][r]}return e},e.prototype.getThirdTurn=function(){return this.getFirstTurn().reverse().map((function(t){return t.reverse()}))},e.prototype.getForthTurn=function(){return this.getSecondTurn().reverse().map((function(t){return t.reverse()}))},e}(function(){function t(){}return t.prototype.getTurn=function(t){switch(t){case u.One:return this.getFirstTurn();case u.Two:return this.getSecondTurn();case u.Three:return this.getThirdTurn();case u.Four:return this.getForthTurn()}},t}()),C=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return T(e,t),e.prototype.getFigure=function(){return["###".split("").map((function(t){return"#"===t})),"-#-".split("").map((function(t){return"#"===t}))]},e}(D),B=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return T(e,t),e.prototype.getFigure=function(){return["###".split("").map((function(t){return"#"===t})),"--#".split("").map((function(t){return"#"===t}))]},e}(D),M=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return T(e,t),e.prototype.getFigure=function(){return["###".split("").map((function(t){return"#"===t})),"#--".split("").map((function(t){return"#"===t}))]},e}(D),H=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return T(e,t),e.prototype.getFigure=function(){return["##".split("").map((function(t){return"#"===t})),"##".split("").map((function(t){return"#"===t}))]},e}(D),b=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return T(e,t),e.prototype.getFigure=function(){return["####".split("").map((function(t){return"#"===t}))]},e}(D),S=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return T(e,t),e.prototype.getFigure=function(){return["##-".split("").map((function(t){return"#"===t})),"-##".split("").map((function(t){return"#"===t}))]},e}(D),x=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return T(e,t),e.prototype.getFigure=function(){return["-##".split("").map((function(t){return"#"===t})),"##-".split("").map((function(t){return"#"===t}))]},e}(D),E=function(t,e){this.x=t,this.y=e},G=function(t,e,n){this.figure=t,this.position=e,this.turnState=n},O=function(t,e,n){this.fieldWidth=t,this.fieldHeight=e,this.figures=n},k=function(){function t(t,e,n,i,r,o,a,s,u){void 0===t&&(t=!1),void 0===e&&(e=!1),void 0===n&&(n=[]),void 0===i&&(i=[]),void 0===r&&(r=setTimeout((function(){}))),void 0===a&&(a=1),void 0===s&&(s=0),void 0===u&&(u=0),this.isInitialized=t,this.isGameOver=e,this.fallingFigures=n,this.matrix=i,this.nextTickTimeoutId=r,this.settings=o,this.level=a,this.score=s,this.combo=u}return t.makeSimple=function(e,n){return void 0===e&&(e=10),void 0===n&&(n=20),new t(!1,!1,[],new Array(n).fill([]).map((function(t){return new Array(e).fill(!1)})),setTimeout((function(){})),new O(e,n,[new C,new B,new M,new H,new b,new S,new x]))},t}(),P=function(){function n(t,n,i){this.timingsHandler=t,this.eventBus=n,this.commandBus=i,this.gameData=k.makeSimple(),this.commandBus.addHandler(e.InitGame,this.initGameHandler.bind(this)),this.commandBus.addHandler(e.ResumeGame,this.resumeGameHandler.bind(this)),this.commandBus.addHandler(e.PauseGame,this.pauseGameHandler.bind(this)),this.commandBus.addHandler(e.GameOver,this.gameOverHandler.bind(this))}return n.prototype.initGameHandler=function(e){this.gameData=e.gameData,this.gameData.isInitialized=!0,this.eventBus.on(t.FallingTickProcessed,this.onFallTickProcessed.bind(this))},n.prototype.resumeGameHandler=function(t){this.gameData.isGameOver||(this.gameData.isInitialized||this.commandBus.run(new l(t.gameData)),this.fallTick())},n.prototype.pauseGameHandler=function(t){this.gameData=t.gameData,clearTimeout(this.gameData.nextTickTimeoutId),this.commandBus.run(new d(this.gameData))},n.prototype.gameOverHandler=function(){this.gameData.isInitialized=!1,this.gameData.isGameOver=!0,clearTimeout(this.gameData.nextTickTimeoutId),this.eventBus.fire(new i(this.gameData))},n.prototype.fallTick=function(){this.commandBus.run(new m(this.gameData))},n.prototype.onFallTickProcessed=function(t){clearTimeout(this.gameData.nextTickTimeoutId),this.gameData.isGameOver||(this.gameData.nextTickTimeoutId=setTimeout(this.fallTick.bind(this),this.timingsHandler.getDelayForNextTickMs(this.gameData)))},n}(),I=function(){function t(){}return t.canFigureBePlaced=function(t,e,n){return t.every((function(t,i){return t.every((function(t,r){var o=e.y+i,a=e.x+r;return!t||o<0&&a>=0&&a<=n[0].length-1||o in n&&a in n[o]&&!n[o][a]}))}))},t}(),L=function(t,e,n){this.filled=t,this.filledGameOver=e,this.empty=n},R=function(t,e,n,i,r){void 0===e&&(e=!0),void 0===n&&(n=new L("#007400","#780000","#fff")),void 0===i&&(i=new L("#007400","#780000",null)),void 0===r&&(r=new L("#b8e5e3",null,null)),this.containerElement=t,this.renderProjectionFigures=e,this.matrixCellColors=n,this.fallingFigureCellColors=i,this.projectionFigureCellColors=r},_=function(t,e){this.filled=t,this.empty=e},j=function(){function n(t,n,i){this.renderSettings=t,this.commandBus=n,this.eventBus=i,this.cellsHtmlElementsMap=[],n.addHandler(e.InitGame,this.initHandler.bind(this)),n.addHandler(e.Render,this.renderCommandHandler.bind(this))}return n.prototype.initHandler=function(e){this.table=n.createHtmlElement('<div style="float: left; display: table; border-collapse: collapse"></div>'),this.cellsHtmlElementsMap=[];for(var i=0;i<e.gameData.settings.fieldHeight;i++){var r=n.createHtmlElement('<div style="display: table-row"></div>');this.cellsHtmlElementsMap[i]=[];for(var o=0;o<e.gameData.settings.fieldWidth;o++){var a=n.createHtmlElement('<div style="display: table-cell; border: 1px solid #ccc; width: 20px; height: 20px"></div>');this.cellsHtmlElementsMap[i][o]=a,r.appendChild(a)}this.table.appendChild(r)}this.renderSettings.containerElement.innerHTML="",this.renderSettings.containerElement.appendChild(this.table),this.scoreDisplay=n.createHtmlElement('<div style="float: left; font-family: \'Helvetica Neue\', sans-serif; font-size: 20px; margin-left: 15px;">\n                Level: <span id="level"></span><br>\n                Score: <span id="score"></span><br>\n                Combo: <span id="combo"></span><br>\n            </div>'),this.renderSettings.containerElement.appendChild(this.scoreDisplay),this.renderSettings.containerElement.appendChild(n.createHtmlElement('<div style="clear: both"></div>')),this.eventBus.on(t.FallingTickProcessed,this.onFallTickProcessed.bind(this)),this.eventBus.on(t.GameOver,this.onGameOver.bind(this)),this.eventBus.on(t.FiguresMoved,this.onFiguresMoved.bind(this))},n.prototype.onFiguresMoved=function(t){this.renderState(t.gameData)},n.prototype.onFallTickProcessed=function(t){this.renderState(t.gameData)},n.prototype.onGameOver=function(t){this.renderState(t.gameData)},n.prototype.renderCommandHandler=function(t){this.renderState(t.gameData)},n.prototype.renderState=function(t){this.repaintMatrixCells(t.matrix,new E(0,0),t),this.renderSettings.renderProjectionFigures&&this.renderFallingFiguresProjection(t),this.renderFallingFigures(t),this.renderStats(t)},n.prototype.renderFallingFigures=function(t){var e=this;t.fallingFigures.forEach((function(n){e.repaintFallingFiguresCells(n.figure.getTurn(n.turnState),n.position,t)}))},n.prototype.renderFallingFiguresProjection=function(t){var e=this;t.fallingFigures.forEach((function(n){for(var i=n.figure.getTurn(n.turnState),r=n.position.x,o=n.position.y;I.canFigureBePlaced(i,new E(r,o+1),t.matrix);)o++;e.repaintProjectionFiguresCells(i,new E(r,o),t)}))},n.prototype.repaintMatrixCells=function(t,e,n){var i;i=n.isGameOver?new _(this.renderSettings.matrixCellColors.filledGameOver,this.renderSettings.matrixCellColors.empty):new _(this.renderSettings.matrixCellColors.filled,this.renderSettings.matrixCellColors.empty),this.repaintCells(t,e,i)},n.prototype.repaintFallingFiguresCells=function(t,e,n){var i;i=n.isGameOver?new _(this.renderSettings.fallingFigureCellColors.filledGameOver,this.renderSettings.fallingFigureCellColors.empty):new _(this.renderSettings.fallingFigureCellColors.filled,this.renderSettings.fallingFigureCellColors.empty),this.repaintCells(t,e,i)},n.prototype.repaintProjectionFiguresCells=function(t,e,n){var i;i=n.isGameOver?new _(this.renderSettings.projectionFigureCellColors.filledGameOver,this.renderSettings.projectionFigureCellColors.empty):new _(this.renderSettings.projectionFigureCellColors.filled,this.renderSettings.projectionFigureCellColors.empty),this.repaintCells(t,e,i)},n.prototype.repaintCells=function(t,e,n){var i=this;t.forEach((function(t,r){t.forEach((function(t,o){var a=r+e.y,s=o+e.x;if(a in i.cellsHtmlElementsMap&&s in i.cellsHtmlElementsMap[a]){var u=t?n.filled:n.empty;null!==u&&(i.cellsHtmlElementsMap[a][s].style.background=u)}}))}))},n.prototype.renderStats=function(t){var e=document.getElementById("level"),n=document.getElementById("score"),i=document.getElementById("combo");null!==e&&(e.innerHTML=t.level.toString()),null!==n&&(n.innerHTML=t.score.toString()),null!==i&&(i.innerHTML=t.combo.toString())},n.createHtmlElement=function(t){var e=document.createElement("div");if(e.innerHTML=t,e.children.length>1||null===e.firstElementChild)throw"The HTML must contain only one child";if(!(e.firstElementChild instanceof HTMLElement))throw"Something went wrong while trying to get HTMLElement child from div";return e.firstElementChild},n}(),q=function(){this.transferredFigures=[],this.isGameOver=!1},A=function(){function t(t,n){this.commandBus=t,this.eventBus=n,this.commandBus.addHandler(e.FiguresFallTick,this.processFiguresFallTickCommand.bind(this)),this.commandBus.addHandler(e.FiguresFallDown,this.processDropFiguresCommand.bind(this))}return t.prototype.processFiguresFallTickCommand=function(t){var e=this.fallFiguresForOneCell(t.gameData),i=this.squashLines(t.gameData.matrix);e.isGameOver&&this.commandBus.run(new f(t.gameData)),this.eventBus.fire(new n(t.gameData,e.transferredFigures,i,0))},t.prototype.processDropFiguresCommand=function(t){for(var e,i=new q,r=0;t.gameData.fallingFigures.length>0;){var o=this.fallFiguresForOneCell(t.gameData);(e=i.transferredFigures).push.apply(e,o.transferredFigures),i.isGameOver=i.isGameOver||o.isGameOver,r++}var a=this.squashLines(t.gameData.matrix);i.isGameOver&&this.commandBus.run(new f(t.gameData)),this.eventBus.fire(new n(t.gameData,i.transferredFigures,a,r-1))},t.prototype.fallFiguresForOneCell=function(t){var e=this,n=new q;return t.fallingFigures.forEach((function(i,r){var o;if(e.figureCanFall(t.matrix,i))i.position.y++;else{var a=e.transferFigureToMatrix(t.matrix,i);(o=n.transferredFigures).push.apply(o,t.fallingFigures.splice(r,1)),n.isGameOver=n.isGameOver||a}})),n},t.prototype.figureCanFall=function(t,e){return I.canFigureBePlaced(e.figure.getTurn(e.turnState),new E(e.position.x,e.position.y+1),t)},t.prototype.transferFigureToMatrix=function(t,e){var n=!1;return e.figure.getTurn(e.turnState).forEach((function(i,r){i.forEach((function(i,o){if(i){var a=e.position.x+o,s=e.position.y+r;s in t&&a in t[s]&&!t[s][a]?t[s][a]=!0:n=!0}}))})),n},t.prototype.squashLines=function(t){var e=[];return t.forEach((function(t,n){t.every((function(t){return t}))&&e.push(n)}),0),e.forEach((function(e){t.splice(e,1),t.unshift(new Array(t[0].length).fill(!1))})),e},t}(),N=function(){function t(){}return t.ToArray=function(t){return Object.keys(t).map((function(t){return Number.parseInt(t)})).filter((function(t){return!Number.isNaN(t)}))},t.GetRandom=function(e){var n=t.ToArray(e);return n[Math.floor(Math.random()*n.length)]},t}(),z=function(){function n(t,n){this.eventBus=t,this.commandBus=n,this.commandBus.addHandler(e.InitGame,this.initHandler.bind(this))}return n.prototype.initHandler=function(e){this.eventBus.on(t.FallingTickProcessed,this.processOnFallTick.bind(this))},n.prototype.processOnFallTick=function(t){this.addFigure(t.gameData)},n.prototype.addFigure=function(t){if(!(t.fallingFigures.length>0||t.isGameOver)){var e=Math.floor(Math.random()*t.settings.figures.length),n=t.settings.figures[e],i=N.GetRandom(u),r=n.getTurn(i),a=Math.max.apply(Math,r.map((function(t){return t.length}))),s=new E(Math.ceil(t.settings.fieldWidth/2-a/2)-1,-r.length),l=new G(n,s,i);t.fallingFigures.push(l),this.eventBus.fire(new o(t,[l]))}},n}(),U=function(){function t(t,n){this.commandBus=t,this.eventBus=n,this.commandBus.addHandler(e.MoveLeft,this.processMoveLeftCommand.bind(this)),this.commandBus.addHandler(e.MoveRight,this.processMoveRightCommand.bind(this)),this.commandBus.addHandler(e.MoveDown,this.processMoveDownCommand.bind(this)),this.commandBus.addHandler(e.TurnClockwise,this.processTurnClockwiseCommand.bind(this))}return t.prototype.processMoveLeftCommand=function(t){t.gameData.fallingFigures.forEach((function(e){I.canFigureBePlaced(e.figure.getTurn(e.turnState),new E(e.position.x-1,e.position.y),t.gameData.matrix)&&e.position.x--})),this.eventBus.fire(new r(t.gameData))},t.prototype.processMoveRightCommand=function(t){t.gameData.fallingFigures.forEach((function(e){I.canFigureBePlaced(e.figure.getTurn(e.turnState),new E(e.position.x+1,e.position.y),t.gameData.matrix)&&e.position.x++})),this.eventBus.fire(new r(t.gameData))},t.prototype.processTurnClockwiseCommand=function(t){var e=N.ToArray(u);t.gameData.fallingFigures.forEach((function(n){var i=n.turnState+1;i in e||(i=e[0]),I.canFigureBePlaced(n.figure.getTurn(i),n.position,t.gameData.matrix)&&(n.turnState=i)})),this.eventBus.fire(new r(t.gameData))},t.prototype.processMoveDownCommand=function(t){this.commandBus.run(new m(t.gameData))},t}(),W=function(){function t(t){this.commandBus=t,this.commandBus.addHandler(e.InitGame,this.processInitGameCommand.bind(this))}return t.prototype.processInitGameCommand=function(t){var e=this;window.onkeydown=function(n){"ArrowLeft"===n.code?e.commandBus.run(new p(t.gameData)):"ArrowRight"===n.code?e.commandBus.run(new g(t.gameData)):"ArrowUp"===n.code?e.commandBus.run(new v(t.gameData)):"ArrowDown"===n.code||"ArrowDown"===n.code?e.commandBus.run(new y(t.gameData)):"Space"===n.code&&e.commandBus.run(new w(t.gameData))}},t}(),J=function(){function t(t,e){void 0===e&&(e=.8),this.initialDelayMs=t,this.base=e}return t.prototype.getDelayForNextTickMs=function(t){return Math.pow(this.base-.007*(t.level-1),t.level-1)*this.initialDelayMs},t}(),K=function(){function n(t,n,i,r){void 0===i&&(i=new Map([[1,100],[2,300],[3,500],[4,800]])),void 0===r&&(r=50),this.commandBus=t,this.eventBus=n,this.squashedRowsRewardThresholdsMap=i,this.rewardOnCombo=r,t.addHandler(e.InitGame,this.initGameHandler.bind(this))}return n.prototype.initGameHandler=function(e){this.eventBus.on(t.FallingTickProcessed,this.onFallingTickProcessed.bind(this))},n.prototype.onFallingTickProcessed=function(t){if(!(t.squashedLines.length<0)){var e=0;this.squashedRowsRewardThresholdsMap.forEach((function(n,i){i>t.squashedLines.length||(e=n)})),t.gameData.score+=e*t.gameData.level+this.rewardOnCombo*Math.max(0,t.gameData.combo-1)*t.gameData.level+2*t.droppedLines*t.gameData.level}},n}(),Q=function(){function n(t,n,i,r){this.eventBus=t,this.commandBus=n,this.levelIncreaseOnSquashedRowsNumber=i,this.maxLevels=r,this.squashedRowsCounter=0,this.commandBus.addHandler(e.InitGame,this.processInitGameCommand.bind(this))}return n.prototype.processInitGameCommand=function(e){this.eventBus.on(t.FallingTickProcessed,this.onFallTickProcessed.bind(this))},n.prototype.onFallTickProcessed=function(t){0!==t.squashedLines.length&&(this.squashedRowsCounter++,this.squashedRowsCounter>=this.levelIncreaseOnSquashedRowsNumber&&(this.squashedRowsCounter=0,t.gameData.level=Math.min(this.maxLevels,t.gameData.level+1)))},n}(),V=function(){function n(t,n){this.commandBus=t,this.eventBus=n,t.addHandler(e.InitGame,this.initGameHandler.bind(this))}return n.prototype.initGameHandler=function(e){this.eventBus.on(t.FallingTickProcessed,this.onFallTickProcessed.bind(this))},n.prototype.onFallTickProcessed=function(t){t.transferredToMatrixFigures.length<=0||(t.squashedLines.length>0?t.gameData.combo+=1:t.gameData.combo=0)},n}(),X=function(){function t(t,e,n,i,r,o,s,u,l,c,h,m){void 0===t&&(t=new a),void 0===e&&(e=new F),void 0===n&&(n=new P(new J(2e3),t,e)),void 0===i&&(i=new U(e,t)),void 0===r&&(r=new W(e)),void 0===o&&(o=new A(e,t)),void 0===s&&(s=new z(t,e)),void 0===u&&(u=new Q(t,e,8,15)),void 0===l&&(l=new V(e,t)),void 0===c&&(c=new K(e,t)),void 0===h&&(h=new j(new R(document.body),e,t)),void 0===m&&(m=k.makeSimple()),this.eventBus=t,this.commandBus=e,this.gameController=n,this.movingHandler=i,this.movingController=r,this.fallingFiguresProcessor=o,this.figuresSpawner=s,this.levelCounter=u,this.comboCounter=l,this.scoreCounter=c,this.tableRenderer=h,this.gameData=m}return t.prototype.start=function(t){t=t||k.makeSimple(),this.commandBus.run(new l(t)),this.commandBus.run(new c(t))},t.prototype.resume=function(){this.commandBus.run(new c(this.gameData))},t.prototype.pause=function(){this.commandBus.run(new h(this.gameData))},t}(),Y=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}(),Z=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return Y(e,t),e}(function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return Y(e,t),e}(Error)),$=function(){function t(){}return t.prototype.resolveTargetPosition=function(t){var e=this;if(0===t.fallingFigures.length)return new Map;if(1!==t.fallingFigures.length)throw new Z;var n=t.fallingFigures[0],i=new Map;N.ToArray(u).forEach((function(t){i.set(t,n.figure.getTurn(t))}));var r=-1/0,o=new G(n.figure,new E(n.position.x,n.position.y),n.turnState);return i.forEach((function(n,i){for(var a=0;a<t.settings.fieldWidth-n[0].length+1;a++){var s=e.imagineFigureDrop(t.matrix,n,a),u=s[0],l=s[1],c=e.calculateScore(t,l);c>r&&(r=c,o.turnState=i,o.position.x=a,o.position.y=u)}})),new Map([[n,o]])},t.prototype.calculateScore=function(t,e){var n,i=t.settings.fieldHeight,r=t.settings.fieldWidth,o=5*this.squashLines(e),a=this.calculateHoles(t.matrix),s=a[0],u=(a[1],this.calculateHoles(e)),l=u[0],c=u[1],h=s-l;n=0===l?h>0?100*h:50*h:(h>0?100*h:50*h)-c*Math.pow(c,c/(i*l))*3;var m=this.calculateHeight(e),f=-m*Math.pow(m,m/i)*3,d=this.calculateFillableSpace(e,r),p=d[0],g=0;d[1]>5&&(g=-p*Math.pow(p,p/(i*r)));var v,y=this.calculateTunnelsExceptUncovered(e,t.matrix),w=y[0],F=y[1],T=n+o+f+(v=0===F?0:100*-F-w*Math.pow(w,w/(i*F))*10)+g;return isNaN(T)&&console.log(e,n,o,f,v,g),T},t.prototype.squashLines=function(t){var e=[];return t.forEach((function(t,n){t.every((function(t){return t}))&&e.push(n)}),0),e.forEach((function(e){t.splice(e,1),t.unshift(new Array(t[0].length).fill(!1))})),e.length},t.prototype.imagineFigureDrop=function(t,e,n){for(var i=t.map((function(t){return t.slice()})),r=-e.length;I.canFigureBePlaced(e,new E(n,r+1),t);)r++;return e.forEach((function(t,e){t.forEach((function(t,o){var a=r+e,s=n+o;a in i&&s in i[a]&&t&&(i[a][s]=!0)}))})),[r,i]},t.prototype.calculateHoles=function(t){var e=new Map,n=0,i=0;return t.forEach((function(t){t.forEach((function(t,r){t&&!e.has(r)&&e.set(r,0);var o=e.get(r);void 0!==o&&(t||(i++,n+=o),e.set(r,o+1))}))})),[i,n]},t.prototype.calculateHeight=function(t){var e=-1;return t.every((function(t,n){return!!t.every((function(t){return!t}))&&(e=n,!0)})),t.length-e-1},t.prototype.calculateTunnelsExceptUncovered=function(t,e){var n=new Set;e.every((function(t){t.forEach((function(t,e){t&&n.add(e)}))}));var i=new Set,r=new Map,o=t[0].length;t.every((function(t,e){return t.forEach((function(t,e){t&&i.add(e)})),t.forEach((function(t,e){t||i.has(e)||n.has(e)||0!==e&&!i.has(e-1)||e!==o-1&&!i.has(e+1)||r.set(e,(r.get(e)||0)+1)})),i.size<o}));var a=0,s=0;return r.forEach((function(t){t>=3&&(a+=t,s++)})),[a,s]},t.prototype.calculateFillableSpace=function(t,e){var n=new Set,i=0,r=0;return t.every((function(t){return t.forEach((function(t,e){t&&n.add(e)})),t.forEach((function(t,e){!t&&n.size>0&&!n.has(e)&&i++})),n.size<e&&(n.size>0&&r++,!0)})),[i,r]},t}(),tt=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}(),et=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return tt(e,t),e}(Error),nt=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return tt(e,t),e}(et),it=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return tt(e,t),e}(et),rt=function(){function t(t,e){void 0===e&&(e=new J(100,.9)),this.commandBus=t,this.timingsHandler=e,this.nextMoveTimeoutId=setTimeout((function(){})),this.targetFallingFiguresStates=new Map,this.gameData=k.makeSimple()}return t.prototype.place=function(t,e){this.gameData=t,this.targetFallingFiguresStates=e,clearTimeout(this.nextMoveTimeoutId),this.nextMoveTimeoutId=setTimeout(this.processTick.bind(this),this.timingsHandler.getDelayForNextTickMs(this.gameData))},t.prototype.processTick=function(){if(0!==this.gameData.fallingFigures.length){if(1!==this.gameData.fallingFigures.length)throw new nt;var t=this.gameData.fallingFigures[0],e=this.targetFallingFiguresStates.get(t);if(e){if(t.figure!==e.figure)throw new it("Both of the original and the target falling figures must have the same figure in it.");if(t.turnState!=e.turnState)this.commandBus.run(new v(this.gameData));else{if(t.position.x==e.position.x)return void this.commandBus.run(new w(this.gameData));t.position.x>e.position.x?this.commandBus.run(new p(this.gameData)):this.commandBus.run(new g(this.gameData))}this.nextMoveTimeoutId=setTimeout(this.processTick.bind(this),this.timingsHandler.getDelayForNextTickMs(this.gameData))}}},t}(),ot=function(){function n(t,n,i,r){void 0===i&&(i=new $),void 0===r&&(r=new rt(n)),this.eventBus=t,this.commandBus=n,this.fallingFigurePlacingResolver=i,this.fallingFiguresPlacer=r,this.commandBus.addHandler(e.InitGame,this.initGameHandler.bind(this))}return n.prototype.initGameHandler=function(e){this.eventBus.on(t.FiguresSpawned,this.onFiguresSpawned.bind(this))},n.prototype.onFiguresSpawned=function(t){var e=this.fallingFigurePlacingResolver.resolveTargetPosition(t.gameData);this.fallingFiguresPlacer.place(t.gameData,e)},n}();document.addEventListener("DOMContentLoaded",(function(){var t=new a,e=new F,n=new X(t,e);new ot(t,e),n.start()}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,