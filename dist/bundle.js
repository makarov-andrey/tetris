(()=>{"use strict";var e;!function(e){e[e.FallingTickProcessed=0]="FallingTickProcessed",e[e.GameOver=1]="GameOver",e[e.FiguresMoved=2]="FiguresMoved",e[e.LevelUp=3]="LevelUp"}(e||(e={}));var t,n,i=function(){function t(e,t,n){this.gameData=e,this.transferredToMatrixFigures=t,this.squashedLines=n}return t.prototype.getEventType=function(){return e.FallingTickProcessed},t}(),r=function(){function t(e){this.gameData=e}return t.prototype.getEventType=function(){return e.GameOver},t}(),o=function(){function t(e){this.gameData=e}return t.prototype.getEventType=function(){return e.FiguresMoved},t}(),a=function(){function e(){this.handlers=new Map}return e.prototype.on=function(e,t,n){void 0===n&&(n=!0);var i=this.handlers.get(e)||[];n&&i.some((function(e){return e===t}))||(i.push(t),this.handlers.set(e,i))},e.prototype.off=function(e,t){var n=this.handlers.get(e)||[],i=n.indexOf(t);i>0&&n.splice(i,1),this.handlers.set(e,n)},e.prototype.fire=function(e){(this.handlers.get(e.getEventType())||[]).forEach((function(t){t(e)}))},e}(),s=function(e,t,n){this.fieldWidth=e,this.fieldHeight=t,this.figures=n},u=(t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},t(e,n)},function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)});!function(e){e[e.One=0]="One",e[e.Two=1]="Two",e[e.Three=2]="Three",e[e.Four=3]="Four"}(n||(n={}));var l,c=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return u(t,e),t.prototype.getNormalizedFigure=function(){var e=this.getFigure(),t=e.reduce((function(e,t){return Math.max(e,t.length)}),0);return e.map((function(e){var n=e.length;return e.length=t,e.fill(!1,n-1,t-1)}))},t.prototype.getFirstTurn=function(){return this.getNormalizedFigure()},t.prototype.getSecondTurn=function(){for(var e=this.getNormalizedFigure(),t=[],n=e.length,i=e[0].length,r=0;r<i;r++){t[r]=new Array(n).fill(!1);for(var o=0;o<n;o++)t[r][n-o-1]=e[o][r]}return t},t.prototype.getThirdTurn=function(){return this.getFirstTurn().reverse().map((function(e){return e.reverse()}))},t.prototype.getForthTurn=function(){return this.getSecondTurn().reverse().map((function(e){return e.reverse()}))},t}(function(){function e(){}return e.prototype.getTurn=function(e){switch(e){case n.One:return this.getFirstTurn();case n.Two:return this.getSecondTurn();case n.Three:return this.getThirdTurn();case n.Four:return this.getForthTurn()}},e}()),m=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return u(t,e),t.prototype.getFigure=function(){return["###".split("").map((function(e){return"#"===e})),"-#-".split("").map((function(e){return"#"===e}))]},t}(c),h=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return u(t,e),t.prototype.getFigure=function(){return["###".split("").map((function(e){return"#"===e})),"--#".split("").map((function(e){return"#"===e}))]},t}(c),d=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return u(t,e),t.prototype.getFigure=function(){return["###".split("").map((function(e){return"#"===e})),"#--".split("").map((function(e){return"#"===e}))]},t}(c),p=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return u(t,e),t.prototype.getFigure=function(){return["##".split("").map((function(e){return"#"===e})),"##".split("").map((function(e){return"#"===e}))]},t}(c),f=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return u(t,e),t.prototype.getFigure=function(){return["####".split("").map((function(e){return"#"===e}))]},t}(c),g=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return u(t,e),t.prototype.getFigure=function(){return["##-".split("").map((function(e){return"#"===e})),"-##".split("").map((function(e){return"#"===e}))]},t}(c),v=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return u(t,e),t.prototype.getFigure=function(){return["-##".split("").map((function(e){return"#"===e})),"##-".split("").map((function(e){return"#"===e}))]},t}(c),y=function(){function e(e,t,n,i,r,o,a,s){void 0===e&&(e=!1),void 0===t&&(t=!1),void 0===n&&(n=[]),void 0===i&&(i=[]),void 0===r&&(r=setTimeout((function(){}))),void 0===a&&(a=1),void 0===s&&(s=0),this.isInitialized=e,this.isGameOver=t,this.fallingFigures=n,this.matrix=i,this.nextTickTimeoutId=r,this.settings=o,this.level=a,this.score=s}return e.makeSimple=function(t,n){return void 0===t&&(t=10),void 0===n&&(n=20),new e(!1,!1,[],new Array(n).fill([]).map((function(e){return new Array(t).fill(!1)})),setTimeout((function(){})),new s(t,n,[new m,new h,new d,new p,new f,new g,new v]))},e}();!function(e){e[e.InitGame=0]="InitGame",e[e.ResumeGame=1]="ResumeGame",e[e.PauseGame=2]="PauseGame",e[e.FiguresFallTick=3]="FiguresFallTick",e[e.GameOver=4]="GameOver",e[e.Render=5]="Render",e[e.MoveLeft=6]="MoveLeft",e[e.MoveRight=7]="MoveRight",e[e.TurnClockwise=8]="TurnClockwise",e[e.MoveDown=9]="MoveDown",e[e.FiguresFallDown=10]="FiguresFallDown"}(l||(l={}));var F=function(){function e(e){this.gameData=e}return e.prototype.getCommandType=function(){return l.InitGame},e}(),w=function(){function e(e){this.gameData=e}return e.prototype.getCommandType=function(){return l.ResumeGame},e}(),T=function(){function e(e){this.gameData=e}return e.prototype.getCommandType=function(){return l.PauseGame},e}(),C=function(){function e(e){this.gameData=e}return e.prototype.getCommandType=function(){return l.FiguresFallTick},e}(),D=function(){function e(e){this.gameData=e}return e.prototype.getCommandType=function(){return l.GameOver},e}(),B=function(){function e(e){this.gameData=e}return e.prototype.getCommandType=function(){return l.Render},e}(),M=function(){function e(e){this.gameData=e}return e.prototype.getCommandType=function(){return l.MoveLeft},e}(),H=function(){function e(e){this.gameData=e}return e.prototype.getCommandType=function(){return l.MoveRight},e}(),G=function(){function e(e){this.gameData=e}return e.prototype.getCommandType=function(){return l.TurnClockwise},e}(),S=function(){function e(e){this.gameData=e}return e.prototype.getCommandType=function(){return l.MoveDown},e}(),O=function(){function e(e){this.gameData=e}return e.prototype.getCommandType=function(){return l.FiguresFallDown},e}(),x=function(){function e(){this.handlers=new Map}return e.prototype.addHandler=function(e,t,n){void 0===n&&(n=!0);var i=this.handlers.get(e)||[];n&&i.some((function(e){return e===t}))||(i.push(t),this.handlers.set(e,i))},e.prototype.removeHandler=function(e,t){var n=this.handlers.get(e)||[],i=n.indexOf(t);i>0&&n.splice(i,1),this.handlers.set(e,n)},e.prototype.run=function(e){(this.handlers.get(e.getCommandType())||[]).forEach((function(t){t(e)}))},e}(),b=function(){function e(e,t,n){this.timingsHandler=e,this.eventBus=t,this.commandBus=n,this.gameData=y.makeSimple(),this.commandBus.addHandler(l.InitGame,this.initGameHandler.bind(this)),this.commandBus.addHandler(l.ResumeGame,this.resumeGameHandler.bind(this)),this.commandBus.addHandler(l.PauseGame,this.pauseGameHandler.bind(this)),this.commandBus.addHandler(l.GameOver,this.gameOverHandler.bind(this))}return e.prototype.initGameHandler=function(e){this.gameData=e.gameData,this.gameData.isInitialized=!0},e.prototype.resumeGameHandler=function(e){this.gameData.isGameOver||(this.gameData.isInitialized||this.commandBus.run(new F(e.gameData)),this.fallTick())},e.prototype.pauseGameHandler=function(e){this.gameData=e.gameData,clearTimeout(this.gameData.nextTickTimeoutId),this.commandBus.run(new B(this.gameData))},e.prototype.gameOverHandler=function(){clearTimeout(this.gameData.nextTickTimeoutId),this.gameData.isInitialized=!1,this.gameData.isGameOver=!0,this.eventBus.fire(new r(this.gameData))},e.prototype.fallTick=function(){this.commandBus.run(new C(this.gameData)),this.gameData.isGameOver||(this.gameData.nextTickTimeoutId=setTimeout(this.fallTick.bind(this),this.timingsHandler.getDelayForNextTickMs(this.gameData)))},e}(),E=function(){function e(){}return e.canFigureBePlaced=function(e,t,n){return e.every((function(e,i){return e.every((function(e,r){var o=t.y+i,a=t.x+r;return!e||o<0&&a>=0&&a<=n[0].length-1||o in n&&a in n[o]&&!n[o][a]}))}))},e}(),k=function(e,t){this.x=e,this.y=t},P=function(e,t,n){this.figure=e,this.position=t,this.turnState=n},L=function(e,t,n){this.filled=e,this.filledGameOver=t,this.empty=n},R=function(e,t,n,i,r){void 0===t&&(t=!0),void 0===n&&(n=new L("#007400","#780000","#fff")),void 0===i&&(i=new L("#007400","#780000",null)),void 0===r&&(r=new L("#b8e5e3",null,null)),this.containerElement=e,this.renderProjectionFigures=t,this.matrixCellColors=n,this.fallingFigureCellColors=i,this.projectionFigureCellColors=r},I=function(e,t){this.filled=e,this.empty=t},j=function(){function t(e,t,n){this.renderSettings=e,this.commandBus=t,this.eventBus=n,this.cellsHtmlElementsMap=[],t.addHandler(l.InitGame,this.initHandler.bind(this)),t.addHandler(l.Render,this.renderCommandHandler.bind(this))}return t.prototype.initHandler=function(n){this.table=t.createHtmlElement('<div style="float: left; display: table; border-collapse: collapse"></div>'),this.cellsHtmlElementsMap=[];for(var i=0;i<n.gameData.settings.fieldHeight;i++){var r=t.createHtmlElement('<div style="display: table-row"></div>');this.cellsHtmlElementsMap[i]=[];for(var o=0;o<n.gameData.settings.fieldWidth;o++){var a=t.createHtmlElement('<div style="display: table-cell; border: 1px solid #ccc; width: 20px; height: 20px"></div>');this.cellsHtmlElementsMap[i][o]=a,r.appendChild(a)}this.table.appendChild(r)}this.renderSettings.containerElement.innerHTML="",this.renderSettings.containerElement.appendChild(this.table),this.scoreDisplay=t.createHtmlElement('<div style="float: left; font-family: \'Helvetica Neue\', sans-serif; font-size: 20px; margin-left: 15px;">\n                Level: <span id="level"></span><br>\n                Score: <span id="score"></span>\n            </div>'),this.renderSettings.containerElement.appendChild(this.scoreDisplay),this.renderSettings.containerElement.appendChild(t.createHtmlElement('<div style="clear: both"></div>')),this.eventBus.on(e.FallingTickProcessed,this.onFallTickProcessed.bind(this)),this.eventBus.on(e.GameOver,this.onGameOver.bind(this)),this.eventBus.on(e.FiguresMoved,this.onFiguresMoved.bind(this))},t.prototype.onFiguresMoved=function(e){this.renderState(e.gameData)},t.prototype.onFallTickProcessed=function(e){this.renderState(e.gameData)},t.prototype.onGameOver=function(e){this.renderState(e.gameData)},t.prototype.renderCommandHandler=function(e){this.renderState(e.gameData)},t.prototype.renderState=function(e){this.repaintMatrixCells(e.matrix,new k(0,0),e),this.renderSettings.renderProjectionFigures&&this.renderFallingFiguresProjection(e),this.renderFallingFigures(e),this.renderStats(e)},t.prototype.renderFallingFigures=function(e){var t=this;e.fallingFigures.forEach((function(n){t.repaintFallingFiguresCells(n.figure.getTurn(n.turnState),n.position,e)}))},t.prototype.renderFallingFiguresProjection=function(e){var t=this;e.fallingFigures.forEach((function(n){for(var i=n.figure.getTurn(n.turnState),r=n.position.x,o=n.position.y;E.canFigureBePlaced(i,new k(r,o+1),e.matrix);)o++;t.repaintProjectionFiguresCells(i,new k(r,o),e)}))},t.prototype.repaintMatrixCells=function(e,t,n){var i;i=n.isGameOver?new I(this.renderSettings.matrixCellColors.filledGameOver,this.renderSettings.matrixCellColors.empty):new I(this.renderSettings.matrixCellColors.filled,this.renderSettings.matrixCellColors.empty),this.repaintCells(e,t,i)},t.prototype.repaintFallingFiguresCells=function(e,t,n){var i;i=n.isGameOver?new I(this.renderSettings.fallingFigureCellColors.filledGameOver,this.renderSettings.fallingFigureCellColors.empty):new I(this.renderSettings.fallingFigureCellColors.filled,this.renderSettings.fallingFigureCellColors.empty),this.repaintCells(e,t,i)},t.prototype.repaintProjectionFiguresCells=function(e,t,n){var i;i=n.isGameOver?new I(this.renderSettings.projectionFigureCellColors.filledGameOver,this.renderSettings.projectionFigureCellColors.empty):new I(this.renderSettings.projectionFigureCellColors.filled,this.renderSettings.projectionFigureCellColors.empty),this.repaintCells(e,t,i)},t.prototype.repaintCells=function(e,t,n){var i=this;e.forEach((function(e,r){e.forEach((function(e,o){var a=r+t.y,s=o+t.x;if(a in i.cellsHtmlElementsMap&&s in i.cellsHtmlElementsMap[a]){var u=e?n.filled:n.empty;null!==u&&(i.cellsHtmlElementsMap[a][s].style.background=u)}}))}))},t.prototype.renderStats=function(e){var t=document.getElementById("level"),n=document.getElementById("score");null!==t&&(t.innerHTML=e.level.toString()),null!==n&&(n.innerHTML=e.score.toString())},t.createHtmlElement=function(e){var t=document.createElement("div");if(t.innerHTML=e,t.children.length>1||null===t.firstElementChild)throw"The HTML must contain only one child";if(!(t.firstElementChild instanceof HTMLElement))throw"Something went wrong while trying to get HTMLElement child from div";return t.firstElementChild},t}(),N=function(){this.transferredFigures=[],this.isGameOver=!1},q=function(){function e(e,t){this.commandBus=e,this.eventBus=t,this.commandBus.addHandler(l.FiguresFallTick,this.processFiguresFallTickCommand.bind(this)),this.commandBus.addHandler(l.FiguresFallDown,this.processFiguresFallDownCommand.bind(this))}return e.prototype.processFiguresFallTickCommand=function(e){var t=this.fallFiguresForOneCell(e.gameData),n=this.squashLines(e.gameData.matrix);t.isGameOver&&this.commandBus.run(new D(e.gameData)),this.eventBus.fire(new i(e.gameData,t.transferredFigures,n))},e.prototype.processFiguresFallDownCommand=function(e){for(var t,n=new N;e.gameData.fallingFigures.length>0;){var r=this.fallFiguresForOneCell(e.gameData);(t=n.transferredFigures).push.apply(t,r.transferredFigures),n.isGameOver=n.isGameOver||r.isGameOver}var o=this.squashLines(e.gameData.matrix);n.isGameOver&&this.commandBus.run(new D(e.gameData)),this.eventBus.fire(new i(e.gameData,n.transferredFigures,o))},e.prototype.fallFiguresForOneCell=function(e){var t=this,n=new N;return e.fallingFigures.forEach((function(i,r){var o;if(t.figureCanFall(e.matrix,i))i.position.y++;else{var a=t.transferFigureToMatrix(e.matrix,i);(o=n.transferredFigures).push.apply(o,e.fallingFigures.splice(r,1)),n.isGameOver=n.isGameOver||a}})),n},e.prototype.figureCanFall=function(e,t){return E.canFigureBePlaced(t.figure.getTurn(t.turnState),new k(t.position.x,t.position.y+1),e)},e.prototype.transferFigureToMatrix=function(e,t){var n=!1;return t.figure.getTurn(t.turnState).forEach((function(i,r){i.forEach((function(i,o){if(i){var a=t.position.x+o,s=t.position.y+r;s in e&&a in e[s]&&!e[s][a]?e[s][a]=!0:n=!0}}))})),n},e.prototype.squashLines=function(e){var t=[];return e.forEach((function(e,n){e.every((function(e){return e}))&&t.push(n)}),0),t.forEach((function(t){e.splice(t,1),e.unshift(new Array(e[0].length).fill(!1))})),t},e}(),A=function(){function t(e,t){this.eventBus=e,this.commandBus=t,this.commandBus.addHandler(l.InitGame,this.initHandler.bind(this))}return t.prototype.initHandler=function(t){this.addFigure(t.gameData),this.eventBus.on(e.FallingTickProcessed,this.processOnFallTick.bind(this))},t.prototype.processOnFallTick=function(e){this.addFigure(e.gameData)},t.prototype.addFigure=function(e){if(!(e.fallingFigures.length>0||e.isGameOver)){var t=Math.floor(Math.random()*e.settings.figures.length),n=e.settings.figures[t],i=this.getRandTurnState(),r=n.getTurn(i),o=Math.max.apply(Math,r.map((function(e){return e.length}))),a=new k(Math.ceil(e.settings.fieldWidth/2-o/2)-1,-r.length);e.fallingFigures.push(new P(n,a,i))}},t.prototype.getRandTurnState=function(){var e=Object.keys(n).map((function(e){return Number.parseInt(e)})).filter((function(e){return!Number.isNaN(e)}));return e[Math.floor(Math.random()*e.length)]},t}(),z=function(){function e(e,t){this.commandBus=e,this.eventBus=t,this.commandBus.addHandler(l.MoveLeft,this.processMoveLeftCommand.bind(this)),this.commandBus.addHandler(l.MoveRight,this.processMoveRightCommand.bind(this)),this.commandBus.addHandler(l.MoveDown,this.processMoveDownCommand.bind(this)),this.commandBus.addHandler(l.TurnClockwise,this.processTurnClockwiseCommand.bind(this))}return e.prototype.processMoveLeftCommand=function(e){e.gameData.fallingFigures.forEach((function(t){E.canFigureBePlaced(t.figure.getTurn(t.turnState),new k(t.position.x-1,t.position.y),e.gameData.matrix)&&t.position.x--})),this.eventBus.fire(new o(e.gameData))},e.prototype.processMoveRightCommand=function(e){e.gameData.fallingFigures.forEach((function(t){E.canFigureBePlaced(t.figure.getTurn(t.turnState),new k(t.position.x+1,t.position.y),e.gameData.matrix)&&t.position.x++})),this.eventBus.fire(new o(e.gameData))},e.prototype.processTurnClockwiseCommand=function(e){var t=this.getTurnStatesAsArray();e.gameData.fallingFigures.forEach((function(n){var i=n.turnState+1;i in t||(i=t[0]),E.canFigureBePlaced(n.figure.getTurn(i),n.position,e.gameData.matrix)&&(n.turnState=i)})),this.eventBus.fire(new o(e.gameData))},e.prototype.processMoveDownCommand=function(e){this.commandBus.run(new C(e.gameData))},e.prototype.getTurnStatesAsArray=function(){return Object.keys(n).map((function(e){return Number.parseInt(e)})).filter((function(e){return!Number.isNaN(e)}))},e}(),_=function(){function e(e){this.commandBus=e,this.commandBus.addHandler(l.InitGame,this.processInitGameCommand.bind(this))}return e.prototype.processInitGameCommand=function(e){var t=this;window.onkeydown=function(n){"ArrowLeft"===n.code?t.commandBus.run(new M(e.gameData)):"ArrowRight"===n.code?t.commandBus.run(new H(e.gameData)):"ArrowUp"===n.code?t.commandBus.run(new G(e.gameData)):"ArrowDown"===n.code||"ArrowDown"===n.code?t.commandBus.run(new S(e.gameData)):"Space"===n.code&&t.commandBus.run(new O(e.gameData))}},e}(),U=function(){function e(e){this.initialDelayMs=e}return e.prototype.getDelayForNextTickMs=function(e){return Math.pow(.8-.007*(e.level-1),e.level-1)*this.initialDelayMs},e}(),W=function(){function t(t,n){void 0===n&&(n=new Map([[1,100],[2,300],[3,700],[4,1500]])),this.eventBus=t,this.squashedRowsRewardThresholdsMap=n,t.on(e.FallingTickProcessed,this.onFallingTickProcessed.bind(this))}return t.prototype.onFallingTickProcessed=function(e){if(!(e.squashedLines.length<0)){var t=0;this.squashedRowsRewardThresholdsMap.forEach((function(n,i){i>e.squashedLines.length||(t=n)})),e.gameData.score+=t}},t}(),J=function(){function t(e,t,n,i){this.eventBus=e,this.commandBus=t,this.levelIncreaseOnSquashedRowsNumber=n,this.maxLevels=i,this.squashedRowsCounter=0,this.commandBus.addHandler(l.InitGame,this.processInitGameCommand.bind(this))}return t.prototype.processInitGameCommand=function(t){this.eventBus.on(e.FallingTickProcessed,this.onFallTickProcessed.bind(this))},t.prototype.onFallTickProcessed=function(e){0!==e.squashedLines.length&&(this.squashedRowsCounter++,this.squashedRowsCounter>=this.levelIncreaseOnSquashedRowsNumber&&(this.squashedRowsCounter=0,e.gameData.level=Math.min(this.maxLevels,e.gameData.level+1)))},t}(),K=function(){function e(){this.eventBus=new a,this.commandBus=new x,this.gameController=new b(new U(2e3),this.eventBus,this.commandBus),this.movingHandler=new z(this.commandBus,this.eventBus),this.movingController=new _(this.commandBus),this.fallingFiguresProcessor=new q(this.commandBus,this.eventBus),this.figuresSpawner=new A(this.eventBus,this.commandBus),this.levelCounter=new J(this.eventBus,this.commandBus,10,15),this.scoreCounter=new W(this.eventBus),this.tableRenderer=new j(new R(document.body),this.commandBus,this.eventBus),this.gameData=y.makeSimple()}return e.prototype.start=function(e){this.gameData=e||y.makeSimple(),this.commandBus.run(new F(this.gameData)),this.commandBus.run(new w(this.gameData))},e.prototype.resume=function(){this.commandBus.run(new w(this.gameData))},e.prototype.pause=function(){this.commandBus.run(new T(this.gameData))},e}();document.addEventListener("DOMContentLoaded",(function(){(new K).start()}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,